"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lifeomic";
exports.ids = ["vendor-chunks/@lifeomic"];
exports.modules = {

/***/ "(rsc)/./node_modules/@lifeomic/attempt/dist/es6/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lifeomic/attempt/dist/es6/src/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCalculateDelay: () => (/* binding */ defaultCalculateDelay),\n/* harmony export */   retry: () => (/* binding */ retry),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\nfunction applyDefaults(options) {\n    if (!options) {\n        options = {};\n    }\n    return {\n        delay: options.delay === undefined ? 200 : options.delay,\n        initialDelay: options.initialDelay === undefined ? 0 : options.initialDelay,\n        minDelay: options.minDelay === undefined ? 0 : options.minDelay,\n        maxDelay: options.maxDelay === undefined ? 0 : options.maxDelay,\n        factor: options.factor === undefined ? 0 : options.factor,\n        maxAttempts: options.maxAttempts === undefined ? 3 : options.maxAttempts,\n        timeout: options.timeout === undefined ? 0 : options.timeout,\n        jitter: options.jitter === true,\n        initialJitter: options.initialJitter === true,\n        handleError: options.handleError === undefined ? null : options.handleError,\n        handleTimeout: options.handleTimeout === undefined ? null : options.handleTimeout,\n        beforeAttempt: options.beforeAttempt === undefined ? null : options.beforeAttempt,\n        calculateDelay: options.calculateDelay === undefined ? null : options.calculateDelay\n    };\n}\nasync function sleep(delay) {\n    return new Promise((resolve)=>setTimeout(resolve, delay));\n}\nfunction defaultCalculateDelay(context, options) {\n    let delay = options.delay;\n    if (delay === 0) {\n        // no delay between attempts\n        return 0;\n    }\n    if (options.factor) {\n        delay *= Math.pow(options.factor, context.attemptNum - 1);\n        if (options.maxDelay !== 0) {\n            delay = Math.min(delay, options.maxDelay);\n        }\n    }\n    if (options.jitter) {\n        // Jitter will result in a random value between `minDelay` and\n        // calculated delay for a given attempt.\n        // See https://www.awsarchitectureblog.com/2015/03/backoff.html\n        // We're using the \"full jitter\" strategy.\n        const min = Math.ceil(options.minDelay);\n        const max = Math.floor(delay);\n        delay = Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    return Math.round(delay);\n}\nasync function retry(attemptFunc, attemptOptions) {\n    const options = applyDefaults(attemptOptions);\n    for (const prop of [\n        \"delay\",\n        \"initialDelay\",\n        \"minDelay\",\n        \"maxDelay\",\n        \"maxAttempts\",\n        \"timeout\"\n    ]){\n        const value = options[prop];\n        if (!Number.isInteger(value) || value < 0) {\n            throw new Error(`Value for ${prop} must be an integer greater than or equal to 0`);\n        }\n    }\n    if (options.factor.constructor !== Number || options.factor < 0) {\n        throw new Error(`Value for factor must be a number greater than or equal to 0`);\n    }\n    if (options.delay < options.minDelay) {\n        throw new Error(`delay cannot be less than minDelay (delay: ${options.delay}, minDelay: ${options.minDelay}`);\n    }\n    const context = {\n        attemptNum: 0,\n        attemptsRemaining: options.maxAttempts ? options.maxAttempts : -1,\n        aborted: false,\n        abort () {\n            context.aborted = true;\n        }\n    };\n    const calculateDelay = options.calculateDelay || defaultCalculateDelay;\n    async function makeAttempt() {\n        if (options.beforeAttempt) {\n            options.beforeAttempt(context, options);\n        }\n        if (context.aborted) {\n            const err = new Error(`Attempt aborted`);\n            err.code = \"ATTEMPT_ABORTED\";\n            throw err;\n        }\n        const onError = async (err)=>{\n            if (options.handleError) {\n                await options.handleError(err, context, options);\n            }\n            if (context.aborted || context.attemptsRemaining === 0) {\n                throw err;\n            }\n            // We are about to try again so increment attempt number\n            context.attemptNum++;\n            const delay = calculateDelay(context, options);\n            if (delay) {\n                await sleep(delay);\n            }\n            return makeAttempt();\n        };\n        if (context.attemptsRemaining > 0) {\n            context.attemptsRemaining--;\n        }\n        if (options.timeout) {\n            return new Promise((resolve, reject)=>{\n                const timer = setTimeout(()=>{\n                    if (options.handleTimeout) {\n                        // If calling handleTimeout throws an error that is not wrapped in a promise\n                        // we want to catch the error and reject.\n                        try {\n                            resolve(options.handleTimeout(context, options));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    } else {\n                        const err = new Error(`Retry timeout (attemptNum: ${context.attemptNum}, timeout: ${options.timeout})`);\n                        err.code = \"ATTEMPT_TIMEOUT\";\n                        reject(err);\n                    }\n                }, options.timeout);\n                attemptFunc(context, options).then((result)=>{\n                    clearTimeout(timer);\n                    resolve(result);\n                }).catch((err)=>{\n                    clearTimeout(timer);\n                    // Calling resolve with a Promise that rejects here will result\n                    // in an unhandled rejection. Calling `reject` with errors\n                    // does not result in an unhandled rejection\n                    onError(err).then(resolve).catch(reject);\n                });\n            });\n        } else {\n            // No timeout provided so wait indefinitely for the returned promise\n            // to be resolved.\n            return attemptFunc(context, options).catch(onError);\n        }\n    }\n    const initialDelay = options.calculateDelay ? options.calculateDelay(context, options) : options.initialDelay;\n    if (initialDelay) {\n        await sleep(initialDelay);\n    }\n    if (context.attemptNum < 1 && options.initialJitter) {\n        const delay = calculateDelay(context, options);\n        if (delay) {\n            await sleep(delay);\n        }\n    }\n    return makeAttempt();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@lifeomic/attempt/dist/es6/src/index.js\n");

/***/ })

};
;