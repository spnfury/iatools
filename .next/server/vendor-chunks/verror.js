"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/verror";
exports.ids = ["vendor-chunks/verror"];
exports.modules = {

/***/ "(rsc)/./node_modules/verror/lib/verror.js":
/*!*******************************************!*\
  !*** ./node_modules/verror/lib/verror.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * verror.js: richer JavaScript errors\n */ \nvar mod_assertplus = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar mod_util = __webpack_require__(/*! util */ \"util\");\nvar mod_extsprintf = __webpack_require__(/*! extsprintf */ \"(rsc)/./node_modules/extsprintf/lib/extsprintf.js\");\nvar mod_isError = (__webpack_require__(/*! core-util-is */ \"(rsc)/./node_modules/core-util-is/lib/util.js\").isError);\nvar sprintf = mod_extsprintf.sprintf;\n/*\n * Public interface\n */ /* So you can 'var VError = require('verror')' */ module.exports = VError;\n/* For compatibility */ VError.VError = VError;\n/* Other exported classes */ VError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n/*\n * Common function used to parse constructor arguments for VError, WError, and\n * SError.  Named arguments to this function:\n *\n *     strict\t\tforce strict interpretation of sprintf arguments, even\n *     \t\t\tif the options in \"argv\" don't say so\n *\n *     argv\t\terror's constructor arguments, which are to be\n *     \t\t\tinterpreted as described in README.md.  For quick\n *     \t\t\treference, \"argv\" has one of the following forms:\n *\n *          [ sprintf_args... ]           (argv[0] is a string)\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n *          [ options, sprintf_args... ]  (argv[0] is an object)\n *\n * This function normalizes these forms, producing an object with the following\n * properties:\n *\n *    options           equivalent to \"options\" in third form.  This will never\n *    \t\t\tbe a direct reference to what the caller passed in\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n *    \t\t\tmodified.\n *\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n *    \t\t\tinto account as described in README.md.\n */ function parseConstructorArguments(args) {\n    var argv, options, sprintf_args, shortmessage, k;\n    mod_assertplus.object(args, \"args\");\n    mod_assertplus.bool(args.strict, \"args.strict\");\n    mod_assertplus.array(args.argv, \"args.argv\");\n    argv = args.argv;\n    /*\n\t * First, figure out which form of invocation we've been given.\n\t */ if (argv.length === 0) {\n        options = {};\n        sprintf_args = [];\n    } else if (mod_isError(argv[0])) {\n        options = {\n            \"cause\": argv[0]\n        };\n        sprintf_args = argv.slice(1);\n    } else if (typeof argv[0] === \"object\") {\n        options = {};\n        for(k in argv[0]){\n            options[k] = argv[0][k];\n        }\n        sprintf_args = argv.slice(1);\n    } else {\n        mod_assertplus.string(argv[0], \"first argument to VError, SError, or WError \" + \"constructor must be a string, object, or Error\");\n        options = {};\n        sprintf_args = argv;\n    }\n    /*\n\t * Now construct the error's message.\n\t *\n\t * extsprintf (which we invoke here with our caller's arguments in order\n\t * to construct this Error's message) is strict in its interpretation of\n\t * values to be processed by the \"%s\" specifier.  The value passed to\n\t * extsprintf must actually be a string or something convertible to a\n\t * String using .toString().  Passing other values (notably \"null\" and\n\t * \"undefined\") is considered a programmer error.  The assumption is\n\t * that if you actually want to print the string \"null\" or \"undefined\",\n\t * then that's easy to do that when you're calling extsprintf; on the\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\n\t * where the program assumes some variable is non-null and tries to\n\t * print it, which might happen when constructing a packet or file in\n\t * some specific format), then it's better to stop immediately than\n\t * produce bogus output.\n\t *\n\t * However, sometimes the bug is only in the code calling VError, and a\n\t * programmer might prefer to have the error message contain \"null\" or\n\t * \"undefined\" rather than have the bug in the error path crash the\n\t * program (making the first bug harder to identify).  For that reason,\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\n\t * string representations and passes those to extsprintf.  Programmers\n\t * desiring the strict behavior can use the SError class or pass the\n\t * \"strict\" option to the VError constructor.\n\t */ mod_assertplus.object(options);\n    if (!options.strict && !args.strict) {\n        sprintf_args = sprintf_args.map(function(a) {\n            return a === null ? \"null\" : a === undefined ? \"undefined\" : a;\n        });\n    }\n    if (sprintf_args.length === 0) {\n        shortmessage = \"\";\n    } else {\n        shortmessage = sprintf.apply(null, sprintf_args);\n    }\n    return {\n        \"options\": options,\n        \"shortmessage\": shortmessage\n    };\n}\n/*\n * See README.md for reference documentation.\n */ function VError() {\n    var args, obj, parsed, cause, ctor, message, k;\n    args = Array.prototype.slice.call(arguments, 0);\n    /*\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\n\t * is defined to work this way, so we allow the constructor to be called\n\t * without \"new\".\n\t */ if (!(this instanceof VError)) {\n        obj = Object.create(VError.prototype);\n        VError.apply(obj, arguments);\n        return obj;\n    }\n    /*\n\t * For convenience and backwards compatibility, we support several\n\t * different calling forms.  Normalize them here.\n\t */ parsed = parseConstructorArguments({\n        \"argv\": args,\n        \"strict\": false\n    });\n    /*\n\t * If we've been given a name, apply it now.\n\t */ if (parsed.options.name) {\n        mod_assertplus.string(parsed.options.name, 'error\\'s \"name\" must be a string');\n        this.name = parsed.options.name;\n    }\n    /*\n\t * For debugging, we keep track of the original short message (attached\n\t * this Error particularly) separately from the complete message (which\n\t * includes the messages of our cause chain).\n\t */ this.jse_shortmsg = parsed.shortmessage;\n    message = parsed.shortmessage;\n    /*\n\t * If we've been given a cause, record a reference to it and update our\n\t * message appropriately.\n\t */ cause = parsed.options.cause;\n    if (cause) {\n        mod_assertplus.ok(mod_isError(cause), \"cause is not an Error\");\n        this.jse_cause = cause;\n        if (!parsed.options.skipCauseMessage) {\n            message += \": \" + cause.message;\n        }\n    }\n    /*\n\t * If we've been given an object with properties, shallow-copy that\n\t * here.  We don't want to use a deep copy in case there are non-plain\n\t * objects here, but we don't want to use the original object in case\n\t * the caller modifies it later.\n\t */ this.jse_info = {};\n    if (parsed.options.info) {\n        for(k in parsed.options.info){\n            this.jse_info[k] = parsed.options.info[k];\n        }\n    }\n    this.message = message;\n    Error.call(this, message);\n    if (Error.captureStackTrace) {\n        ctor = parsed.options.constructorOpt || this.constructor;\n        Error.captureStackTrace(this, ctor);\n    }\n    return this;\n}\nmod_util.inherits(VError, Error);\nVError.prototype.name = \"VError\";\nVError.prototype.toString = function ve_toString() {\n    var str = this.hasOwnProperty(\"name\") && this.name || this.constructor.name || this.constructor.prototype.name;\n    if (this.message) str += \": \" + this.message;\n    return str;\n};\n/*\n * This method is provided for compatibility.  New callers should use\n * VError.cause() instead.  That method also uses the saner `null` return value\n * when there is no cause.\n */ VError.prototype.cause = function ve_cause() {\n    var cause = VError.cause(this);\n    return cause === null ? undefined : cause;\n};\n/*\n * Static methods\n *\n * These class-level methods are provided so that callers can use them on\n * instances of Errors that are not VErrors.  New interfaces should be provided\n * only using static methods to eliminate the class of programming mistake where\n * people fail to check whether the Error object has the corresponding methods.\n */ VError.cause = function(err) {\n    mod_assertplus.ok(mod_isError(err), \"err must be an Error\");\n    return mod_isError(err.jse_cause) ? err.jse_cause : null;\n};\nVError.info = function(err) {\n    var rv, cause, k;\n    mod_assertplus.ok(mod_isError(err), \"err must be an Error\");\n    cause = VError.cause(err);\n    if (cause !== null) {\n        rv = VError.info(cause);\n    } else {\n        rv = {};\n    }\n    if (typeof err.jse_info == \"object\" && err.jse_info !== null) {\n        for(k in err.jse_info){\n            rv[k] = err.jse_info[k];\n        }\n    }\n    return rv;\n};\nVError.findCauseByName = function(err, name) {\n    var cause;\n    mod_assertplus.ok(mod_isError(err), \"err must be an Error\");\n    mod_assertplus.string(name, \"name\");\n    mod_assertplus.ok(name.length > 0, \"name cannot be empty\");\n    for(cause = err; cause !== null; cause = VError.cause(cause)){\n        mod_assertplus.ok(mod_isError(cause));\n        if (cause.name == name) {\n            return cause;\n        }\n    }\n    return null;\n};\nVError.hasCauseWithName = function(err, name) {\n    return VError.findCauseByName(err, name) !== null;\n};\nVError.fullStack = function(err) {\n    mod_assertplus.ok(mod_isError(err), \"err must be an Error\");\n    var cause = VError.cause(err);\n    if (cause) {\n        return err.stack + \"\\ncaused by: \" + VError.fullStack(cause);\n    }\n    return err.stack;\n};\nVError.errorFromList = function(errors) {\n    mod_assertplus.arrayOfObject(errors, \"errors\");\n    if (errors.length === 0) {\n        return null;\n    }\n    errors.forEach(function(e) {\n        mod_assertplus.ok(mod_isError(e));\n    });\n    if (errors.length == 1) {\n        return errors[0];\n    }\n    return new MultiError(errors);\n};\nVError.errorForEach = function(err, func) {\n    mod_assertplus.ok(mod_isError(err), \"err must be an Error\");\n    mod_assertplus.func(func, \"func\");\n    if (err instanceof MultiError) {\n        err.errors().forEach(function iterError(e) {\n            func(e);\n        });\n    } else {\n        func(err);\n    }\n};\n/*\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n * \"undefined\" as string arguments to the formatter.\n */ function SError() {\n    var args, obj, parsed, options;\n    args = Array.prototype.slice.call(arguments, 0);\n    if (!(this instanceof SError)) {\n        obj = Object.create(SError.prototype);\n        SError.apply(obj, arguments);\n        return obj;\n    }\n    parsed = parseConstructorArguments({\n        \"argv\": args,\n        \"strict\": true\n    });\n    options = parsed.options;\n    VError.call(this, options, \"%s\", parsed.shortmessage);\n    return this;\n}\n/*\n * We don't bother setting SError.prototype.name because once constructed,\n * SErrors are just like VErrors.\n */ mod_util.inherits(SError, VError);\n/*\n * Represents a collection of errors for the purpose of consumers that generally\n * only deal with one error.  Callers can extract the individual errors\n * contained in this object, but may also just treat it as a normal single\n * error, in which case a summary message will be printed.\n */ function MultiError(errors) {\n    mod_assertplus.array(errors, \"list of errors\");\n    mod_assertplus.ok(errors.length > 0, \"must be at least one error\");\n    this.ase_errors = errors;\n    VError.call(this, {\n        \"cause\": errors[0]\n    }, \"first of %d error%s\", errors.length, errors.length == 1 ? \"\" : \"s\");\n}\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = \"MultiError\";\nMultiError.prototype.errors = function me_errors() {\n    return this.ase_errors.slice(0);\n};\n/*\n * See README.md for reference details.\n */ function WError() {\n    var args, obj, parsed, options;\n    args = Array.prototype.slice.call(arguments, 0);\n    if (!(this instanceof WError)) {\n        obj = Object.create(WError.prototype);\n        WError.apply(obj, args);\n        return obj;\n    }\n    parsed = parseConstructorArguments({\n        \"argv\": args,\n        \"strict\": false\n    });\n    options = parsed.options;\n    options[\"skipCauseMessage\"] = true;\n    VError.call(this, options, \"%s\", parsed.shortmessage);\n    return this;\n}\nmod_util.inherits(WError, VError);\nWError.prototype.name = \"WError\";\nWError.prototype.toString = function we_toString() {\n    var str = this.hasOwnProperty(\"name\") && this.name || this.constructor.name || this.constructor.prototype.name;\n    if (this.message) str += \": \" + this.message;\n    if (this.jse_cause && this.jse_cause.message) str += \"; caused by \" + this.jse_cause.toString();\n    return str;\n};\n/*\n * For purely historical reasons, WError's cause() function allows you to set\n * the cause.\n */ WError.prototype.cause = function we_cause(c) {\n    if (mod_isError(c)) this.jse_cause = c;\n    return this.jse_cause;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/verror/lib/verror.js\n");

/***/ })

};
;