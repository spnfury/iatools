"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/assert-plus";
exports.ids = ["vendor-chunks/assert-plus"];
exports.modules = {

/***/ "(rsc)/./node_modules/assert-plus/assert.js":
/*!********************************************!*\
  !*** ./node_modules/assert-plus/assert.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright (c) 2012, Mark Cavage. All rights reserved.\n// Copyright 2015 Joyent, Inc.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar util = __webpack_require__(/*! util */ \"util\");\n///--- Globals\n/* JSSTYLED */ var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;\n///--- Internal\nfunction _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction _toss(name, expected, oper, arg, actual) {\n    throw new assert.AssertionError({\n        message: util.format(\"%s (%s) is required\", name, expected),\n        actual: actual === undefined ? typeof arg : actual(arg),\n        expected: expected,\n        operator: oper || \"===\",\n        stackStartFunction: _toss.caller\n    });\n}\nfunction _getClass(arg) {\n    return Object.prototype.toString.call(arg).slice(8, -1);\n}\nfunction noop() {\n// Why even bother with asserts?\n}\n///--- Exports\nvar types = {\n    bool: {\n        check: function(arg) {\n            return typeof arg === \"boolean\";\n        }\n    },\n    func: {\n        check: function(arg) {\n            return typeof arg === \"function\";\n        }\n    },\n    string: {\n        check: function(arg) {\n            return typeof arg === \"string\";\n        }\n    },\n    object: {\n        check: function(arg) {\n            return typeof arg === \"object\" && arg !== null;\n        }\n    },\n    number: {\n        check: function(arg) {\n            return typeof arg === \"number\" && !isNaN(arg);\n        }\n    },\n    finite: {\n        check: function(arg) {\n            return typeof arg === \"number\" && !isNaN(arg) && isFinite(arg);\n        }\n    },\n    buffer: {\n        check: function(arg) {\n            return Buffer.isBuffer(arg);\n        },\n        operator: \"Buffer.isBuffer\"\n    },\n    array: {\n        check: function(arg) {\n            return Array.isArray(arg);\n        },\n        operator: \"Array.isArray\"\n    },\n    stream: {\n        check: function(arg) {\n            return arg instanceof Stream;\n        },\n        operator: \"instanceof\",\n        actual: _getClass\n    },\n    date: {\n        check: function(arg) {\n            return arg instanceof Date;\n        },\n        operator: \"instanceof\",\n        actual: _getClass\n    },\n    regexp: {\n        check: function(arg) {\n            return arg instanceof RegExp;\n        },\n        operator: \"instanceof\",\n        actual: _getClass\n    },\n    uuid: {\n        check: function(arg) {\n            return typeof arg === \"string\" && UUID_REGEXP.test(arg);\n        },\n        operator: \"isUUID\"\n    }\n};\nfunction _setExports(ndebug) {\n    var keys = Object.keys(types);\n    var out;\n    /* re-export standard assert */ if (process.env.NODE_NDEBUG) {\n        out = noop;\n    } else {\n        out = function(arg, msg) {\n            if (!arg) {\n                _toss(msg, \"true\", arg);\n            }\n        };\n    }\n    /* standard checks */ keys.forEach(function(k) {\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        var type = types[k];\n        out[k] = function(arg, msg) {\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n    /* optional checks */ keys.forEach(function(k) {\n        var name = \"optional\" + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        out[name] = function(arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!type.check(arg)) {\n                _toss(msg, k, type.operator, arg, type.actual);\n            }\n        };\n    });\n    /* arrayOf checks */ keys.forEach(function(k) {\n        var name = \"arrayOf\" + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = \"[\" + k + \"]\";\n        out[name] = function(arg, msg) {\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for(i = 0; i < arg.length; i++){\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n    /* optionalArrayOf checks */ keys.forEach(function(k) {\n        var name = \"optionalArrayOf\" + _capitalize(k);\n        if (ndebug) {\n            out[name] = noop;\n            return;\n        }\n        var type = types[k];\n        var expected = \"[\" + k + \"]\";\n        out[name] = function(arg, msg) {\n            if (arg === undefined || arg === null) {\n                return;\n            }\n            if (!Array.isArray(arg)) {\n                _toss(msg, expected, type.operator, arg, type.actual);\n            }\n            var i;\n            for(i = 0; i < arg.length; i++){\n                if (!type.check(arg[i])) {\n                    _toss(msg, expected, type.operator, arg, type.actual);\n                }\n            }\n        };\n    });\n    /* re-export built-in assertions */ Object.keys(assert).forEach(function(k) {\n        if (k === \"AssertionError\") {\n            out[k] = assert[k];\n            return;\n        }\n        if (ndebug) {\n            out[k] = noop;\n            return;\n        }\n        out[k] = assert[k];\n    });\n    /* export ourselves (for unit tests _only_) */ out._setExports = _setExports;\n    return out;\n}\nmodule.exports = _setExports(process.env.NODE_NDEBUG);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/assert-plus/assert.js\n");

/***/ })

};
;