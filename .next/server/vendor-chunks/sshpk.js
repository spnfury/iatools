"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sshpk";
exports.ids = ["vendor-chunks/sshpk"];
exports.modules = {

/***/ "(rsc)/./node_modules/sshpk/lib/algs.js":
/*!****************************************!*\
  !*** ./node_modules/sshpk/lib/algs.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\"\n        ],\n        sizePart: \"p\"\n    },\n    \"rsa\": {\n        parts: [\n            \"e\",\n            \"n\"\n        ],\n        sizePart: \"n\"\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\"\n        ],\n        sizePart: \"Q\"\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\"\n        ],\n        sizePart: \"A\"\n    }\n};\nalgInfo[\"curve25519\"] = algInfo[\"ed25519\"];\nvar algPrivInfo = {\n    \"dsa\": {\n        parts: [\n            \"p\",\n            \"q\",\n            \"g\",\n            \"y\",\n            \"x\"\n        ]\n    },\n    \"rsa\": {\n        parts: [\n            \"n\",\n            \"e\",\n            \"d\",\n            \"iqmp\",\n            \"p\",\n            \"q\"\n        ]\n    },\n    \"ecdsa\": {\n        parts: [\n            \"curve\",\n            \"Q\",\n            \"d\"\n        ]\n    },\n    \"ed25519\": {\n        parts: [\n            \"A\",\n            \"k\"\n        ]\n    }\n};\nalgPrivInfo[\"curve25519\"] = algPrivInfo[\"ed25519\"];\nvar hashAlgs = {\n    \"md5\": true,\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha384\": true,\n    \"sha512\": true\n};\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */ var curves = {\n    \"nistp256\": {\n        size: 256,\n        pkcs8oid: \"1.2.840.10045.3.1.7\",\n        p: Buffer.from((\"00\" + \"ffffffff 00000001 00000000 00000000\" + \"00000000 ffffffff ffffffff ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF 00000001 00000000 00000000\" + \"00000000 FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"5ac635d8 aa3a93e7 b3ebbd55 769886bc\" + \"651d06b0 cc53b0f6 3bce3c3e 27d2604b\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"c49d3608 86e70493 6a6678e1 139d26b7\" + \"819f7e90\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff 00000000 ffffffff ffffffff\" + \"bce6faad a7179e84 f3b9cac2 fc632551\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"6b17d1f2 e12c4247 f8bce6e5 63a440f2\" + \"77037d81 2deb33a0 f4a13945 d898c296\" + \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16\" + \"2bce3357 6b315ece cbb64068 37bf51f5\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp384\": {\n        size: 384,\n        pkcs8oid: \"1.3.132.0.34\",\n        p: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffe\" + \"ffffffff 00000000 00000000 ffffffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"00\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE\" + \"FFFFFFFF 00000000 00000000 FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"b3312fa7 e23ee7e4 988e056b e3f82d19\" + \"181d9c6e fe814112 0314088f 5013875a\" + \"c656398d 8a2ed19d 2a85c8ed d3ec2aef\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"a335926a a319a27a 1d00896a 6773a482\" + \"7acdac73\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"00\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff c7634d81 f4372ddf\" + \"581a0db2 48b0a77a ecec196a ccc52973\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"aa87ca22 be8b0537 8eb1c71e f320ad74\" + \"6e1d3b62 8ba79b98 59f741e0 82542a38\" + \"5502f25d bf55296c 3a545e38 72760ab7\" + \"3617de4a 96262c6f 5d9e98bf 9292dc29\" + \"f8f41dbd 289a147c e9da3113 b5f0b8c0\" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\").replace(/ /g, \"\"), \"hex\")\n    },\n    \"nistp521\": {\n        size: 521,\n        pkcs8oid: \"1.3.132.0.35\",\n        p: Buffer.from((\"01ffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffff\").replace(/ /g, \"\"), \"hex\"),\n        a: Buffer.from((\"01FF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\" + \"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC\").replace(/ /g, \"\"), \"hex\"),\n        b: Buffer.from((\"51\" + \"953eb961 8e1c9a1f 929a21a0 b68540ee\" + \"a2da725b 99b315f3 b8b48991 8ef109e1\" + \"56193951 ec7e937b 1652c0bd 3bb1bf07\" + \"3573df88 3d2c34f1 ef451fd4 6b503f00\").replace(/ /g, \"\"), \"hex\"),\n        s: Buffer.from((\"00\" + \"d09e8800 291cb853 96cc6717 393284aa\" + \"a0da64ba\").replace(/ /g, \"\"), \"hex\"),\n        n: Buffer.from((\"01ff\" + \"ffffffff ffffffff ffffffff ffffffff\" + \"ffffffff ffffffff ffffffff fffffffa\" + \"51868783 bf2f966b 7fcc0148 f709a5d0\" + \"3bb5c9b8 899c47ae bb6fb71e 91386409\").replace(/ /g, \"\"), \"hex\"),\n        G: Buffer.from((\"04\" + \"00c6 858e06b7 0404e9cd 9e3ecb66 2395b442\" + \"9c648139 053fb521 f828af60 6b4d3dba\" + \"a14b5e77 efe75928 fe1dc127 a2ffa8de\" + \"3348b3c1 856a429b f97e7e31 c2e5bd66\" + \"0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9\" + \"98f54449 579b4468 17afbd17 273e662c\" + \"97ee7299 5ef42640 c550b901 3fad0761\" + \"353c7086 a272c240 88be9476 9fd16650\").replace(/ /g, \"\"), \"hex\")\n    }\n};\nmodule.exports = {\n    info: algInfo,\n    privInfo: algPrivInfo,\n    hashAlgs: hashAlgs,\n    curves: curves\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/algs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/certificate.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/certificate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nmodule.exports = Certificate;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar formats = {};\nformats[\"openssh\"] = __webpack_require__(/*! ./formats/openssh-cert */ \"(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\");\nformats[\"x509\"] = __webpack_require__(/*! ./formats/x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/x509-pem */ \"(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\");\nvar CertificateParseError = errs.CertificateParseError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Certificate(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.subjects, \"options.subjects\");\n    utils.assertCompatible(opts.subjects[0], Identity, [\n        1,\n        0\n    ], \"options.subjects\");\n    utils.assertCompatible(opts.subjectKey, Key, [\n        1,\n        0\n    ], \"options.subjectKey\");\n    utils.assertCompatible(opts.issuer, Identity, [\n        1,\n        0\n    ], \"options.issuer\");\n    if (opts.issuerKey !== undefined) {\n        utils.assertCompatible(opts.issuerKey, Key, [\n            1,\n            0\n        ], \"options.issuerKey\");\n    }\n    assert.object(opts.signatures, \"options.signatures\");\n    assert.buffer(opts.serial, \"options.serial\");\n    assert.date(opts.validFrom, \"options.validFrom\");\n    assert.date(opts.validUntil, \"optons.validUntil\");\n    assert.optionalArrayOfString(opts.purposes, \"options.purposes\");\n    this._hashCache = {};\n    this.subjects = opts.subjects;\n    this.issuer = opts.issuer;\n    this.subjectKey = opts.subjectKey;\n    this.issuerKey = opts.issuerKey;\n    this.signatures = opts.signatures;\n    this.serial = opts.serial;\n    this.validFrom = opts.validFrom;\n    this.validUntil = opts.validUntil;\n    this.purposes = opts.purposes;\n}\nCertificate.formats = formats;\nCertificate.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"x509\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nCertificate.prototype.toString = function(format, options) {\n    if (format === undefined) format = \"pem\";\n    return this.toBuffer(format, options).toString();\n};\nCertificate.prototype.fingerprint = function(algo) {\n    if (algo === undefined) algo = \"sha256\";\n    assert.string(algo, \"algorithm\");\n    var opts = {\n        type: \"certificate\",\n        hash: this.hash(algo),\n        algorithm: algo\n    };\n    return new Fingerprint(opts);\n};\nCertificate.prototype.hash = function(algo) {\n    assert.string(algo, \"algorithm\");\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    if (this._hashCache[algo]) return this._hashCache[algo];\n    var hash = crypto.createHash(algo).update(this.toBuffer(\"x509\")).digest();\n    this._hashCache[algo] = hash;\n    return hash;\n};\nCertificate.prototype.isExpired = function(when) {\n    if (when === undefined) when = new Date();\n    return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());\n};\nCertificate.prototype.isSignedBy = function(issuerCert) {\n    utils.assertCompatible(issuerCert, Certificate, [\n        1,\n        0\n    ], \"issuer\");\n    if (!this.issuer.equals(issuerCert.subjects[0])) return false;\n    if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf(\"ca\") === -1) {\n        return false;\n    }\n    return this.isSignedByKey(issuerCert.subjectKey);\n};\nCertificate.prototype.getExtension = function(keyOrOid) {\n    assert.string(keyOrOid, \"keyOrOid\");\n    var ext = this.getExtensions().filter(function(maybeExt) {\n        if (maybeExt.format === \"x509\") return maybeExt.oid === keyOrOid;\n        if (maybeExt.format === \"openssh\") return maybeExt.name === keyOrOid;\n        return false;\n    })[0];\n    return ext;\n};\nCertificate.prototype.getExtensions = function() {\n    var exts = [];\n    var x509 = this.signatures.x509;\n    if (x509 && x509.extras && x509.extras.exts) {\n        x509.extras.exts.forEach(function(ext) {\n            ext.format = \"x509\";\n            exts.push(ext);\n        });\n    }\n    var openssh = this.signatures.openssh;\n    if (openssh && openssh.exts) {\n        openssh.exts.forEach(function(ext) {\n            ext.format = \"openssh\";\n            exts.push(ext);\n        });\n    }\n    return exts;\n};\nCertificate.prototype.isSignedByKey = function(issuerKey) {\n    utils.assertCompatible(issuerKey, Key, [\n        1,\n        2\n    ], \"issuerKey\");\n    if (this.issuerKey !== undefined) {\n        return this.issuerKey.fingerprint(\"sha512\").matches(issuerKey);\n    }\n    var fmt = Object.keys(this.signatures)[0];\n    var valid = formats[fmt].verify(this, issuerKey);\n    if (valid) this.issuerKey = issuerKey;\n    return valid;\n};\nCertificate.prototype.signWith = function(key) {\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"key\");\n    var fmts = Object.keys(formats);\n    var didOne = false;\n    for(var i = 0; i < fmts.length; ++i){\n        if (fmts[i] !== \"pem\") {\n            var ret = formats[fmts[i]].sign(this, key);\n            if (ret === true) didOne = true;\n        }\n    }\n    if (!didOne) {\n        throw new Error(\"Failed to sign the certificate for any \" + \"available certificate formats\");\n    }\n};\nCertificate.createSelfSigned = function(subjectOrSubjects, key, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, PrivateKey, [\n        1,\n        2\n    ], \"private key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    /* Self-signed certs are always CAs. */ if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n    if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    /*\n\t * If we weren't explicitly given any other purposes, do the sensible\n\t * thing and add some basic ones depending on the subject type.\n\t */ if (purposes.length <= 3) {\n        var hostSubjects = subjects.filter(function(subject) {\n            return subject.type === \"host\";\n        });\n        var userSubjects = subjects.filter(function(subject) {\n            return subject.type === \"user\";\n        });\n        if (hostSubjects.length > 0) {\n            if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n        }\n        if (userSubjects.length > 0) {\n            if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n        }\n        if (userSubjects.length > 0 || hostSubjects.length > 0) {\n            if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n            if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n        }\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: subjects[0],\n        subjectKey: key.toPublic(),\n        issuerKey: key.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(key);\n    return cert;\n};\nCertificate.create = function(subjectOrSubjects, key, issuer, issuerKey, options) {\n    var subjects;\n    if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;\n    else subjects = [\n        subjectOrSubjects\n    ];\n    assert.arrayOfObject(subjects);\n    subjects.forEach(function(subject) {\n        utils.assertCompatible(subject, Identity, [\n            1,\n            0\n        ], \"subject\");\n    });\n    utils.assertCompatible(key, Key, [\n        1,\n        0\n    ], \"key\");\n    if (PrivateKey.isPrivateKey(key)) key = key.toPublic();\n    utils.assertCompatible(issuer, Identity, [\n        1,\n        0\n    ], \"issuer\");\n    utils.assertCompatible(issuerKey, PrivateKey, [\n        1,\n        2\n    ], \"issuer key\");\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalObject(options.validFrom, \"options.validFrom\");\n    assert.optionalObject(options.validUntil, \"options.validUntil\");\n    var validFrom = options.validFrom;\n    var validUntil = options.validUntil;\n    if (validFrom === undefined) validFrom = new Date();\n    if (validUntil === undefined) {\n        assert.optionalNumber(options.lifetime, \"options.lifetime\");\n        var lifetime = options.lifetime;\n        if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;\n        validUntil = new Date();\n        validUntil.setTime(validUntil.getTime() + lifetime * 1000);\n    }\n    assert.optionalBuffer(options.serial, \"options.serial\");\n    var serial = options.serial;\n    if (serial === undefined) serial = Buffer.from(\"0000000000000001\", \"hex\");\n    var purposes = options.purposes;\n    if (purposes === undefined) purposes = [];\n    if (purposes.indexOf(\"signature\") === -1) purposes.push(\"signature\");\n    if (options.ca === true) {\n        if (purposes.indexOf(\"ca\") === -1) purposes.push(\"ca\");\n        if (purposes.indexOf(\"crl\") === -1) purposes.push(\"crl\");\n    }\n    var hostSubjects = subjects.filter(function(subject) {\n        return subject.type === \"host\";\n    });\n    var userSubjects = subjects.filter(function(subject) {\n        return subject.type === \"user\";\n    });\n    if (hostSubjects.length > 0) {\n        if (purposes.indexOf(\"serverAuth\") === -1) purposes.push(\"serverAuth\");\n    }\n    if (userSubjects.length > 0) {\n        if (purposes.indexOf(\"clientAuth\") === -1) purposes.push(\"clientAuth\");\n    }\n    if (userSubjects.length > 0 || hostSubjects.length > 0) {\n        if (purposes.indexOf(\"keyAgreement\") === -1) purposes.push(\"keyAgreement\");\n        if (key.type === \"rsa\" && purposes.indexOf(\"encryption\") === -1) purposes.push(\"encryption\");\n    }\n    var cert = new Certificate({\n        subjects: subjects,\n        issuer: issuer,\n        subjectKey: key,\n        issuerKey: issuerKey.toPublic(),\n        signatures: {},\n        serial: serial,\n        validFrom: validFrom,\n        validUntil: validUntil,\n        purposes: purposes\n    });\n    cert.signWith(issuerKey);\n    return cert;\n};\nCertificate.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        return k;\n    } catch (e) {\n        throw new CertificateParseError(options.filename, format, e);\n    }\n};\nCertificate.isCertificate = function(obj, ver) {\n    return utils.isCompatible(obj, Certificate, ver);\n};\n/*\n * API versions for Certificate:\n * [1,0] -- initial ver\n * [1,1] -- openssh format now unpacks extensions\n */ Certificate.prototype._sshpkApiVersion = [\n    1,\n    1\n];\nCertificate._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2NlcnRpZmljYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUJBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsOEZBQThCO0FBQzNDLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlJLGNBQWNKLG1CQUFPQSxDQUFDO0FBQzFCLElBQUlLLFlBQVlMLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlNLE9BQU9OLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlPLE9BQU9QLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlRLFFBQVFSLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlTLE1BQU1ULG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlVLGFBQWFWLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlXLFdBQVdYLG1CQUFPQSxDQUFDO0FBRXZCLElBQUlZLFVBQVUsQ0FBQztBQUNmQSxPQUFPLENBQUMsVUFBVSxHQUFHWixtQkFBT0EsQ0FBQztBQUM3QlksT0FBTyxDQUFDLE9BQU8sR0FBR1osbUJBQU9BLENBQUM7QUFDMUJZLE9BQU8sQ0FBQyxNQUFNLEdBQUdaLG1CQUFPQSxDQUFDO0FBRXpCLElBQUlhLHdCQUF3QlAsS0FBS08scUJBQXFCO0FBQ3RELElBQUlDLHdCQUF3QlIsS0FBS1EscUJBQXFCO0FBRXRELFNBQVNoQixZQUFZaUIsSUFBSTtJQUN4QmhCLE9BQU9pQixNQUFNLENBQUNELE1BQU07SUFDcEJoQixPQUFPa0IsYUFBYSxDQUFDRixLQUFLRyxRQUFRLEVBQUU7SUFDcENWLE1BQU1XLGdCQUFnQixDQUFDSixLQUFLRyxRQUFRLENBQUMsRUFBRSxFQUFFUCxVQUFVO1FBQUM7UUFBRztLQUFFLEVBQ3JEO0lBQ0pILE1BQU1XLGdCQUFnQixDQUFDSixLQUFLSyxVQUFVLEVBQUVYLEtB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VUMsR0FBRyxFQUFFQyxHQUFHO0lBQzdDLE9BQVEzRyxNQUFNNEcsWUFBWSxDQUFDRixLQUFLcEgsYUFBYXFIO0FBQzlDO0FBRUE7Ozs7Q0FJQyxHQUNEckgsWUFBWW1DLFNBQVMsQ0FBQ29GLGdCQUFnQixHQUFHO0lBQUM7SUFBRztDQUFFO0FBRS9DdkgsWUFBWXdILGlCQUFpQixHQUFHLFNBQVVKLEdBQUc7SUFDNUMsT0FBUTtRQUFDO1FBQUc7S0FBRTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWF0b29scy1uZXh0Ly4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9jZXJ0aWZpY2F0ZS5qcz83ZDdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IENlcnRpZmljYXRlO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgYWxncyA9IHJlcXVpcmUoJy4vYWxncycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIEZpbmdlcnByaW50ID0gcmVxdWlyZSgnLi9maW5nZXJwcmludCcpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG52YXIgZXJycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuL3ByaXZhdGUta2V5Jyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbnZhciBmb3JtYXRzID0ge307XG5mb3JtYXRzWydvcGVuc3NoJ10gPSByZXF1aXJlKCcuL2Zvcm1hdHMvb3BlbnNzaC1jZXJ0Jyk7XG5mb3JtYXRzWyd4NTA5J10gPSByZXF1aXJlKCcuL2Zvcm1hdHMveDUwOScpO1xuZm9ybWF0c1sncGVtJ10gPSByZXF1aXJlKCcuL2Zvcm1hdHMveDUwOS1wZW0nKTtcblxudmFyIENlcnRpZmljYXRlUGFyc2VFcnJvciA9IGVycnMuQ2VydGlmaWNhdGVQYXJzZUVycm9yO1xudmFyIEludmFsaWRBbGdvcml0aG1FcnJvciA9IGVycnMuSW52YWxpZEFsZ29yaXRobUVycm9yO1xuXG5mdW5jdGlvbiBDZXJ0aWZpY2F0ZShvcHRzKSB7XG5cdGFzc2VydC5vYmplY3Qob3B0cywgJ29wdGlvbnMnKTtcblx0YXNzZXJ0LmFycmF5T2ZPYmplY3Qob3B0cy5zdWJqZWN0cywgJ29wdGlvbnMuc3ViamVjdHMnKTtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShvcHRzLnN1YmplY3RzWzBdLCBJZGVudGl0eSwgWzEsIDBdLFxuXHQgICAgJ29wdGlvbnMuc3ViamVjdHMnKTtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShvcHRzLnN1YmplY3RLZXksIEtleSwgWzEsIDBdLFxuXHQgICAgJ29wdGlvbnMuc3ViamVjdEtleScpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKG9wdHMuaXNzdWVyLCBJZGVudGl0eSwgWzEsIDBdLCAnb3B0aW9ucy5pc3N1ZXInKTtcblx0aWYgKG9wdHMuaXNzdWVyS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKG9wdHMuaXNzdWVyS2V5LCBLZXksIFsxLCAwXSxcblx0XHQgICAgJ29wdGlvbnMuaXNzdWVyS2V5Jyk7XG5cdH1cblx0YXNzZXJ0Lm9iamVjdChvcHRzLnNpZ25hdHVyZXMsICdvcHRpb25zLnNpZ25hdHVyZXMnKTtcblx0YXNzZXJ0LmJ1ZmZlcihvcHRzLnNlcmlhbCwgJ29wdGlvbnMuc2VyaWFsJyk7XG5cdGFzc2VydC5kYXRlKG9wdHMudmFsaWRGcm9tLCAnb3B0aW9ucy52YWxpZEZyb20nKTtcblx0YXNzZXJ0LmRhdGUob3B0cy52YWxpZFVudGlsLCAnb3B0b25zLnZhbGlkVW50aWwnKTtcblxuXHRhc3NlcnQub3B0aW9uYWxBcnJheU9mU3RyaW5nKG9wdHMucHVycG9zZXMsICdvcHRpb25zLnB1cnBvc2VzJyk7XG5cblx0dGhpcy5faGFzaENhY2hlID0ge307XG5cblx0dGhpcy5zdWJqZWN0cyA9IG9wdHMuc3ViamVjdHM7XG5cdHRoaXMuaXNzdWVyID0gb3B0cy5pc3N1ZXI7XG5cdHRoaXMuc3ViamVjdEtleSA9IG9wdHMuc3ViamVjdEtleTtcblx0dGhpcy5pc3N1ZXJLZXkgPSBvcHRzLmlzc3VlcktleTtcblx0dGhpcy5zaWduYXR1cmVzID0gb3B0cy5zaWduYXR1cmVzO1xuXHR0aGlzLnNlcmlhbCA9IG9wdHMuc2VyaWFsO1xuXHR0aGlzLnZhbGlkRnJvbSA9IG9wdHMudmFsaWRGcm9tO1xuXHR0aGlzLnZhbGlkVW50aWwgPSBvcHRzLnZhbGlkVW50aWw7XG5cdHRoaXMucHVycG9zZXMgPSBvcHRzLnB1cnBvc2VzO1xufVxuXG5DZXJ0aWZpY2F0ZS5mb3JtYXRzID0gZm9ybWF0cztcblxuQ2VydGlmaWNhdGUucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKGZvcm1hdCwgb3B0aW9ucykge1xuXHRpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpXG5cdFx0Zm9ybWF0ID0gJ3g1MDknO1xuXHRhc3NlcnQuc3RyaW5nKGZvcm1hdCwgJ2Zvcm1hdCcpO1xuXHRhc3NlcnQub2JqZWN0KGZvcm1hdHNbZm9ybWF0XSwgJ2Zvcm1hdHNbZm9ybWF0XScpO1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblxuXHRyZXR1cm4gKGZvcm1hdHNbZm9ybWF0XS53cml0ZSh0aGlzLCBvcHRpb25zKSk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZm9ybWF0LCBvcHRpb25zKSB7XG5cdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRmb3JtYXQgPSAncGVtJztcblx0cmV0dXJuICh0aGlzLnRvQnVmZmVyKGZvcm1hdCwgb3B0aW9ucykudG9TdHJpbmcoKSk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuZmluZ2VycHJpbnQgPSBmdW5jdGlvbiAoYWxnbykge1xuXHRpZiAoYWxnbyA9PT0gdW5kZWZpbmVkKVxuXHRcdGFsZ28gPSAnc2hhMjU2Jztcblx0YXNzZXJ0LnN0cmluZyhhbGdvLCAnYWxnb3JpdGhtJyk7XG5cdHZhciBvcHRzID0ge1xuXHRcdHR5cGU6ICdjZXJ0aWZpY2F0ZScsXG5cdFx0aGFzaDogdGhpcy5oYXNoKGFsZ28pLFxuXHRcdGFsZ29yaXRobTogYWxnb1xuXHR9O1xuXHRyZXR1cm4gKG5ldyBGaW5nZXJwcmludChvcHRzKSk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uIChhbGdvKSB7XG5cdGFzc2VydC5zdHJpbmcoYWxnbywgJ2FsZ29yaXRobScpO1xuXHRhbGdvID0gYWxnby50b0xvd2VyQ2FzZSgpO1xuXHRpZiAoYWxncy5oYXNoQWxnc1thbGdvXSA9PT0gdW5kZWZpbmVkKVxuXHRcdHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ28pKTtcblxuXHRpZiAodGhpcy5faGFzaENhY2hlW2FsZ29dKVxuXHRcdHJldHVybiAodGhpcy5faGFzaENhY2hlW2FsZ29dKTtcblxuXHR2YXIgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKGFsZ28pLlxuXHQgICAgdXBkYXRlKHRoaXMudG9CdWZmZXIoJ3g1MDknKSkuZGlnZXN0KCk7XG5cdHRoaXMuX2hhc2hDYWNoZVthbGdvXSA9IGhhc2g7XG5cdHJldHVybiAoaGFzaCk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuaXNFeHBpcmVkID0gZnVuY3Rpb24gKHdoZW4pIHtcblx0aWYgKHdoZW4gPT09IHVuZGVmaW5lZClcblx0XHR3aGVuID0gbmV3IERhdGUoKTtcblx0cmV0dXJuICghKCh3aGVuLmdldFRpbWUoKSA+PSB0aGlzLnZhbGlkRnJvbS5nZXRUaW1lKCkpICYmXG5cdFx0KHdoZW4uZ2V0VGltZSgpIDwgdGhpcy52YWxpZFVudGlsLmdldFRpbWUoKSkpKTtcbn07XG5cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5pc1NpZ25lZEJ5ID0gZnVuY3Rpb24gKGlzc3VlckNlcnQpIHtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShpc3N1ZXJDZXJ0LCBDZXJ0aWZpY2F0ZSwgWzEsIDBdLCAnaXNzdWVyJyk7XG5cblx0aWYgKCF0aGlzLmlzc3Vlci5lcXVhbHMoaXNzdWVyQ2VydC5zdWJqZWN0c1swXSkpXG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdGlmICh0aGlzLmlzc3Vlci5wdXJwb3NlcyAmJiB0aGlzLmlzc3Vlci5wdXJwb3Nlcy5sZW5ndGggPiAwICYmXG5cdCAgICB0aGlzLmlzc3Vlci5wdXJwb3Nlcy5pbmRleE9mKCdjYScpID09PSAtMSkge1xuXHRcdHJldHVybiAoZmFsc2UpO1xuXHR9XG5cblx0cmV0dXJuICh0aGlzLmlzU2lnbmVkQnlLZXkoaXNzdWVyQ2VydC5zdWJqZWN0S2V5KSk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24gKGtleU9yT2lkKSB7XG5cdGFzc2VydC5zdHJpbmcoa2V5T3JPaWQsICdrZXlPck9pZCcpO1xuXHR2YXIgZXh0ID0gdGhpcy5nZXRFeHRlbnNpb25zKCkuZmlsdGVyKGZ1bmN0aW9uIChtYXliZUV4dCkge1xuXHRcdGlmIChtYXliZUV4dC5mb3JtYXQgPT09ICd4NTA5Jylcblx0XHRcdHJldHVybiAobWF5YmVFeHQub2lkID09PSBrZXlPck9pZCk7XG5cdFx0aWYgKG1heWJlRXh0LmZvcm1hdCA9PT0gJ29wZW5zc2gnKVxuXHRcdFx0cmV0dXJuIChtYXliZUV4dC5uYW1lID09PSBrZXlPck9pZCk7XG5cdFx0cmV0dXJuIChmYWxzZSk7XG5cdH0pWzBdO1xuXHRyZXR1cm4gKGV4dCk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGV4dHMgPSBbXTtcblx0dmFyIHg1MDkgPSB0aGlzLnNpZ25hdHVyZXMueDUwOTtcblx0aWYgKHg1MDkgJiYgeDUwOS5leHRyYXMgJiYgeDUwOS5leHRyYXMuZXh0cykge1xuXHRcdHg1MDkuZXh0cmFzLmV4dHMuZm9yRWFjaChmdW5jdGlvbiAoZXh0KSB7XG5cdFx0XHRleHQuZm9ybWF0ID0gJ3g1MDknO1xuXHRcdFx0ZXh0cy5wdXNoKGV4dCk7XG5cdFx0fSk7XG5cdH1cblx0dmFyIG9wZW5zc2ggPSB0aGlzLnNpZ25hdHVyZXMub3BlbnNzaDtcblx0aWYgKG9wZW5zc2ggJiYgb3BlbnNzaC5leHRzKSB7XG5cdFx0b3BlbnNzaC5leHRzLmZvckVhY2goZnVuY3Rpb24gKGV4dCkge1xuXHRcdFx0ZXh0LmZvcm1hdCA9ICdvcGVuc3NoJztcblx0XHRcdGV4dHMucHVzaChleHQpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiAoZXh0cyk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuaXNTaWduZWRCeUtleSA9IGZ1bmN0aW9uIChpc3N1ZXJLZXkpIHtcblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShpc3N1ZXJLZXksIEtleSwgWzEsIDJdLCAnaXNzdWVyS2V5Jyk7XG5cblx0aWYgKHRoaXMuaXNzdWVyS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gKHRoaXMuaXNzdWVyS2V5LlxuXHRcdCAgICBmaW5nZXJwcmludCgnc2hhNTEyJykubWF0Y2hlcyhpc3N1ZXJLZXkpKTtcblx0fVxuXG5cdHZhciBmbXQgPSBPYmplY3Qua2V5cyh0aGlzLnNpZ25hdHVyZXMpWzBdO1xuXHR2YXIgdmFsaWQgPSBmb3JtYXRzW2ZtdF0udmVyaWZ5KHRoaXMsIGlzc3VlcktleSk7XG5cdGlmICh2YWxpZClcblx0XHR0aGlzLmlzc3VlcktleSA9IGlzc3VlcktleTtcblx0cmV0dXJuICh2YWxpZCk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5wcm90b3R5cGUuc2lnbldpdGggPSBmdW5jdGlvbiAoa2V5KSB7XG5cdHV0aWxzLmFzc2VydENvbXBhdGlibGUoa2V5LCBQcml2YXRlS2V5LCBbMSwgMl0sICdrZXknKTtcblx0dmFyIGZtdHMgPSBPYmplY3Qua2V5cyhmb3JtYXRzKTtcblx0dmFyIGRpZE9uZSA9IGZhbHNlO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGZtdHMubGVuZ3RoOyArK2kpIHtcblx0XHRpZiAoZm10c1tpXSAhPT0gJ3BlbScpIHtcblx0XHRcdHZhciByZXQgPSBmb3JtYXRzW2ZtdHNbaV1dLnNpZ24odGhpcywga2V5KTtcblx0XHRcdGlmIChyZXQgPT09IHRydWUpXG5cdFx0XHRcdGRpZE9uZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdGlmICghZGlkT25lKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignRmFpbGVkIHRvIHNpZ24gdGhlIGNlcnRpZmljYXRlIGZvciBhbnkgJyArXG5cdFx0ICAgICdhdmFpbGFibGUgY2VydGlmaWNhdGUgZm9ybWF0cycpKTtcblx0fVxufTtcblxuQ2VydGlmaWNhdGUuY3JlYXRlU2VsZlNpZ25lZCA9IGZ1bmN0aW9uIChzdWJqZWN0T3JTdWJqZWN0cywga2V5LCBvcHRpb25zKSB7XG5cdHZhciBzdWJqZWN0cztcblx0aWYgKEFycmF5LmlzQXJyYXkoc3ViamVjdE9yU3ViamVjdHMpKVxuXHRcdHN1YmplY3RzID0gc3ViamVjdE9yU3ViamVjdHM7XG5cdGVsc2Vcblx0XHRzdWJqZWN0cyA9IFtzdWJqZWN0T3JTdWJqZWN0c107XG5cblx0YXNzZXJ0LmFycmF5T2ZPYmplY3Qoc3ViamVjdHMpO1xuXHRzdWJqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJqZWN0KSB7XG5cdFx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShzdWJqZWN0LCBJZGVudGl0eSwgWzEsIDBdLCAnc3ViamVjdCcpO1xuXHR9KTtcblxuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGtleSwgUHJpdmF0ZUtleSwgWzEsIDJdLCAncHJpdmF0ZSBrZXknKTtcblxuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLnZhbGlkRnJvbSwgJ29wdGlvbnMudmFsaWRGcm9tJyk7XG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLnZhbGlkVW50aWwsICdvcHRpb25zLnZhbGlkVW50aWwnKTtcblx0dmFyIHZhbGlkRnJvbSA9IG9wdGlvbnMudmFsaWRGcm9tO1xuXHR2YXIgdmFsaWRVbnRpbCA9IG9wdGlvbnMudmFsaWRVbnRpbDtcblx0aWYgKHZhbGlkRnJvbSA9PT0gdW5kZWZpbmVkKVxuXHRcdHZhbGlkRnJvbSA9IG5ldyBEYXRlKCk7XG5cdGlmICh2YWxpZFVudGlsID09PSB1bmRlZmluZWQpIHtcblx0XHRhc3NlcnQub3B0aW9uYWxOdW1iZXIob3B0aW9ucy5saWZldGltZSwgJ29wdGlvbnMubGlmZXRpbWUnKTtcblx0XHR2YXIgbGlmZXRpbWUgPSBvcHRpb25zLmxpZmV0aW1lO1xuXHRcdGlmIChsaWZldGltZSA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0bGlmZXRpbWUgPSAxMCozNjUqMjQqMzYwMDtcblx0XHR2YWxpZFVudGlsID0gbmV3IERhdGUoKTtcblx0XHR2YWxpZFVudGlsLnNldFRpbWUodmFsaWRVbnRpbC5nZXRUaW1lKCkgKyBsaWZldGltZSoxMDAwKTtcblx0fVxuXHRhc3NlcnQub3B0aW9uYWxCdWZmZXIob3B0aW9ucy5zZXJpYWwsICdvcHRpb25zLnNlcmlhbCcpO1xuXHR2YXIgc2VyaWFsID0gb3B0aW9ucy5zZXJpYWw7XG5cdGlmIChzZXJpYWwgPT09IHVuZGVmaW5lZClcblx0XHRzZXJpYWwgPSBCdWZmZXIuZnJvbSgnMDAwMDAwMDAwMDAwMDAwMScsICdoZXgnKTtcblxuXHR2YXIgcHVycG9zZXMgPSBvcHRpb25zLnB1cnBvc2VzO1xuXHRpZiAocHVycG9zZXMgPT09IHVuZGVmaW5lZClcblx0XHRwdXJwb3NlcyA9IFtdO1xuXG5cdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdzaWduYXR1cmUnKSA9PT0gLTEpXG5cdFx0cHVycG9zZXMucHVzaCgnc2lnbmF0dXJlJyk7XG5cblx0LyogU2VsZi1zaWduZWQgY2VydHMgYXJlIGFsd2F5cyBDQXMuICovXG5cdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjYScpID09PSAtMSlcblx0XHRwdXJwb3Nlcy5wdXNoKCdjYScpO1xuXHRpZiAocHVycG9zZXMuaW5kZXhPZignY3JsJykgPT09IC0xKVxuXHRcdHB1cnBvc2VzLnB1c2goJ2NybCcpO1xuXG5cdC8qXG5cdCAqIElmIHdlIHdlcmVuJ3QgZXhwbGljaXRseSBnaXZlbiBhbnkgb3RoZXIgcHVycG9zZXMsIGRvIHRoZSBzZW5zaWJsZVxuXHQgKiB0aGluZyBhbmQgYWRkIHNvbWUgYmFzaWMgb25lcyBkZXBlbmRpbmcgb24gdGhlIHN1YmplY3QgdHlwZS5cblx0ICovXG5cdGlmIChwdXJwb3Nlcy5sZW5ndGggPD0gMykge1xuXHRcdHZhciBob3N0U3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHRcdHJldHVybiAoc3ViamVjdC50eXBlID09PSAnaG9zdCcpO1xuXHRcdH0pO1xuXHRcdHZhciB1c2VyU3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKHN1YmplY3QpIHtcblx0XHRcdHJldHVybiAoc3ViamVjdC50eXBlID09PSAndXNlcicpO1xuXHRcdH0pO1xuXHRcdGlmIChob3N0U3ViamVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ3NlcnZlckF1dGgnKSA9PT0gLTEpXG5cdFx0XHRcdHB1cnBvc2VzLnB1c2goJ3NlcnZlckF1dGgnKTtcblx0XHR9XG5cdFx0aWYgKHVzZXJTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAocHVycG9zZXMuaW5kZXhPZignY2xpZW50QXV0aCcpID09PSAtMSlcblx0XHRcdFx0cHVycG9zZXMucHVzaCgnY2xpZW50QXV0aCcpO1xuXHRcdH1cblx0XHRpZiAodXNlclN1YmplY3RzLmxlbmd0aCA+IDAgfHwgaG9zdFN1YmplY3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdrZXlBZ3JlZW1lbnQnKSA9PT0gLTEpXG5cdFx0XHRcdHB1cnBvc2VzLnB1c2goJ2tleUFncmVlbWVudCcpO1xuXHRcdFx0aWYgKGtleS50eXBlID09PSAncnNhJyAmJlxuXHRcdFx0ICAgIHB1cnBvc2VzLmluZGV4T2YoJ2VuY3J5cHRpb24nKSA9PT0gLTEpXG5cdFx0XHRcdHB1cnBvc2VzLnB1c2goJ2VuY3J5cHRpb24nKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgY2VydCA9IG5ldyBDZXJ0aWZpY2F0ZSh7XG5cdFx0c3ViamVjdHM6IHN1YmplY3RzLFxuXHRcdGlzc3Vlcjogc3ViamVjdHNbMF0sXG5cdFx0c3ViamVjdEtleToga2V5LnRvUHVibGljKCksXG5cdFx0aXNzdWVyS2V5OiBrZXkudG9QdWJsaWMoKSxcblx0XHRzaWduYXR1cmVzOiB7fSxcblx0XHRzZXJpYWw6IHNlcmlhbCxcblx0XHR2YWxpZEZyb206IHZhbGlkRnJvbSxcblx0XHR2YWxpZFVudGlsOiB2YWxpZFVudGlsLFxuXHRcdHB1cnBvc2VzOiBwdXJwb3Nlc1xuXHR9KTtcblx0Y2VydC5zaWduV2l0aChrZXkpO1xuXG5cdHJldHVybiAoY2VydCk7XG59O1xuXG5DZXJ0aWZpY2F0ZS5jcmVhdGUgPVxuICAgIGZ1bmN0aW9uIChzdWJqZWN0T3JTdWJqZWN0cywga2V5LCBpc3N1ZXIsIGlzc3VlcktleSwgb3B0aW9ucykge1xuXHR2YXIgc3ViamVjdHM7XG5cdGlmIChBcnJheS5pc0FycmF5KHN1YmplY3RPclN1YmplY3RzKSlcblx0XHRzdWJqZWN0cyA9IHN1YmplY3RPclN1YmplY3RzO1xuXHRlbHNlXG5cdFx0c3ViamVjdHMgPSBbc3ViamVjdE9yU3ViamVjdHNdO1xuXG5cdGFzc2VydC5hcnJheU9mT2JqZWN0KHN1YmplY3RzKTtcblx0c3ViamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdHV0aWxzLmFzc2VydENvbXBhdGlibGUoc3ViamVjdCwgSWRlbnRpdHksIFsxLCAwXSwgJ3N1YmplY3QnKTtcblx0fSk7XG5cblx0dXRpbHMuYXNzZXJ0Q29tcGF0aWJsZShrZXksIEtleSwgWzEsIDBdLCAna2V5Jyk7XG5cdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdGtleSA9IGtleS50b1B1YmxpYygpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGlzc3VlciwgSWRlbnRpdHksIFsxLCAwXSwgJ2lzc3VlcicpO1xuXHR1dGlscy5hc3NlcnRDb21wYXRpYmxlKGlzc3VlcktleSwgUHJpdmF0ZUtleSwgWzEsIDJdLCAnaXNzdWVyIGtleScpO1xuXG5cdGFzc2VydC5vcHRpb25hbE9iamVjdChvcHRpb25zLCAnb3B0aW9ucycpO1xuXHRpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMgPSB7fTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMudmFsaWRGcm9tLCAnb3B0aW9ucy52YWxpZEZyb20nKTtcblx0YXNzZXJ0Lm9wdGlvbmFsT2JqZWN0KG9wdGlvbnMudmFsaWRVbnRpbCwgJ29wdGlvbnMudmFsaWRVbnRpbCcpO1xuXHR2YXIgdmFsaWRGcm9tID0gb3B0aW9ucy52YWxpZEZyb207XG5cdHZhciB2YWxpZFVudGlsID0gb3B0aW9ucy52YWxpZFVudGlsO1xuXHRpZiAodmFsaWRGcm9tID09PSB1bmRlZmluZWQpXG5cdFx0dmFsaWRGcm9tID0gbmV3IERhdGUoKTtcblx0aWYgKHZhbGlkVW50aWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdGFzc2VydC5vcHRpb25hbE51bWJlcihvcHRpb25zLmxpZmV0aW1lLCAnb3B0aW9ucy5saWZldGltZScpO1xuXHRcdHZhciBsaWZldGltZSA9IG9wdGlvbnMubGlmZXRpbWU7XG5cdFx0aWYgKGxpZmV0aW1lID09PSB1bmRlZmluZWQpXG5cdFx0XHRsaWZldGltZSA9IDEwKjM2NSoyNCozNjAwO1xuXHRcdHZhbGlkVW50aWwgPSBuZXcgRGF0ZSgpO1xuXHRcdHZhbGlkVW50aWwuc2V0VGltZSh2YWxpZFVudGlsLmdldFRpbWUoKSArIGxpZmV0aW1lKjEwMDApO1xuXHR9XG5cdGFzc2VydC5vcHRpb25hbEJ1ZmZlcihvcHRpb25zLnNlcmlhbCwgJ29wdGlvbnMuc2VyaWFsJyk7XG5cdHZhciBzZXJpYWwgPSBvcHRpb25zLnNlcmlhbDtcblx0aWYgKHNlcmlhbCA9PT0gdW5kZWZpbmVkKVxuXHRcdHNlcmlhbCA9IEJ1ZmZlci5mcm9tKCcwMDAwMDAwMDAwMDAwMDAxJywgJ2hleCcpO1xuXG5cdHZhciBwdXJwb3NlcyA9IG9wdGlvbnMucHVycG9zZXM7XG5cdGlmIChwdXJwb3NlcyA9PT0gdW5kZWZpbmVkKVxuXHRcdHB1cnBvc2VzID0gW107XG5cblx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ3NpZ25hdHVyZScpID09PSAtMSlcblx0XHRwdXJwb3Nlcy5wdXNoKCdzaWduYXR1cmUnKTtcblxuXHRpZiAob3B0aW9ucy5jYSA9PT0gdHJ1ZSkge1xuXHRcdGlmIChwdXJwb3Nlcy5pbmRleE9mKCdjYScpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ2NhJyk7XG5cdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NybCcpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ2NybCcpO1xuXHR9XG5cblx0dmFyIGhvc3RTdWJqZWN0cyA9IHN1YmplY3RzLmZpbHRlcihmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdHJldHVybiAoc3ViamVjdC50eXBlID09PSAnaG9zdCcpO1xuXHR9KTtcblx0dmFyIHVzZXJTdWJqZWN0cyA9IHN1YmplY3RzLmZpbHRlcihmdW5jdGlvbiAoc3ViamVjdCkge1xuXHRcdHJldHVybiAoc3ViamVjdC50eXBlID09PSAndXNlcicpO1xuXHR9KTtcblx0aWYgKGhvc3RTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ3NlcnZlckF1dGgnKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdzZXJ2ZXJBdXRoJyk7XG5cdH1cblx0aWYgKHVzZXJTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2NsaWVudEF1dGgnKSA9PT0gLTEpXG5cdFx0XHRwdXJwb3Nlcy5wdXNoKCdjbGllbnRBdXRoJyk7XG5cdH1cblx0aWYgKHVzZXJTdWJqZWN0cy5sZW5ndGggPiAwIHx8IGhvc3RTdWJqZWN0cy5sZW5ndGggPiAwKSB7XG5cdFx0aWYgKHB1cnBvc2VzLmluZGV4T2YoJ2tleUFncmVlbWVudCcpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ2tleUFncmVlbWVudCcpO1xuXHRcdGlmIChrZXkudHlwZSA9PT0gJ3JzYScgJiZcblx0XHQgICAgcHVycG9zZXMuaW5kZXhPZignZW5jcnlwdGlvbicpID09PSAtMSlcblx0XHRcdHB1cnBvc2VzLnB1c2goJ2VuY3J5cHRpb24nKTtcblx0fVxuXG5cdHZhciBjZXJ0ID0gbmV3IENlcnRpZmljYXRlKHtcblx0XHRzdWJqZWN0czogc3ViamVjdHMsXG5cdFx0aXNzdWVyOiBpc3N1ZXIsXG5cdFx0c3ViamVjdEtleToga2V5LFxuXHRcdGlzc3VlcktleTogaXNzdWVyS2V5LnRvUHVibGljKCksXG5cdFx0c2lnbmF0dXJlczoge30sXG5cdFx0c2VyaWFsOiBzZXJpYWwsXG5cdFx0dmFsaWRGcm9tOiB2YWxpZEZyb20sXG5cdFx0dmFsaWRVbnRpbDogdmFsaWRVbnRpbCxcblx0XHRwdXJwb3NlczogcHVycG9zZXNcblx0fSk7XG5cdGNlcnQuc2lnbldpdGgoaXNzdWVyS2V5KTtcblxuXHRyZXR1cm4gKGNlcnQpO1xufTtcblxuQ2VydGlmaWNhdGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSwgZm9ybWF0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGRhdGEpICE9PSAnc3RyaW5nJylcblx0XHRhc3NlcnQuYnVmZmVyKGRhdGEsICdkYXRhJyk7XG5cdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRmb3JtYXQgPSAnYXV0byc7XG5cdGFzc2VydC5zdHJpbmcoZm9ybWF0LCAnZm9ybWF0Jyk7XG5cdGlmICh0eXBlb2YgKG9wdGlvbnMpID09PSAnc3RyaW5nJylcblx0XHRvcHRpb25zID0geyBmaWxlbmFtZTogb3B0aW9ucyB9O1xuXHRhc3NlcnQub3B0aW9uYWxPYmplY3Qob3B0aW9ucywgJ29wdGlvbnMnKTtcblx0aWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZClcblx0XHRvcHRpb25zID0ge307XG5cdGFzc2VydC5vcHRpb25hbFN0cmluZyhvcHRpb25zLmZpbGVuYW1lLCAnb3B0aW9ucy5maWxlbmFtZScpO1xuXHRpZiAob3B0aW9ucy5maWxlbmFtZSA9PT0gdW5kZWZpbmVkKVxuXHRcdG9wdGlvbnMuZmlsZW5hbWUgPSAnKHVubmFtZWQpJztcblxuXHRhc3NlcnQub2JqZWN0KGZvcm1hdHNbZm9ybWF0XSwgJ2Zvcm1hdHNbZm9ybWF0XScpO1xuXG5cdHRyeSB7XG5cdFx0dmFyIGsgPSBmb3JtYXRzW2Zvcm1hdF0ucmVhZChkYXRhLCBvcHRpb25zKTtcblx0XHRyZXR1cm4gKGspO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0dGhyb3cgKG5ldyBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3Iob3B0aW9ucy5maWxlbmFtZSwgZm9ybWF0LCBlKSk7XG5cdH1cbn07XG5cbkNlcnRpZmljYXRlLmlzQ2VydGlmaWNhdGUgPSBmdW5jdGlvbiAob2JqLCB2ZXIpIHtcblx0cmV0dXJuICh1dGlscy5pc0NvbXBhdGlibGUob2JqLCBDZXJ0aWZpY2F0ZSwgdmVyKSk7XG59O1xuXG4vKlxuICogQVBJIHZlcnNpb25zIGZvciBDZXJ0aWZpY2F0ZTpcbiAqIFsxLDBdIC0tIGluaXRpYWwgdmVyXG4gKiBbMSwxXSAtLSBvcGVuc3NoIGZvcm1hdCBub3cgdW5wYWNrcyBleHRlbnNpb25zXG4gKi9cbkNlcnRpZmljYXRlLnByb3RvdHlwZS5fc3NocGtBcGlWZXJzaW9uID0gWzEsIDFdO1xuXG5DZXJ0aWZpY2F0ZS5fb2xkVmVyc2lvbkRldGVjdCA9IGZ1bmN0aW9uIChvYmopIHtcblx0cmV0dXJuIChbMSwgMF0pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ2VydGlmaWNhdGUiLCJhc3NlcnQiLCJyZXF1aXJlIiwiQnVmZmVyIiwiYWxncyIsImNyeXB0byIsIkZpbmdlcnByaW50IiwiU2lnbmF0dXJlIiwiZXJycyIsInV0aWwiLCJ1dGlscyIsIktleSIsIlByaXZhdGVLZXkiLCJJZGVudGl0eSIsImZvcm1hdHMiLCJDZXJ0aWZpY2F0ZVBhcnNlRXJyb3IiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJvcHRzIiwib2JqZWN0IiwiYXJyYXlPZk9iamVjdCIsInN1YmplY3RzIiwiYXNzZXJ0Q29tcGF0aWJsZSIsInN1YmplY3RLZXkiLCJpc3N1ZXIiLCJpc3N1ZXJLZXkiLCJ1bmRlZmluZWQiLCJzaWduYXR1cmVzIiwiYnVmZmVyIiwic2VyaWFsIiwiZGF0ZSIsInZhbGlkRnJvbSIsInZhbGlkVW50aWwiLCJvcHRpb25hbEFycmF5T2ZTdHJpbmciLCJwdXJwb3NlcyIsIl9oYXNoQ2FjaGUiLCJwcm90b3R5cGUiLCJ0b0J1ZmZlciIsImZvcm1hdCIsIm9wdGlvbnMiLCJzdHJpbmciLCJvcHRpb25hbE9iamVjdCIsIndyaXRlIiwidG9TdHJpbmciLCJmaW5nZXJwcmludCIsImFsZ28iLCJ0eXBlIiwiaGFzaCIsImFsZ29yaXRobSIsInRvTG93ZXJDYXNlIiwiaGFzaEFsZ3MiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiaXNFeHBpcmVkIiwid2hlbiIsIkRhdGUiLCJnZXRUaW1lIiwiaXNTaWduZWRCeSIsImlzc3VlckNlcnQiLCJlcXVhbHMiLCJsZW5ndGgiLCJpbmRleE9mIiwiaXNTaWduZWRCeUtleSIsImdldEV4dGVuc2lvbiIsImtleU9yT2lkIiwiZXh0IiwiZ2V0RXh0ZW5zaW9ucyIsImZpbHRlciIsIm1heWJlRXh0Iiwib2lkIiwibmFtZSIsImV4dHMiLCJ4NTA5IiwiZXh0cmFzIiwiZm9yRWFjaCIsInB1c2giLCJvcGVuc3NoIiwibWF0Y2hlcyIsImZtdCIsIk9iamVjdCIsImtleXMiLCJ2YWxpZCIsInZlcmlmeSIsInNpZ25XaXRoIiwia2V5IiwiZm10cyIsImRpZE9uZSIsImkiLCJyZXQiLCJzaWduIiwiRXJyb3IiLCJjcmVhdGVTZWxmU2lnbmVkIiwic3ViamVjdE9yU3ViamVjdHMiLCJBcnJheSIsImlzQXJyYXkiLCJzdWJqZWN0Iiwib3B0aW9uYWxOdW1iZXIiLCJsaWZldGltZSIsInNldFRpbWUiLCJvcHRpb25hbEJ1ZmZlciIsImZyb20iLCJob3N0U3ViamVjdHMiLCJ1c2VyU3ViamVjdHMiLCJjZXJ0IiwidG9QdWJsaWMiLCJjcmVhdGUiLCJpc1ByaXZhdGVLZXkiLCJjYSIsInBhcnNlIiwiZGF0YSIsImZpbGVuYW1lIiwib3B0aW9uYWxTdHJpbmciLCJrIiwicmVhZCIsImUiLCJpc0NlcnRpZmljYXRlIiwib2JqIiwidmVyIiwiaXNDb21wYXRpYmxlIiwiX3NzaHBrQXBpVmVyc2lvbiIsIl9vbGRWZXJzaW9uRGV0ZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/certificate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/dhe.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/dhe.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    DiffieHellman: DiffieHellman,\n    generateECDSA: generateECDSA,\n    generateED25519: generateED25519\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;\nvar ecdh = __webpack_require__(/*! ecc-jsbn */ \"(rsc)/./node_modules/ecc-jsbn/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nfunction DiffieHellman(key) {\n    utils.assertCompatible(key, Key, [\n        1,\n        4\n    ], \"key\");\n    this._isPriv = PrivateKey.isPrivateKey(key, [\n        1,\n        3\n    ]);\n    this._algo = key.type;\n    this._curve = key.curve;\n    this._key = key;\n    if (key.type === \"dsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            throw new Error(\"Due to bugs in the node 0.10 \" + \"crypto API, node 0.12.x or later is required \" + \"to use DH\");\n        }\n        this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);\n        this._p = key.part.p;\n        this._g = key.part.g;\n        if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);\n        this._dh.setPublicKey(key.part.y.data);\n    } else if (key.type === \"ecdsa\") {\n        if (!CRYPTO_HAVE_ECDH) {\n            this._ecParams = new X9ECParameters(this._curve);\n            if (this._isPriv) {\n                this._priv = new ECPrivate(this._ecParams, key.part.d.data);\n            }\n            return;\n        }\n        var curve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[key.curve];\n        this._dh = crypto.createECDH(curve);\n        if (typeof this._dh !== \"object\" || typeof this._dh.setPrivateKey !== \"function\") {\n            CRYPTO_HAVE_ECDH = false;\n            DiffieHellman.call(this, key);\n            return;\n        }\n        if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);\n        this._dh.setPublicKey(key.part.Q.data);\n    } else if (key.type === \"curve25519\") {\n        if (this._isPriv) {\n            utils.assertCompatible(key, PrivateKey, [\n                1,\n                5\n            ], \"key\");\n            this._priv = key.part.k.data;\n        }\n    } else {\n        throw new Error(\"DH not supported for \" + key.type + \" keys\");\n    }\n}\nDiffieHellman.prototype.getPublicKey = function() {\n    if (this._isPriv) return this._key.toPublic();\n    return this._key;\n};\nDiffieHellman.prototype.getPrivateKey = function() {\n    if (this._isPriv) return this._key;\n    else return undefined;\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\nDiffieHellman.prototype._keyCheck = function(pk, isPub) {\n    assert.object(pk, \"key\");\n    if (!isPub) utils.assertCompatible(pk, PrivateKey, [\n        1,\n        3\n    ], \"key\");\n    utils.assertCompatible(pk, Key, [\n        1,\n        4\n    ], \"key\");\n    if (pk.type !== this._algo) {\n        throw new Error(\"A \" + pk.type + \" key cannot be used in \" + this._algo + \" Diffie-Hellman\");\n    }\n    if (pk.curve !== this._curve) {\n        throw new Error(\"A key from the \" + pk.curve + \" curve \" + \"cannot be used with a \" + this._curve + \" Diffie-Hellman\");\n    }\n    if (pk.type === \"dsa\") {\n        assert.deepEqual(pk.part.p, this._p, \"DSA key prime does not match\");\n        assert.deepEqual(pk.part.g, this._g, \"DSA key generator does not match\");\n    }\n};\nDiffieHellman.prototype.setKey = function(pk) {\n    this._keyCheck(pk);\n    if (pk.type === \"dsa\") {\n        this._dh.setPrivateKey(pk.part.x.data);\n        this._dh.setPublicKey(pk.part.y.data);\n    } else if (pk.type === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.setPrivateKey(pk.part.d.data);\n            this._dh.setPublicKey(pk.part.Q.data);\n        } else {\n            this._priv = new ECPrivate(this._ecParams, pk.part.d.data);\n        }\n    } else if (pk.type === \"curve25519\") {\n        var k = pk.part.k;\n        if (!pk.part.k) k = pk.part.r;\n        this._priv = k.data;\n        if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);\n        this._priv = this._priv.slice(0, 32);\n    }\n    this._key = pk;\n    this._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\nDiffieHellman.prototype.computeSecret = function(otherpk) {\n    this._keyCheck(otherpk, true);\n    if (!this._isPriv) throw new Error(\"DH exchange has not been initialized with \" + \"a private key yet\");\n    var pub;\n    if (this._algo === \"dsa\") {\n        return this._dh.computeSecret(otherpk.part.y.data);\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            return this._dh.computeSecret(otherpk.part.Q.data);\n        } else {\n            pub = new ECPublic(this._ecParams, otherpk.part.Q.data);\n            return this._priv.deriveSharedSecret(pub);\n        }\n    } else if (this._algo === \"curve25519\") {\n        pub = otherpk.part.A.data;\n        while(pub[0] === 0x00 && pub.length > 32)pub = pub.slice(1);\n        var priv = this._priv;\n        assert.strictEqual(pub.length, 32);\n        assert.strictEqual(priv.length, 32);\n        var secret = nacl.box.before(new Uint8Array(pub), new Uint8Array(priv));\n        return Buffer.from(secret);\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKey = function() {\n    var parts = [];\n    var priv, pub;\n    if (this._algo === \"dsa\") {\n        this._dh.generateKeys();\n        parts.push({\n            name: \"p\",\n            data: this._p.data\n        });\n        parts.push({\n            name: \"q\",\n            data: this._key.part.q.data\n        });\n        parts.push({\n            name: \"g\",\n            data: this._g.data\n        });\n        parts.push({\n            name: \"y\",\n            data: this._dh.getPublicKey()\n        });\n        parts.push({\n            name: \"x\",\n            data: this._dh.getPrivateKey()\n        });\n        this._key = new PrivateKey({\n            type: \"dsa\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    } else if (this._algo === \"ecdsa\") {\n        if (CRYPTO_HAVE_ECDH) {\n            this._dh.generateKeys();\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: this._dh.getPublicKey()\n            });\n            parts.push({\n                name: \"d\",\n                data: this._dh.getPrivateKey()\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        } else {\n            var n = this._ecParams.getN();\n            var r = new jsbn(crypto.randomBytes(n.bitLength()));\n            var n1 = n.subtract(jsbn.ONE);\n            priv = r.mod(n1).add(jsbn.ONE);\n            pub = this._ecParams.getG().multiply(priv);\n            priv = Buffer.from(priv.toByteArray());\n            pub = Buffer.from(this._ecParams.getCurve().encodePointHex(pub), \"hex\");\n            this._priv = new ECPrivate(this._ecParams, priv);\n            parts.push({\n                name: \"curve\",\n                data: Buffer.from(this._curve)\n            });\n            parts.push({\n                name: \"Q\",\n                data: pub\n            });\n            parts.push({\n                name: \"d\",\n                data: priv\n            });\n            this._key = new PrivateKey({\n                type: \"ecdsa\",\n                curve: this._curve,\n                parts: parts\n            });\n            this._isPriv = true;\n            return this._key;\n        }\n    } else if (this._algo === \"curve25519\") {\n        var pair = nacl.box.keyPair();\n        priv = Buffer.from(pair.secretKey);\n        pub = Buffer.from(pair.publicKey);\n        priv = Buffer.concat([\n            priv,\n            pub\n        ]);\n        assert.strictEqual(priv.length, 64);\n        assert.strictEqual(pub.length, 32);\n        parts.push({\n            name: \"A\",\n            data: pub\n        });\n        parts.push({\n            name: \"k\",\n            data: priv\n        });\n        this._key = new PrivateKey({\n            type: \"curve25519\",\n            parts: parts\n        });\n        this._isPriv = true;\n        return this._key;\n    }\n    throw new Error(\"Invalid algorithm: \" + this._algo);\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */ function X9ECParameters(name) {\n    var params = algs.curves[name];\n    assert.object(params);\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var n = new jsbn(params.n);\n    var h = jsbn.ONE;\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    this.curve = curve;\n    this.g = G;\n    this.n = n;\n    this.h = h;\n}\nX9ECParameters.prototype.getCurve = function() {\n    return this.curve;\n};\nX9ECParameters.prototype.getG = function() {\n    return this.g;\n};\nX9ECParameters.prototype.getN = function() {\n    return this.n;\n};\nX9ECParameters.prototype.getH = function() {\n    return this.h;\n};\nfunction ECPublic(params, buffer) {\n    this._params = params;\n    if (buffer[0] === 0x00) buffer = buffer.slice(1);\n    this._pub = params.getCurve().decodePointHex(buffer.toString(\"hex\"));\n}\nfunction ECPrivate(params, buffer) {\n    this._params = params;\n    this._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function(pubKey) {\n    assert.ok(pubKey instanceof ECPublic);\n    var S = pubKey._pub.multiply(this._priv);\n    return Buffer.from(S.getX().toBigInteger().toByteArray());\n};\nfunction generateED25519() {\n    var pair = nacl.sign.keyPair();\n    var priv = Buffer.from(pair.secretKey);\n    var pub = Buffer.from(pair.publicKey);\n    assert.strictEqual(priv.length, 64);\n    assert.strictEqual(pub.length, 32);\n    var parts = [];\n    parts.push({\n        name: \"A\",\n        data: pub\n    });\n    parts.push({\n        name: \"k\",\n        data: priv.slice(0, 32)\n    });\n    var key = new PrivateKey({\n        type: \"ed25519\",\n        parts: parts\n    });\n    return key;\n}\n/* Generates a new ECDSA private key on a given curve. */ function generateECDSA(curve) {\n    var parts = [];\n    var key;\n    if (CRYPTO_HAVE_ECDH) {\n        /*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */ var osCurve = {\n            \"nistp256\": \"prime256v1\",\n            \"nistp384\": \"secp384r1\",\n            \"nistp521\": \"secp521r1\"\n        }[curve];\n        var dh = crypto.createECDH(osCurve);\n        dh.generateKeys();\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: dh.getPublicKey()\n        });\n        parts.push({\n            name: \"d\",\n            data: dh.getPrivateKey()\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    } else {\n        var ecParams = new X9ECParameters(curve);\n        /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */ var n = ecParams.getN();\n        /*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */ var cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n        var c = new jsbn(crypto.randomBytes(cByteLen));\n        var n1 = n.subtract(jsbn.ONE);\n        var priv = c.mod(n1).add(jsbn.ONE);\n        var pub = ecParams.getG().multiply(priv);\n        priv = Buffer.from(priv.toByteArray());\n        pub = Buffer.from(ecParams.getCurve().encodePointHex(pub), \"hex\");\n        parts.push({\n            name: \"curve\",\n            data: Buffer.from(curve)\n        });\n        parts.push({\n            name: \"Q\",\n            data: pub\n        });\n        parts.push({\n            name: \"d\",\n            data: priv\n        });\n        key = new PrivateKey({\n            type: \"ecdsa\",\n            curve: curve,\n            parts: parts\n        });\n        return key;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/dhe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ed-compat.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/ed-compat.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    Verifier: Verifier,\n    Signer: Signer\n};\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nfunction Verifier(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\nVerifier.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nVerifier.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nVerifier.prototype.verify = function(signature, fmt) {\n    var sig;\n    if (Signature.isSignature(signature, [\n        2,\n        0\n    ])) {\n        if (signature.type !== \"ed25519\") return false;\n        sig = signature.toBuffer(\"raw\");\n    } else if (typeof signature === \"string\") {\n        sig = Buffer.from(signature, \"base64\");\n    } else if (Signature.isSignature(signature, [\n        1,\n        0\n    ])) {\n        throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n    }\n    assert.buffer(sig);\n    return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.A.data));\n};\nfunction Signer(key, hashAlgo) {\n    if (hashAlgo.toLowerCase() !== \"sha512\") throw new Error(\"ED25519 only supports the use of \" + \"SHA-512 hashes\");\n    this.key = key;\n    this.chunks = [];\n    stream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\nSigner.prototype._write = function(chunk, enc, cb) {\n    this.chunks.push(chunk);\n    cb();\n};\nSigner.prototype.update = function(chunk) {\n    if (typeof chunk === \"string\") chunk = Buffer.from(chunk, \"binary\");\n    this.chunks.push(chunk);\n};\nSigner.prototype.sign = function() {\n    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(Buffer.concat([\n        this.key.part.k.data,\n        this.key.part.A.data\n    ])));\n    var sigBuf = Buffer.from(sig);\n    var sigObj = Signature.parse(sigBuf, \"ed25519\", \"raw\");\n    sigObj.hashAlgorithm = \"sha512\";\n    return sigObj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2VkLWNvbXBhdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLFVBQVVBO0lBQ1ZDLFFBQVFBO0FBQ1Q7QUFFQSxJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNuQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxTQUFTSiw4RkFBOEI7QUFDM0MsSUFBSUssWUFBWUwsbUJBQU9BLENBQUM7QUFFeEIsU0FBU0gsU0FBU1MsR0FBRyxFQUFFQyxRQUFRO0lBQzlCLElBQUlBLFNBQVNDLFdBQVcsT0FBTyxVQUM5QixNQUFPLElBQUlDLE1BQU0sc0NBQ2I7SUFFTCxJQUFJLENBQUNILEdBQUcsR0FBR0E7SUFDWCxJQUFJLENBQUNJLE1BQU0sR0FBRyxFQUFFO0lBRWhCVCxPQUFPVSxRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QjtBQUNBVixLQUFLVyxRQUFRLENBQUNoQixVQUFVSSxPQUFPVSxRQUFRO0FBRXZDZCxTQUFTaUIsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDbkQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXJCLFNBQVNpQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQzFDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbkIsU0FBU2lCLFNBQVMsQ0FBQ1EsTUFBTSxHQUFHLFNBQVVDLFNBQVMsRUFBRUMsR0FBRztJQUNuRCxJQUFJQztJQUNKLElBQUlwQixVQUFVcUIsV0FBVyxDQUFDSCxXQUFXO1FBQUM7UUFBRztLQUFFLEdBQUc7UUFDN0MsSUFBSUEsVUFBVUksSUFBSSxLQUFLLFdBQ3RCLE9BQVE7UUFDVEYsTUFBTUYsVUFBVUssUUFBUSxDQUFDO0lBRTFCLE9BQU8sSUFBSSxPQUFRTCxjQUFlLFVBQVU7UUFDM0NFLE1BQU1yQixPQUFPaUIsSUFBSSxDQUFDRSxXQUFXO0lBRTlCLE9BQU8sSUFBSWxCLFVBQVVxQixXQUFXLENBQUNILFdBQVc7UUFBQztRQUFHO0tBQUUsR0FBRztRQUNwRCxNQUFPLElBQUlkLE1BQU0sc0NBQ2I7SUFDTDtJQUVBTixPQUFPMEIsTUFBTSxDQUFDSjtJQUNkLE9BQVExQixLQUFLK0IsSUFBSSxDQUFDQyxRQUFRLENBQUNULE1BQU0sQ0FDN0IsSUFBSVUsV0FBVzVCLE9BQU82QixNQUFNLENBQUMsSUFBSSxDQUFDdkIsTUFBTSxJQUN4QyxJQUFJc0IsV0FBV1AsTUFDZixJQUFJTyxXQUFXLElBQUksQ0FBQzFCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0FBQ3hDO0FBRUEsU0FBU3RDLE9BQU9RLEdBQUcsRUFBRUMsUUFBUTtJQUM1QixJQUFJQSxTQUFTQyxXQUFXLE9BQU8sVUFDOUIsTUFBTyxJQUFJQyxNQUFNLHNDQUNiO0lBRUwsSUFBSSxDQUFDSCxHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDSSxNQUFNLEdBQUcsRUFBRTtJQUVoQlQsT0FBT1UsUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0I7QUFDQVYsS0FBS1csUUFBUSxDQUFDZixRQUFRRyxPQUFPVSxRQUFRO0FBRXJDYixPQUFPZ0IsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDakQsSUFBSSxDQUFDUixNQUFNLENBQUNTLElBQUksQ0FBQ0g7SUFDakJFO0FBQ0Q7QUFFQXBCLE9BQU9nQixTQUFTLENBQUNNLE1BQU0sR0FBRyxTQUFVSixLQUFLO0lBQ3hDLElBQUksT0FBUUEsVUFBVyxVQUN0QkEsUUFBUVosT0FBT2lCLElBQUksQ0FBQ0wsT0FBTztJQUM1QixJQUFJLENBQUNOLE1BQU0sQ0FBQ1MsSUFBSSxDQUFDSDtBQUNsQjtBQUVBbEIsT0FBT2dCLFNBQVMsQ0FBQ2dCLElBQUksR0FBRztJQUN2QixJQUFJTCxNQUFNMUIsS0FBSytCLElBQUksQ0FBQ0MsUUFBUSxDQUN4QixJQUFJQyxXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixNQUFNLElBQ3hDLElBQUlzQixXQUFXNUIsT0FBTzZCLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMzQixHQUFHLENBQUM0QixJQUFJLENBQUNHLENBQUMsQ0FBQ0QsSUFBSTtRQUFFLElBQUksQ0FBQzlCLEdBQUcsQ0FBQzRCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFJO0tBQUM7SUFDNUMsSUFBSUUsU0FBU2xDLE9BQU9pQixJQUFJLENBQUNJO0lBQ3pCLElBQUljLFNBQVNsQyxVQUFVbUMsS0FBSyxDQUFDRixRQUFRLFdBQVc7SUFDaERDLE9BQU9FLGFBQWEsR0FBRztJQUN2QixPQUFRRjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWF0b29scy1uZXh0Ly4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9lZC1jb21wYXQuanM/ZjA4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFZlcmlmaWVyOiBWZXJpZmllcixcblx0U2lnbmVyOiBTaWduZXJcbn07XG5cbnZhciBuYWNsID0gcmVxdWlyZSgndHdlZXRuYWNsJyk7XG52YXIgc3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBWZXJpZmllcihrZXksIGhhc2hBbGdvKSB7XG5cdGlmIChoYXNoQWxnby50b0xvd2VyQ2FzZSgpICE9PSAnc2hhNTEyJylcblx0XHR0aHJvdyAobmV3IEVycm9yKCdFRDI1NTE5IG9ubHkgc3VwcG9ydHMgdGhlIHVzZSBvZiAnICtcblx0XHQgICAgJ1NIQS01MTIgaGFzaGVzJykpO1xuXG5cdHRoaXMua2V5ID0ga2V5O1xuXHR0aGlzLmNodW5rcyA9IFtdO1xuXG5cdHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMsIHt9KTtcbn1cbnV0aWwuaW5oZXJpdHMoVmVyaWZpZXIsIHN0cmVhbS5Xcml0YWJsZSk7XG5cblZlcmlmaWVyLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuYywgY2IpIHtcblx0dGhpcy5jaHVua3MucHVzaChjaHVuayk7XG5cdGNiKCk7XG59O1xuXG5WZXJpZmllci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG5cdGlmICh0eXBlb2YgKGNodW5rKSA9PT0gJ3N0cmluZycpXG5cdFx0Y2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgJ2JpbmFyeScpO1xuXHR0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblZlcmlmaWVyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiAoc2lnbmF0dXJlLCBmbXQpIHtcblx0dmFyIHNpZztcblx0aWYgKFNpZ25hdHVyZS5pc1NpZ25hdHVyZShzaWduYXR1cmUsIFsyLCAwXSkpIHtcblx0XHRpZiAoc2lnbmF0dXJlLnR5cGUgIT09ICdlZDI1NTE5Jylcblx0XHRcdHJldHVybiAoZmFsc2UpO1xuXHRcdHNpZyA9IHNpZ25hdHVyZS50b0J1ZmZlcigncmF3Jyk7XG5cblx0fSBlbHNlIGlmICh0eXBlb2YgKHNpZ25hdHVyZSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0c2lnID0gQnVmZmVyLmZyb20oc2lnbmF0dXJlLCAnYmFzZTY0Jyk7XG5cblx0fSBlbHNlIGlmIChTaWduYXR1cmUuaXNTaWduYXR1cmUoc2lnbmF0dXJlLCBbMSwgMF0pKSB7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignc2lnbmF0dXJlIHdhcyBjcmVhdGVkIGJ5IHRvbyBvbGQgJyArXG5cdFx0ICAgICdhIHZlcnNpb24gb2Ygc3NocGsgYW5kIGNhbm5vdCBiZSB2ZXJpZmllZCcpKTtcblx0fVxuXG5cdGFzc2VydC5idWZmZXIoc2lnKTtcblx0cmV0dXJuIChuYWNsLnNpZ24uZGV0YWNoZWQudmVyaWZ5KFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdCh0aGlzLmNodW5rcykpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoc2lnKSxcblx0ICAgIG5ldyBVaW50OEFycmF5KHRoaXMua2V5LnBhcnQuQS5kYXRhKSkpO1xufTtcblxuZnVuY3Rpb24gU2lnbmVyKGtleSwgaGFzaEFsZ28pIHtcblx0aWYgKGhhc2hBbGdvLnRvTG93ZXJDYXNlKCkgIT09ICdzaGE1MTInKVxuXHRcdHRocm93IChuZXcgRXJyb3IoJ0VEMjU1MTkgb25seSBzdXBwb3J0cyB0aGUgdXNlIG9mICcgK1xuXHRcdCAgICAnU0hBLTUxMiBoYXNoZXMnKSk7XG5cblx0dGhpcy5rZXkgPSBrZXk7XG5cdHRoaXMuY2h1bmtzID0gW107XG5cblx0c3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcywge30pO1xufVxudXRpbC5pbmhlcml0cyhTaWduZXIsIHN0cmVhbS5Xcml0YWJsZSk7XG5cblNpZ25lci5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmMsIGNiKSB7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xuXHRjYigpO1xufTtcblxuU2lnbmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcblx0aWYgKHR5cGVvZiAoY2h1bmspID09PSAnc3RyaW5nJylcblx0XHRjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCAnYmluYXJ5Jyk7XG5cdHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuU2lnbmVyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2lnID0gbmFjbC5zaWduLmRldGFjaGVkKFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdCh0aGlzLmNodW5rcykpLFxuXHQgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdChbXG5cdFx0dGhpcy5rZXkucGFydC5rLmRhdGEsIHRoaXMua2V5LnBhcnQuQS5kYXRhXSkpKTtcblx0dmFyIHNpZ0J1ZiA9IEJ1ZmZlci5mcm9tKHNpZyk7XG5cdHZhciBzaWdPYmogPSBTaWduYXR1cmUucGFyc2Uoc2lnQnVmLCAnZWQyNTUxOScsICdyYXcnKTtcblx0c2lnT2JqLmhhc2hBbGdvcml0aG0gPSAnc2hhNTEyJztcblx0cmV0dXJuIChzaWdPYmopO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiVmVyaWZpZXIiLCJTaWduZXIiLCJuYWNsIiwicmVxdWlyZSIsInN0cmVhbSIsInV0aWwiLCJhc3NlcnQiLCJCdWZmZXIiLCJTaWduYXR1cmUiLCJrZXkiLCJoYXNoQWxnbyIsInRvTG93ZXJDYXNlIiwiRXJyb3IiLCJjaHVua3MiLCJXcml0YWJsZSIsImNhbGwiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsIl93cml0ZSIsImNodW5rIiwiZW5jIiwiY2IiLCJwdXNoIiwidXBkYXRlIiwiZnJvbSIsInZlcmlmeSIsInNpZ25hdHVyZSIsImZtdCIsInNpZyIsImlzU2lnbmF0dXJlIiwidHlwZSIsInRvQnVmZmVyIiwiYnVmZmVyIiwic2lnbiIsImRldGFjaGVkIiwiVWludDhBcnJheSIsImNvbmNhdCIsInBhcnQiLCJBIiwiZGF0YSIsImsiLCJzaWdCdWYiLCJzaWdPYmoiLCJwYXJzZSIsImhhc2hBbGdvcml0aG0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ed-compat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/errors.js":
/*!******************************************!*\
  !*** ./node_modules/sshpk/lib/errors.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction FingerprintFormatError(fp, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);\n    this.name = \"FingerprintFormatError\";\n    this.fingerprint = fp;\n    this.format = format;\n    this.message = \"Fingerprint format is not supported, or is invalid: \";\n    if (fp !== undefined) this.message += \" fingerprint = \" + fp;\n    if (format !== undefined) this.message += \" format = \" + format;\n}\nutil.inherits(FingerprintFormatError, Error);\nfunction InvalidAlgorithmError(alg) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);\n    this.name = \"InvalidAlgorithmError\";\n    this.algorithm = alg;\n    this.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\nfunction KeyParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);\n    this.name = \"KeyParseError\";\n    this.format = format;\n    this.keyName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format key: \" + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\nfunction SignatureParseError(type, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);\n    this.name = \"SignatureParseError\";\n    this.type = type;\n    this.format = format;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse the given data as a \" + type + \" signature in \" + format + \" format: \" + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\nfunction CertificateParseError(name, format, innerErr) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);\n    this.name = \"CertificateParseError\";\n    this.format = format;\n    this.certName = name;\n    this.innerErr = innerErr;\n    this.message = \"Failed to parse \" + name + \" as a valid \" + format + \" format certificate: \" + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\nfunction KeyEncryptedError(name, format) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);\n    this.name = \"KeyEncryptedError\";\n    this.format = format;\n    this.keyName = name;\n    this.message = \"The \" + format + \" format key \" + name + \" is \" + \"encrypted (password-protected), and no passphrase was \" + \"provided in `options`\";\n}\nutil.inherits(KeyEncryptedError, Error);\nmodule.exports = {\n    FingerprintFormatError: FingerprintFormatError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    KeyParseError: KeyParseError,\n    SignatureParseError: SignatureParseError,\n    KeyEncryptedError: KeyEncryptedError,\n    CertificateParseError: CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7O0FBRTlCLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNFLHVCQUF1QkMsRUFBRSxFQUFFQyxNQUFNO0lBQ3pDLElBQUlDLE1BQU1DLGlCQUFpQixFQUMxQkQsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFSjtJQUMvQixJQUFJLENBQUNLLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0MsV0FBVyxHQUFHTDtJQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNLLE9BQU8sR0FBRztJQUNmLElBQUlOLE9BQU9PLFdBQ1YsSUFBSSxDQUFDRCxPQUFPLElBQUksb0JBQW9CTjtJQUNyQyxJQUFJQyxXQUFXTSxXQUNkLElBQUksQ0FBQ0QsT0FBTyxJQUFJLGVBQWVMO0FBQ2pDO0FBQ0FILEtBQUtVLFFBQVEsQ0FBQ1Qsd0JBQXdCRztBQUV0QyxTQUFTTyxzQkFBc0JDLEdBQUc7SUFDakMsSUFBSVIsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVNO0lBQy9CLElBQUksQ0FBQ0wsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDTyxTQUFTLEdBQUdEO0lBQ2pCLElBQUksQ0FBQ0osT0FBTyxHQUFHLGdCQUFnQkksTUFBTTtBQUN0QztBQUNBWixLQUFLVSxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1UsY0FBY1IsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDNUMsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVTO0lBQy9CLElBQUksQ0FBQ1IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDYSxPQUFPLEdBQUdWO0lBQ2YsSUFBSSxDQUFDUyxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHFCQUFxQkYsT0FBTyxpQkFBaUJILFNBQ3hELGtCQUFrQlksU0FBU1AsT0FBTztBQUN2QztBQUNBUixLQUFLVSxRQUFRLENBQUNJLGVBQWVWO0FBRTdCLFNBQVNhLG9CQUFvQkMsSUFBSSxFQUFFZixNQUFNLEVBQUVZLFFBQVE7SUFDbEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVZO0lBQy9CLElBQUksQ0FBQ1gsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDWSxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDZixNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDWSxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLHlDQUF5Q1UsT0FDcEQsbUJBQW1CZixTQUFTLGNBQWNZLFNBQVNQLE9BQU87QUFDL0Q7QUFDQVIsS0FBS1UsUUFBUSxDQUFDTyxxQkFBcUJiO0FBRW5DLFNBQVNlLHNCQUFzQmIsSUFBSSxFQUFFSCxNQUFNLEVBQUVZLFFBQVE7SUFDcEQsSUFBSVgsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVjO0lBQy9CLElBQUksQ0FBQ2IsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDSCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDaUIsUUFBUSxHQUFHZDtJQUNoQixJQUFJLENBQUNTLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDUCxPQUFPLEdBQUcscUJBQXFCRixPQUFPLGlCQUFpQkgsU0FDeEQsMEJBQTBCWSxTQUFTUCxPQUFPO0FBQy9DO0FBQ0FSLEtBQUtVLFFBQVEsQ0FBQ1MsdUJBQXVCZjtBQUVyQyxTQUFTaUIsa0JBQWtCZixJQUFJLEVBQUVILE1BQU07SUFDdEMsSUFBSUMsTUFBTUMsaUJBQWlCLEVBQzFCRCxNQUFNQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUVnQjtJQUMvQixJQUFJLENBQUNmLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0gsTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ2EsT0FBTyxHQUFHVjtJQUNmLElBQUksQ0FBQ0UsT0FBTyxHQUFHLFNBQVNMLFNBQVMsaUJBQWlCRyxPQUFPLFNBQ3JELDJEQUNBO0FBQ0w7QUFDQU4sS0FBS1UsUUFBUSxDQUFDVyxtQkFBbUJqQjtBQUVqQ2tCLE9BQU9DLE9BQU8sR0FBRztJQUNoQnRCLHdCQUF3QkE7SUFDeEJVLHVCQUF1QkE7SUFDdkJHLGVBQWVBO0lBQ2ZHLHFCQUFxQkE7SUFDckJJLG1CQUFtQkE7SUFDbkJGLHVCQUF1QkE7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYXRvb2xzLW5leHQvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Vycm9ycy5qcz8yYmJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBGaW5nZXJwcmludEZvcm1hdEVycm9yKGZwLCBmb3JtYXQpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEZpbmdlcnByaW50Rm9ybWF0RXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnRmluZ2VycHJpbnRGb3JtYXRFcnJvcic7XG5cdHRoaXMuZmluZ2VycHJpbnQgPSBmcDtcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMubWVzc2FnZSA9ICdGaW5nZXJwcmludCBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZCwgb3IgaXMgaW52YWxpZDogJztcblx0aWYgKGZwICE9PSB1bmRlZmluZWQpXG5cdFx0dGhpcy5tZXNzYWdlICs9ICcgZmluZ2VycHJpbnQgPSAnICsgZnA7XG5cdGlmIChmb3JtYXQgIT09IHVuZGVmaW5lZClcblx0XHR0aGlzLm1lc3NhZ2UgKz0gJyBmb3JtYXQgPSAnICsgZm9ybWF0O1xufVxudXRpbC5pbmhlcml0cyhGaW5nZXJwcmludEZvcm1hdEVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEludmFsaWRBbGdvcml0aG1FcnJvcihhbGcpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEludmFsaWRBbGdvcml0aG1FcnJvcik7XG5cdHRoaXMubmFtZSA9ICdJbnZhbGlkQWxnb3JpdGhtRXJyb3InO1xuXHR0aGlzLmFsZ29yaXRobSA9IGFsZztcblx0dGhpcy5tZXNzYWdlID0gJ0FsZ29yaXRobSBcIicgKyBhbGcgKyAnXCIgaXMgbm90IHN1cHBvcnRlZCc7XG59XG51dGlsLmluaGVyaXRzKEludmFsaWRBbGdvcml0aG1FcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBLZXlQYXJzZUVycm9yKG5hbWUsIGZvcm1hdCwgaW5uZXJFcnIpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEtleVBhcnNlRXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnS2V5UGFyc2VFcnJvcic7XG5cdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHR0aGlzLmtleU5hbWUgPSBuYW1lO1xuXHR0aGlzLmlubmVyRXJyID0gaW5uZXJFcnI7XG5cdHRoaXMubWVzc2FnZSA9ICdGYWlsZWQgdG8gcGFyc2UgJyArIG5hbWUgKyAnIGFzIGEgdmFsaWQgJyArIGZvcm1hdCArXG5cdCAgICAnIGZvcm1hdCBrZXk6ICcgKyBpbm5lckVyci5tZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhLZXlQYXJzZUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIFNpZ25hdHVyZVBhcnNlRXJyb3IodHlwZSwgZm9ybWF0LCBpbm5lckVycikge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgU2lnbmF0dXJlUGFyc2VFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdTaWduYXR1cmVQYXJzZUVycm9yJztcblx0dGhpcy50eXBlID0gdHlwZTtcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdHRoaXMuaW5uZXJFcnIgPSBpbm5lckVycjtcblx0dGhpcy5tZXNzYWdlID0gJ0ZhaWxlZCB0byBwYXJzZSB0aGUgZ2l2ZW4gZGF0YSBhcyBhICcgKyB0eXBlICtcblx0ICAgICcgc2lnbmF0dXJlIGluICcgKyBmb3JtYXQgKyAnIGZvcm1hdDogJyArIGlubmVyRXJyLm1lc3NhZ2U7XG59XG51dGlsLmluaGVyaXRzKFNpZ25hdHVyZVBhcnNlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gQ2VydGlmaWNhdGVQYXJzZUVycm9yKG5hbWUsIGZvcm1hdCwgaW5uZXJFcnIpIHtcblx0aWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENlcnRpZmljYXRlUGFyc2VFcnJvcik7XG5cdHRoaXMubmFtZSA9ICdDZXJ0aWZpY2F0ZVBhcnNlRXJyb3InO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5jZXJ0TmFtZSA9IG5hbWU7XG5cdHRoaXMuaW5uZXJFcnIgPSBpbm5lckVycjtcblx0dGhpcy5tZXNzYWdlID0gJ0ZhaWxlZCB0byBwYXJzZSAnICsgbmFtZSArICcgYXMgYSB2YWxpZCAnICsgZm9ybWF0ICtcblx0ICAgICcgZm9ybWF0IGNlcnRpZmljYXRlOiAnICsgaW5uZXJFcnIubWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoQ2VydGlmaWNhdGVQYXJzZUVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIEtleUVuY3J5cHRlZEVycm9yKG5hbWUsIGZvcm1hdCkge1xuXHRpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgS2V5RW5jcnlwdGVkRXJyb3IpO1xuXHR0aGlzLm5hbWUgPSAnS2V5RW5jcnlwdGVkRXJyb3InO1xuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblx0dGhpcy5rZXlOYW1lID0gbmFtZTtcblx0dGhpcy5tZXNzYWdlID0gJ1RoZSAnICsgZm9ybWF0ICsgJyBmb3JtYXQga2V5ICcgKyBuYW1lICsgJyBpcyAnICtcblx0ICAgICdlbmNyeXB0ZWQgKHBhc3N3b3JkLXByb3RlY3RlZCksIGFuZCBubyBwYXNzcGhyYXNlIHdhcyAnICtcblx0ICAgICdwcm92aWRlZCBpbiBgb3B0aW9uc2AnO1xufVxudXRpbC5pbmhlcml0cyhLZXlFbmNyeXB0ZWRFcnJvciwgRXJyb3IpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0RmluZ2VycHJpbnRGb3JtYXRFcnJvcjogRmluZ2VycHJpbnRGb3JtYXRFcnJvcixcblx0SW52YWxpZEFsZ29yaXRobUVycm9yOiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IsXG5cdEtleVBhcnNlRXJyb3I6IEtleVBhcnNlRXJyb3IsXG5cdFNpZ25hdHVyZVBhcnNlRXJyb3I6IFNpZ25hdHVyZVBhcnNlRXJyb3IsXG5cdEtleUVuY3J5cHRlZEVycm9yOiBLZXlFbmNyeXB0ZWRFcnJvcixcblx0Q2VydGlmaWNhdGVQYXJzZUVycm9yOiBDZXJ0aWZpY2F0ZVBhcnNlRXJyb3Jcbn07XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsInV0aWwiLCJGaW5nZXJwcmludEZvcm1hdEVycm9yIiwiZnAiLCJmb3JtYXQiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwibmFtZSIsImZpbmdlcnByaW50IiwibWVzc2FnZSIsInVuZGVmaW5lZCIsImluaGVyaXRzIiwiSW52YWxpZEFsZ29yaXRobUVycm9yIiwiYWxnIiwiYWxnb3JpdGhtIiwiS2V5UGFyc2VFcnJvciIsImlubmVyRXJyIiwia2V5TmFtZSIsIlNpZ25hdHVyZVBhcnNlRXJyb3IiLCJ0eXBlIiwiQ2VydGlmaWNhdGVQYXJzZUVycm9yIiwiY2VydE5hbWUiLCJLZXlFbmNyeXB0ZWRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/fingerprint.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/fingerprint.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Fingerprint;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nfunction Fingerprint(opts) {\n    assert.object(opts, \"options\");\n    assert.string(opts.type, \"options.type\");\n    assert.buffer(opts.hash, \"options.hash\");\n    assert.string(opts.algorithm, \"options.algorithm\");\n    this.algorithm = opts.algorithm.toLowerCase();\n    if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);\n    this.hash = opts.hash;\n    this.type = opts.type;\n    this.hashType = opts.hashType;\n}\nFingerprint.prototype.toString = function(format) {\n    if (format === undefined) {\n        if (this.algorithm === \"md5\" || this.hashType === \"spki\") format = \"hex\";\n        else format = \"base64\";\n    }\n    assert.string(format);\n    switch(format){\n        case \"hex\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"hex\");\n            return addColons(this.hash.toString(\"hex\"));\n        case \"base64\":\n            if (this.hashType === \"spki\") return this.hash.toString(\"base64\");\n            return sshBase64Format(this.algorithm, this.hash.toString(\"base64\"));\n        default:\n            throw new FingerprintFormatError(undefined, format);\n    }\n};\nFingerprint.prototype.matches = function(other) {\n    assert.object(other, \"key or certificate\");\n    if (this.type === \"key\" && this.hashType !== \"ssh\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            7\n        ], \"key with spki\");\n        if (PrivateKey.isPrivateKey(other)) {\n            utils.assertCompatible(other, PrivateKey, [\n                1,\n                6\n            ], \"privatekey with spki support\");\n        }\n    } else if (this.type === \"key\") {\n        utils.assertCompatible(other, Key, [\n            1,\n            0\n        ], \"key\");\n    } else {\n        utils.assertCompatible(other, Certificate, [\n            1,\n            0\n        ], \"certificate\");\n    }\n    var theirHash = other.hash(this.algorithm, this.hashType);\n    var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest(\"base64\");\n    if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest(\"base64\");\n    return this.hash2 === theirHash2;\n};\n/*JSSTYLED*/ var base64RE = /^[A-Za-z0-9+\\/=]+$/;\n/*JSSTYLED*/ var hexRE = /^[a-fA-F0-9]+$/;\nFingerprint.parse = function(fp, options) {\n    assert.string(fp, \"fingerprint\");\n    var alg, hash, enAlgs;\n    if (Array.isArray(options)) {\n        enAlgs = options;\n        options = {};\n    }\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    if (options.enAlgs !== undefined) enAlgs = options.enAlgs;\n    if (options.algorithms !== undefined) enAlgs = options.algorithms;\n    assert.optionalArrayOfString(enAlgs, \"algorithms\");\n    var hashType = \"ssh\";\n    if (options.hashType !== undefined) hashType = options.hashType;\n    assert.string(hashType, \"options.hashType\");\n    var parts = fp.split(\":\");\n    if (parts.length == 2) {\n        alg = parts[0].toLowerCase();\n        if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts[1], \"base64\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else if (parts.length > 2) {\n        alg = \"md5\";\n        if (parts[0].toLowerCase() === \"md5\") parts = parts.slice(1);\n        parts = parts.map(function(p) {\n            while(p.length < 2)p = \"0\" + p;\n            if (p.length > 2) throw new FingerprintFormatError(fp);\n            return p;\n        });\n        parts = parts.join(\"\");\n        if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError(fp);\n        try {\n            hash = Buffer.from(parts, \"hex\");\n        } catch (e) {\n            throw new FingerprintFormatError(fp);\n        }\n    } else {\n        if (hexRE.test(fp)) {\n            hash = Buffer.from(fp, \"hex\");\n        } else if (base64RE.test(fp)) {\n            hash = Buffer.from(fp, \"base64\");\n        } else {\n            throw new FingerprintFormatError(fp);\n        }\n        switch(hash.length){\n            case 32:\n                alg = \"sha256\";\n                break;\n            case 16:\n                alg = \"md5\";\n                break;\n            case 20:\n                alg = \"sha1\";\n                break;\n            case 64:\n                alg = \"sha512\";\n                break;\n            default:\n                throw new FingerprintFormatError(fp);\n        }\n        /* Plain hex/base64: guess it's probably SPKI unless told. */ if (options.hashType === undefined) hashType = \"spki\";\n    }\n    if (alg === undefined) throw new FingerprintFormatError(fp);\n    if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);\n    if (enAlgs !== undefined) {\n        enAlgs = enAlgs.map(function(a) {\n            return a.toLowerCase();\n        });\n        if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);\n    }\n    return new Fingerprint({\n        algorithm: alg,\n        hash: hash,\n        type: options.type || \"key\",\n        hashType: hashType\n    });\n};\nfunction addColons(s) {\n    /*JSSTYLED*/ return s.replace(/(.{2})(?=.)/g, \"$1:\");\n}\nfunction base64Strip(s) {\n    /*JSSTYLED*/ return s.replace(/=*$/, \"\");\n}\nfunction sshBase64Format(alg, h) {\n    return alg.toUpperCase() + \":\" + base64Strip(h);\n}\nFingerprint.isFingerprint = function(obj, ver) {\n    return utils.isCompatible(obj, Fingerprint, ver);\n};\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n * [1,2] -- hashType and spki support\n */ Fingerprint.prototype._sshpkApiVersion = [\n    1,\n    2\n];\nFingerprint._oldVersionDetect = function(obj) {\n    assert.func(obj.toString);\n    assert.func(obj.matches);\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/fingerprint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/auto.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/auto.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar ssh = __webpack_require__(/*! ./ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar dnssec = __webpack_require__(/*! ./dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nvar putty = __webpack_require__(/*! ./putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = \"Private-key-format: v1\";\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n        if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n        if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n        if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n        buf = Buffer.from(buf, \"binary\");\n    } else {\n        assert.buffer(buf);\n        if (findPEMHeader(buf)) return pem.read(buf, options);\n        if (findSSHHeader(buf)) return ssh.read(buf, options);\n        if (findPuTTYHeader(buf)) return putty.read(buf, options);\n        if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    }\n    if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n    throw new Error(\"Failed to auto-detect format of key\");\n}\nfunction findPuTTYHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString(\"ascii\").toLowerCase() === \"putty-user-key-file-2:\") return true;\n    return false;\n}\nfunction findSSHHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))++offset;\n    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString(\"ascii\") === \"ssh-\") return true;\n    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString(\"ascii\") === \"ecdsa-\") return true;\n    return false;\n}\nfunction findPEMHeader(buf) {\n    var offset = 0;\n    while(offset < buf.length && (buf[offset] === 32 || buf[offset] === 10))++offset;\n    if (buf[offset] !== 45) return false;\n    while(offset < buf.length && buf[offset] === 45)++offset;\n    while(offset < buf.length && buf[offset] === 32)++offset;\n    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString(\"ascii\") !== \"BEGIN\") return false;\n    return true;\n}\nfunction findDNSSECHeader(buf) {\n    // private case first\n    if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n    var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n    if (headerCheck.toString(\"ascii\") === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;\n    // public-key RFC3110 ?\n    // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n    // skip any comment-lines\n    if (typeof buf !== \"string\") {\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    if (lines[line].toString(\"ascii\").match(/\\. IN KEY /)) return true;\n    if (lines[line].toString(\"ascii\").match(/\\. IN DNSKEY /)) return true;\n    return false;\n}\nfunction write(key, options) {\n    throw new Error('\"auto\" format cannot be used for writing');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/auto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/dnssec.js":
/*!**************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/dnssec.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar Dhe = __webpack_require__(/*! ../dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar supportedAlgos = {\n    \"rsa-sha1\": 5,\n    \"rsa-sha256\": 8,\n    \"rsa-sha512\": 10,\n    \"ecdsa-p256-sha256\": 13,\n    \"ecdsa-p384-sha384\": 14\n};\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function(k) {\n    supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.split(\"\\n\");\n    if (lines[0].match(/^Private-key-format\\: v1/)) {\n        var algElems = lines[1].split(\" \");\n        var algoNum = parseInt(algElems[1], 10);\n        var algoName = algElems[2];\n        if (!supportedAlgosById[algoNum]) throw new Error(\"Unsupported algorithm: \" + algoName);\n        return readDNSSECPrivateKey(algoNum, lines.slice(2));\n    }\n    // skip any comment-lines\n    var line = 0;\n    /* JSSTYLED */ while(lines[line].match(/^\\;/))line++;\n    // we should now have *one single* line left with our KEY on it.\n    if ((lines[line].match(/\\. IN KEY /) || lines[line].match(/\\. IN DNSKEY /)) && lines[line + 1].length === 0) {\n        return readRFC3110(lines[line]);\n    }\n    throw new Error(\"Cannot parse dnssec key\");\n}\nfunction readRFC3110(keyString) {\n    var elems = keyString.split(\" \");\n    //unused var flags = parseInt(elems[3], 10);\n    //unused var protocol = parseInt(elems[4], 10);\n    var algorithm = parseInt(elems[5], 10);\n    if (!supportedAlgosById[algorithm]) throw new Error(\"Unsupported algorithm: \" + algorithm);\n    var base64key = elems.slice(6, elems.length).join();\n    var keyBuffer = Buffer.from(base64key, \"base64\");\n    if (supportedAlgosById[algorithm].match(/^RSA-/)) {\n        // join the rest of the body into a single base64-blob\n        var publicExponentLen = keyBuffer.readUInt8(0);\n        if (publicExponentLen != 3 && publicExponentLen != 1) throw new Error(\"Cannot parse dnssec key: \" + \"unsupported exponent length\");\n        var publicExponent = keyBuffer.slice(1, publicExponentLen + 1);\n        publicExponent = utils.mpNormalize(publicExponent);\n        var modulus = keyBuffer.slice(1 + publicExponentLen);\n        modulus = utils.mpNormalize(modulus);\n        // now, make the key\n        var rsaKey = {\n            type: \"rsa\",\n            parts: []\n        };\n        rsaKey.parts.push({\n            name: \"e\",\n            data: publicExponent\n        });\n        rsaKey.parts.push({\n            name: \"n\",\n            data: modulus\n        });\n        return new Key(rsaKey);\n    }\n    if (supportedAlgosById[algorithm] === \"ECDSA-P384-SHA384\" || supportedAlgosById[algorithm] === \"ECDSA-P256-SHA256\") {\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"Q\",\n                    data: utils.ecNormalize(keyBuffer)\n                }\n            ]\n        };\n        return new Key(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[algorithm]);\n}\nfunction elementToBuf(e) {\n    return Buffer.from(e.split(\" \")[1], \"base64\");\n}\nfunction readDNSSECRSAPrivateKey(elements) {\n    var rsaParams = {};\n    elements.forEach(function(element) {\n        if (element.split(\" \")[0] === \"Modulus:\") rsaParams[\"n\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PublicExponent:\") rsaParams[\"e\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"PrivateExponent:\") rsaParams[\"d\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime1:\") rsaParams[\"p\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Prime2:\") rsaParams[\"q\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent1:\") rsaParams[\"dmodp\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Exponent2:\") rsaParams[\"dmodq\"] = elementToBuf(element);\n        else if (element.split(\" \")[0] === \"Coefficient:\") rsaParams[\"iqmp\"] = elementToBuf(element);\n    });\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: utils.mpNormalize(rsaParams[\"e\"])\n            },\n            {\n                name: \"n\",\n                data: utils.mpNormalize(rsaParams[\"n\"])\n            },\n            {\n                name: \"d\",\n                data: utils.mpNormalize(rsaParams[\"d\"])\n            },\n            {\n                name: \"p\",\n                data: utils.mpNormalize(rsaParams[\"p\"])\n            },\n            {\n                name: \"q\",\n                data: utils.mpNormalize(rsaParams[\"q\"])\n            },\n            {\n                name: \"dmodp\",\n                data: utils.mpNormalize(rsaParams[\"dmodp\"])\n            },\n            {\n                name: \"dmodq\",\n                data: utils.mpNormalize(rsaParams[\"dmodq\"])\n            },\n            {\n                name: \"iqmp\",\n                data: utils.mpNormalize(rsaParams[\"iqmp\"])\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readDNSSECPrivateKey(alg, elements) {\n    if (supportedAlgosById[alg].match(/^RSA-/)) {\n        return readDNSSECRSAPrivateKey(elements);\n    }\n    if (supportedAlgosById[alg] === \"ECDSA-P384-SHA384\" || supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n        var d = Buffer.from(elements[0].split(\" \")[1], \"base64\");\n        var curve = \"nistp384\";\n        var size = 384;\n        if (supportedAlgosById[alg] === \"ECDSA-P256-SHA256\") {\n            curve = \"nistp256\";\n            size = 256;\n        }\n        // DNSSEC generates the public-key on the fly (go calculate it)\n        var publicKey = utils.publicFromPrivateECDSA(curve, d);\n        var Q = publicKey.part[\"Q\"].data;\n        var ecdsaKey = {\n            type: \"ecdsa\",\n            curve: curve,\n            size: size,\n            parts: [\n                {\n                    name: \"curve\",\n                    data: Buffer.from(curve)\n                },\n                {\n                    name: \"d\",\n                    data: d\n                },\n                {\n                    name: \"Q\",\n                    data: Q\n                }\n            ]\n        };\n        return new PrivateKey(ecdsaKey);\n    }\n    throw new Error(\"Unsupported algorithm: \" + supportedAlgosById[alg]);\n}\nfunction dnssecTimestamp(date) {\n    var year = date.getFullYear() + \"\"; //stringify\n    var month = date.getMonth() + 1;\n    var timestampStr = year + month + date.getUTCDate();\n    timestampStr += \"\" + date.getUTCHours() + date.getUTCMinutes();\n    timestampStr += date.getUTCSeconds();\n    return timestampStr;\n}\nfunction rsaAlgFromOptions(opts) {\n    if (!opts || !opts.hashAlgo || opts.hashAlgo === \"sha1\") return \"5 (RSASHA1)\";\n    else if (opts.hashAlgo === \"sha256\") return \"8 (RSASHA256)\";\n    else if (opts.hashAlgo === \"sha512\") return \"10 (RSASHA512)\";\n    else throw new Error(\"Unknown or unsupported hash: \" + opts.hashAlgo);\n}\nfunction writeRSA(key, options) {\n    // if we're missing parts, add them.\n    if (!key.part.dmodp || !key.part.dmodq) {\n        utils.addRSAMissing(key);\n    }\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    out += \"Algorithm: \" + rsaAlgFromOptions(options) + \"\\n\";\n    var n = utils.mpDenormalize(key.part[\"n\"].data);\n    out += \"Modulus: \" + n.toString(\"base64\") + \"\\n\";\n    var e = utils.mpDenormalize(key.part[\"e\"].data);\n    out += \"PublicExponent: \" + e.toString(\"base64\") + \"\\n\";\n    var d = utils.mpDenormalize(key.part[\"d\"].data);\n    out += \"PrivateExponent: \" + d.toString(\"base64\") + \"\\n\";\n    var p = utils.mpDenormalize(key.part[\"p\"].data);\n    out += \"Prime1: \" + p.toString(\"base64\") + \"\\n\";\n    var q = utils.mpDenormalize(key.part[\"q\"].data);\n    out += \"Prime2: \" + q.toString(\"base64\") + \"\\n\";\n    var dmodp = utils.mpDenormalize(key.part[\"dmodp\"].data);\n    out += \"Exponent1: \" + dmodp.toString(\"base64\") + \"\\n\";\n    var dmodq = utils.mpDenormalize(key.part[\"dmodq\"].data);\n    out += \"Exponent2: \" + dmodq.toString(\"base64\") + \"\\n\";\n    var iqmp = utils.mpDenormalize(key.part[\"iqmp\"].data);\n    out += \"Coefficient: \" + iqmp.toString(\"base64\") + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction writeECDSA(key, options) {\n    var out = \"\";\n    out += \"Private-key-format: v1.3\\n\";\n    if (key.curve === \"nistp256\") {\n        out += \"Algorithm: 13 (ECDSAP256SHA256)\\n\";\n    } else if (key.curve === \"nistp384\") {\n        out += \"Algorithm: 14 (ECDSAP384SHA384)\\n\";\n    } else {\n        throw new Error(\"Unsupported curve\");\n    }\n    var base64Key = key.part[\"d\"].data.toString(\"base64\");\n    out += \"PrivateKey: \" + base64Key + \"\\n\";\n    // Assume that we're valid as-of now\n    var timestamp = new Date();\n    out += \"Created: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Publish: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    out += \"Activate: \" + dnssecTimestamp(timestamp) + \"\\n\";\n    return Buffer.from(out, \"ascii\");\n}\nfunction write(key, options) {\n    if (PrivateKey.isPrivateKey(key)) {\n        if (key.type === \"rsa\") {\n            return writeRSA(key, options);\n        } else if (key.type === \"ecdsa\") {\n            return writeECDSA(key, options);\n        } else {\n            throw new Error(\"Unsupported algorithm: \" + key.type);\n        }\n    } else if (Key.isKey(key)) {\n        /*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */ throw new Error('Format \"dnssec\" only supports ' + \"writing private keys\");\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js":
/*!********************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/openssh-cert.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write,\n    /* Internal private API */ fromBuffer: fromBuffer,\n    toBuffer: toBuffer\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction verify(cert, key) {\n    /*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */ return false;\n}\nvar TYPES = {\n    \"user\": 1,\n    \"host\": 2\n};\nObject.keys(TYPES).forEach(function(k) {\n    TYPES[TYPES[k]] = k;\n});\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\nfunction read(buf, options) {\n    if (Buffer.isBuffer(buf)) buf = buf.toString(\"ascii\");\n    var parts = buf.trim().split(/[ \\t\\n]+/g);\n    if (parts.length < 2 || parts.length > 3) throw new Error(\"Not a valid SSH certificate line\");\n    var algo = parts[0];\n    var data = parts[1];\n    data = Buffer.from(data, \"base64\");\n    return fromBuffer(data, algo);\n}\nfunction fromBuffer(data, algo, partial) {\n    var sshbuf = new SSHBuffer({\n        buffer: data\n    });\n    var innerAlgo = sshbuf.readString();\n    if (algo !== undefined && innerAlgo !== algo) throw new Error(\"SSH certificate algorithm mismatch\");\n    if (algo === undefined) algo = innerAlgo;\n    var cert = {};\n    cert.signatures = {};\n    cert.signatures.openssh = {};\n    cert.signatures.openssh.nonce = sshbuf.readBuffer();\n    var key = {};\n    var parts = key.parts = [];\n    key.type = getAlg(algo);\n    var partCount = algs.info[key.type].parts.length;\n    while(parts.length < partCount)parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    var algInfo = algs.info[key.type];\n    if (key.type === \"ecdsa\") {\n        var res = ECDSA_ALGO.exec(algo);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        parts[i].name = algInfo.parts[i];\n        if (parts[i].name !== \"curve\" && algInfo.normalize !== false) {\n            var p = parts[i];\n            p.data = utils.mpNormalize(p.data);\n        }\n    }\n    cert.subjectKey = new Key(key);\n    cert.serial = sshbuf.readInt64();\n    var type = TYPES[sshbuf.readInt()];\n    assert.string(type, \"valid cert type\");\n    cert.signatures.openssh.keyId = sshbuf.readString();\n    var principals = [];\n    var pbuf = sshbuf.readBuffer();\n    var psshbuf = new SSHBuffer({\n        buffer: pbuf\n    });\n    while(!psshbuf.atEnd())principals.push(psshbuf.readString());\n    if (principals.length === 0) principals = [\n        \"*\"\n    ];\n    cert.subjects = principals.map(function(pr) {\n        if (type === \"user\") return Identity.forUser(pr);\n        else if (type === \"host\") return Identity.forHost(pr);\n        throw new Error(\"Unknown identity type \" + type);\n    });\n    cert.validFrom = int64ToDate(sshbuf.readInt64());\n    cert.validUntil = int64ToDate(sshbuf.readInt64());\n    var exts = [];\n    var extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    var ext;\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: true\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    extbuf = new SSHBuffer({\n        buffer: sshbuf.readBuffer()\n    });\n    while(!extbuf.atEnd()){\n        ext = {\n            critical: false\n        };\n        ext.name = extbuf.readString();\n        ext.data = extbuf.readBuffer();\n        exts.push(ext);\n    }\n    cert.signatures.openssh.exts = exts;\n    /* reserved */ sshbuf.readBuffer();\n    var signingKeyBuf = sshbuf.readBuffer();\n    cert.issuerKey = rfc4253.read(signingKeyBuf);\n    /*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */ cert.issuer = Identity.forHost(\"**\");\n    var sigBuf = sshbuf.readBuffer();\n    cert.signatures.openssh.signature = Signature.parse(sigBuf, cert.issuerKey.type, \"ssh\");\n    if (partial !== undefined) {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Certificate(cert);\n}\nfunction int64ToDate(buf) {\n    var i = buf.readUInt32BE(0) * 4294967296;\n    i += buf.readUInt32BE(4);\n    var d = new Date();\n    d.setTime(i * 1000);\n    d.sourceInt64 = buf;\n    return d;\n}\nfunction dateToInt64(date) {\n    if (date.sourceInt64 !== undefined) return date.sourceInt64;\n    var i = Math.round(date.getTime() / 1000);\n    var upper = Math.floor(i / 4294967296);\n    var lower = Math.floor(i % 4294967296);\n    var buf = Buffer.alloc(8);\n    buf.writeUInt32BE(upper, 0);\n    buf.writeUInt32BE(lower, 4);\n    return buf;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        return false;\n    }\n    var sig = cert.signatures.openssh;\n    var hashAlgo = undefined;\n    if (key.type === \"rsa\" || key.type === \"dsa\") hashAlgo = \"sha1\";\n    var signer = key.createSign(hashAlgo);\n    signer.write(blob);\n    sig.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};\n    try {\n        var blob = toBuffer(cert, true);\n    } catch (e) {\n        delete cert.signatures.openssh;\n        done(e);\n        return;\n    }\n    var sig = cert.signatures.openssh;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        try {\n            /*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */ signature.toBuffer(\"ssh\");\n        } catch (e) {\n            done(e);\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    if (options === undefined) options = {};\n    var blob = toBuffer(cert);\n    var out = getCertType(cert.subjectKey) + \" \" + blob.toString(\"base64\");\n    if (options.comment) out = out + \" \" + options.comment;\n    return out;\n}\nfunction toBuffer(cert, noSig) {\n    assert.object(cert.signatures.openssh, \"signature for openssh format\");\n    var sig = cert.signatures.openssh;\n    if (sig.nonce === undefined) sig.nonce = crypto.randomBytes(16);\n    var buf = new SSHBuffer({});\n    buf.writeString(getCertType(cert.subjectKey));\n    buf.writeBuffer(sig.nonce);\n    var key = cert.subjectKey;\n    var algInfo = algs.info[key.type];\n    algInfo.parts.forEach(function(part) {\n        buf.writePart(key.part[part]);\n    });\n    buf.writeInt64(cert.serial);\n    var type = cert.subjects[0].type;\n    assert.notStrictEqual(type, \"unknown\");\n    cert.subjects.forEach(function(id) {\n        assert.strictEqual(id.type, type);\n    });\n    type = TYPES[type];\n    buf.writeInt(type);\n    if (sig.keyId === undefined) {\n        sig.keyId = cert.subjects[0].type + \"_\" + (cert.subjects[0].uid || cert.subjects[0].hostname);\n    }\n    buf.writeString(sig.keyId);\n    var sub = new SSHBuffer({});\n    cert.subjects.forEach(function(id) {\n        if (type === TYPES.host) sub.writeString(id.hostname);\n        else if (type === TYPES.user) sub.writeString(id.uid);\n    });\n    buf.writeBuffer(sub.toBuffer());\n    buf.writeInt64(dateToInt64(cert.validFrom));\n    buf.writeInt64(dateToInt64(cert.validUntil));\n    var exts = sig.exts;\n    if (exts === undefined) exts = [];\n    var extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical !== true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    extbuf = new SSHBuffer({});\n    exts.forEach(function(ext) {\n        if (ext.critical === true) return;\n        extbuf.writeString(ext.name);\n        extbuf.writeBuffer(ext.data);\n    });\n    buf.writeBuffer(extbuf.toBuffer());\n    /* reserved */ buf.writeBuffer(Buffer.alloc(0));\n    sub = rfc4253.write(cert.issuerKey);\n    buf.writeBuffer(sub);\n    if (!noSig) buf.writeBuffer(sig.signature.toBuffer(\"ssh\"));\n    return buf.toBuffer();\n}\nfunction getAlg(certType) {\n    if (certType === \"ssh-rsa-cert-v01@openssh.com\") return \"rsa\";\n    if (certType === \"ssh-dss-cert-v01@openssh.com\") return \"dsa\";\n    if (certType.match(ECDSA_ALGO)) return \"ecdsa\";\n    if (certType === \"ssh-ed25519-cert-v01@openssh.com\") return \"ed25519\";\n    throw new Error(\"Unsupported cert type \" + certType);\n}\nfunction getCertType(key) {\n    if (key.type === \"rsa\") return \"ssh-rsa-cert-v01@openssh.com\";\n    if (key.type === \"dsa\") return \"ssh-dss-cert-v01@openssh.com\";\n    if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.curve + \"-cert-v01@openssh.com\";\n    if (key.type === \"ed25519\") return \"ssh-ed25519-cert-v01@openssh.com\";\n    throw new Error(\"Unsupported key type \" + key.type);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/openssh-cert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pem.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pem.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pkcs1 = __webpack_require__(/*! ./pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar OID_PBES2 = \"1.2.840.113549.1.5.13\";\nvar OID_PBKDF2 = \"1.2.840.113549.1.5.12\";\nvar OID_TO_CIPHER = {\n    \"1.2.840.113549.3.7\": \"3des-cbc\",\n    \"2.16.840.1.101.3.4.1.2\": \"aes128-cbc\",\n    \"2.16.840.1.101.3.4.1.42\": \"aes256-cbc\"\n};\nvar CIPHER_TO_OID = {};\nObject.keys(OID_TO_CIPHER).forEach(function(k) {\n    CIPHER_TO_OID[OID_TO_CIPHER[k]] = k;\n});\nvar OID_TO_HASH = {\n    \"1.2.840.113549.2.7\": \"sha1\",\n    \"1.2.840.113549.2.9\": \"sha256\",\n    \"1.2.840.113549.2.11\": \"sha512\"\n};\nvar HASH_TO_OID = {};\nObject.keys(OID_TO_HASH).forEach(function(k) {\n    HASH_TO_OID[OID_TO_HASH[k]] = k;\n});\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */ function read(buf, options, forceType) {\n    var input = buf;\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    /* Begin and end banners must match key type */ assert.equal(m[2], m2[2]);\n    var type = m[2].toLowerCase();\n    var alg;\n    if (m[1]) {\n        /* They also must match algorithms, if given */ assert.equal(m[1], m2[1], \"PEM header and footer mismatch\");\n        alg = m[1].trim();\n    }\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    var cipher, key, iv;\n    if (headers[\"proc-type\"]) {\n        var parts = headers[\"proc-type\"].split(\",\");\n        if (parts[0] === \"4\" && parts[1] === \"ENCRYPTED\") {\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            } else {\n                parts = headers[\"dek-info\"].split(\",\");\n                assert.ok(parts.length === 2);\n                cipher = parts[0].toLowerCase();\n                iv = Buffer.from(parts[1], \"hex\");\n                key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;\n            }\n        }\n    }\n    if (alg && alg.toLowerCase() === \"encrypted\") {\n        var eder = new asn1.BerReader(buf);\n        var pbesEnd;\n        eder.readSequence();\n        eder.readSequence();\n        pbesEnd = eder.offset + eder.length;\n        var method = eder.readOID();\n        if (method !== OID_PBES2) {\n            throw new Error(\"Unsupported PEM/PKCS8 encryption \" + \"scheme: \" + method);\n        }\n        eder.readSequence(); /* PBES2-params */ \n        eder.readSequence(); /* keyDerivationFunc */ \n        var kdfEnd = eder.offset + eder.length;\n        var kdfOid = eder.readOID();\n        if (kdfOid !== OID_PBKDF2) throw new Error(\"Unsupported PBES2 KDF: \" + kdfOid);\n        eder.readSequence();\n        var salt = eder.readString(asn1.Ber.OctetString, true);\n        var iterations = eder.readInt();\n        var hashAlg = \"sha1\";\n        if (eder.offset < kdfEnd) {\n            eder.readSequence();\n            var hashAlgOid = eder.readOID();\n            hashAlg = OID_TO_HASH[hashAlgOid];\n            if (hashAlg === undefined) {\n                throw new Error(\"Unsupported PBKDF2 hash: \" + hashAlgOid);\n            }\n        }\n        eder._offset = kdfEnd;\n        eder.readSequence(); /* encryptionScheme */ \n        var cipherOid = eder.readOID();\n        cipher = OID_TO_CIPHER[cipherOid];\n        if (cipher === undefined) {\n            throw new Error(\"Unsupported PBES2 cipher: \" + cipherOid);\n        }\n        iv = eder.readString(asn1.Ber.OctetString, true);\n        eder._offset = pbesEnd;\n        buf = eder.readString(asn1.Ber.OctetString, true);\n        if (typeof options.passphrase === \"string\") {\n            options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n        }\n        if (!Buffer.isBuffer(options.passphrase)) {\n            throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n        }\n        var cinfo = utils.opensshCipherInfo(cipher);\n        cipher = cinfo.opensslName;\n        key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize, options.passphrase);\n        alg = undefined;\n    }\n    if (cipher && key && iv) {\n        var cipherStream = crypto.createDecipheriv(cipher, key, iv);\n        var chunk, chunks = [];\n        cipherStream.once(\"error\", function(e) {\n            if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n            }\n            throw e;\n        });\n        cipherStream.write(buf);\n        cipherStream.end();\n        while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n        buf = Buffer.concat(chunks);\n    }\n    /* The new OpenSSH internal format abuses PEM headers */ if (alg && alg.toLowerCase() === \"openssh\") return sshpriv.readSSHPrivate(type, buf, options);\n    if (alg && alg.toLowerCase() === \"ssh2\") return rfc4253.readType(type, buf, options);\n    var der = new asn1.BerReader(buf);\n    der.originalInput = input;\n    /*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */ der.readSequence();\n    /* PKCS#1 type keys name an algorithm in the banner explicitly */ if (alg) {\n        if (forceType) assert.strictEqual(forceType, \"pkcs1\");\n        return pkcs1.readPkcs1(alg, type, der);\n    } else {\n        if (forceType) assert.strictEqual(forceType, \"pkcs8\");\n        return pkcs8.readPkcs8(alg, type, der);\n    }\n}\nfunction write(key, options, type) {\n    assert.object(key);\n    var alg = {\n        \"ecdsa\": \"EC\",\n        \"rsa\": \"RSA\",\n        \"dsa\": \"DSA\",\n        \"ed25519\": \"EdDSA\"\n    }[key.type];\n    var header;\n    var der = new asn1.BerWriter();\n    if (PrivateKey.isPrivateKey(key)) {\n        if (type && type === \"pkcs8\") {\n            header = \"PRIVATE KEY\";\n            pkcs8.writePkcs8(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs1\");\n            header = alg + \" PRIVATE KEY\";\n            pkcs1.writePkcs1(der, key);\n        }\n    } else if (Key.isKey(key)) {\n        if (type && type === \"pkcs1\") {\n            header = alg + \" PUBLIC KEY\";\n            pkcs1.writePkcs1(der, key);\n        } else {\n            if (type) assert.strictEqual(type, \"pkcs8\");\n            header = \"PUBLIC KEY\";\n            pkcs8.writePkcs8(der, key);\n        }\n    } else {\n        throw new Error(\"key is not a Key or PrivateKey\");\n    }\n    var tmp = der.buffer.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs1.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs1: readPkcs1,\n    write: write,\n    writePkcs1: writePkcs1\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nvar readECDSACurve = pkcs8.readECDSACurve;\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs1\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs1\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs1(alg, type, der) {\n    switch(alg){\n        case \"RSA\":\n            if (type === \"public\") return readPkcs1RSAPublic(der);\n            else if (type === \"private\") return readPkcs1RSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"DSA\":\n            if (type === \"public\") return readPkcs1DSAPublic(der);\n            else if (type === \"private\") return readPkcs1DSAPrivate(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EC\":\n        case \"ECDSA\":\n            if (type === \"private\") return readPkcs1ECDSAPrivate(der);\n            else if (type === \"public\") return readPkcs1ECDSAPublic(der);\n            throw new Error(\"Unknown key type: \" + type);\n        case \"EDDSA\":\n        case \"EdDSA\":\n            if (type === \"private\") return readPkcs1EdDSAPrivate(der);\n            throw new Error(type + \" keys not supported with EdDSA\");\n        default:\n            throw new Error(\"Unknown key algo: \" + alg);\n    }\n}\nfunction readPkcs1RSAPublic(der) {\n    // modulus and exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1RSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version[0], 0);\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 0);\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var y = readMPInt(der, \"y\");\n    var x = readMPInt(der, \"x\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1EdDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var k = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.3.101.112\", \"the ed25519 curve identifier\");\n    der.readSequence(0xa1);\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: k\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs1DSAPublic(der) {\n    var y = readMPInt(der, \"y\");\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPublic(der) {\n    der.readSequence();\n    var oid = der.readOID();\n    assert.strictEqual(oid, \"1.2.840.10045.2.1\", \"must be ecPublicKey\");\n    var curveOid = der.readOID();\n    var curve;\n    var curves = Object.keys(algs.curves);\n    for(var j = 0; j < curves.length; ++j){\n        var c = curves[j];\n        var cd = algs.curves[c];\n        if (cd.pkcs8oid === curveOid) {\n            curve = c;\n            break;\n        }\n    }\n    assert.string(curve, \"a known ECDSA named curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs1ECDSAPrivate(der) {\n    var version = readMPInt(der, \"version\");\n    assert.strictEqual(version.readUInt8(0), 1);\n    // private key\n    var d = der.readString(asn1.Ber.OctetString, true);\n    der.readSequence(0xa0);\n    var curve = readECDSACurve(der);\n    assert.string(curve, \"a known elliptic curve\");\n    der.readSequence(0xa1);\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curve)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction writePkcs1(der, key) {\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);\n            else writePkcs1RSAPublic(der, key);\n            break;\n        case \"dsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);\n            else writePkcs1DSAPublic(der, key);\n            break;\n        case \"ecdsa\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);\n            else writePkcs1ECDSAPublic(der, key);\n            break;\n        case \"ed25519\":\n            if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);\n            else writePkcs1EdDSAPublic(der, key);\n            break;\n        default:\n            throw new Error(\"Unknown key algo: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs1RSAPublic(der, key) {\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\nfunction writePkcs1RSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPrivate(der, key) {\n    var ver = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\nfunction writePkcs1DSAPublic(der, key) {\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\nfunction writePkcs1ECDSAPublic(der, key) {\n    der.startSequence();\n    der.writeOID(\"1.2.840.10045.2.1\"); /* ecPublicKey */ \n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs1ECDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    var curve = key.part.curve.data.toString();\n    var curveOid = algs.curves[curve].pkcs8oid;\n    assert.string(curveOid, \"a known ECDSA named curve\");\n    der.writeOID(curveOid);\n    der.endSequence();\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPrivate(der, key) {\n    var ver = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(ver, asn1.Ber.Integer);\n    der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n    der.startSequence(0xa0);\n    der.writeOID(\"1.3.101.112\");\n    der.endSequence();\n    der.startSequence(0xa1);\n    utils.writeBitString(der, key.part.A.data);\n    der.endSequence();\n}\nfunction writePkcs1EdDSAPublic(der, key) {\n    throw new Error(\"Public keys are not supported for EdDSA PKCS#1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcGtjczEuanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QkEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxNQUFNQTtJQUNOQyxXQUFXQTtJQUNYQyxPQUFPQTtJQUNQQyxZQUFZQTtBQUNiO0FBRUEsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUUsU0FBU0YsOEZBQThCO0FBQzNDLElBQUlHLE9BQU9ILG1CQUFPQSxDQUFDO0FBQ25CLElBQUlJLFFBQVFKLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlLLE1BQU1MLG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlNLGFBQWFOLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlPLE1BQU1QLG1CQUFPQSxDQUFDO0FBRWxCLElBQUlRLFFBQVFSLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlTLGlCQUFpQkQsTUFBTUMsY0FBYztBQUV6QyxTQUFTZCxLQUFLZSxHQUFHLEVBQUVDLE9BQU87SUFDekIsT0FBUUosSUFBSVosSUFBSSxDQUFDZSxLQUFLQyxTQUFTO0FBQ2hDO0FBRUEsU0FBU2QsTUFBTWUsR0FBRyxFQUFFRCxPQUFPO0lBQzFCLE9BQVFKLElBQUlWLEtBQUssQ0FBQ2UsS0FBS0QsU0FBUztBQUNqQztBQUVBLG9DQUFvQyxHQUNwQyxTQUFTRSxVQUFVQyxHQUFHLEVBQUVDLEVBQUU7SUFDekJoQixPQUFPaUIsV0FBVyxDQUFDRixJQUFJRyxJQUFJLElBQUloQixLQUFLaUIsR0FBRyxDQUFDQyxPQUFPLEVBQzNDSixLQUFLO0lBQ1QsT0FBUVgsTUFBTWdCLFdBQVcsQ0FBQ04sSUFBSU8sVUFBVSxDQUFDcEIsS0FBS2lCLEdBQUcsQ0FBQ0MsT0FBTyxFQUFFO0FBQzVEO0FBRUEsU0FBU3ZCLFVBQVUwQixHQUFHLEVBQUVDLElBQUksRUFBRVQsR0FBRztJQUNoQyxPQUFRUTtRQUNSLEtBQUs7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QUtuRixLQUFLaUIsR0FBRyxDQUFDQyxPQUFPO0lBRXJDTCxJQUFJb0UsV0FBVyxDQUFDdEUsSUFBSXVFLElBQUksQ0FBQ25DLENBQUMsQ0FBQ1osSUFBSSxFQUFFbkMsS0FBS2lCLEdBQUcsQ0FBQytCLFdBQVc7SUFFckRuQyxJQUFJeUQsYUFBYSxDQUFDO0lBQ2xCekQsSUFBSXdFLFFBQVEsQ0FBQztJQUNieEUsSUFBSW1FLFdBQVc7SUFFZm5FLElBQUl5RCxhQUFhLENBQUM7SUFDbEJuRSxNQUFNb0YsY0FBYyxDQUFDMUUsS0FBS0YsSUFBSXVFLElBQUksQ0FBQzlCLENBQUMsQ0FBQ2pCLElBQUk7SUFDekN0QixJQUFJbUUsV0FBVztBQUNoQjtBQUVBLFNBQVNELHNCQUFzQmxFLEdBQUcsRUFBRUYsR0FBRztJQUN0QyxNQUFPLElBQUljLE1BQU07QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYXRvb2xzLW5leHQvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvcGtjczEuanM/M2U2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHJlYWQ6IHJlYWQsXG5cdHJlYWRQa2NzMTogcmVhZFBrY3MxLFxuXHR3cml0ZTogd3JpdGUsXG5cdHdyaXRlUGtjczE6IHdyaXRlUGtjczFcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuLi9hbGdzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgS2V5ID0gcmVxdWlyZSgnLi4va2V5Jyk7XG52YXIgUHJpdmF0ZUtleSA9IHJlcXVpcmUoJy4uL3ByaXZhdGUta2V5Jyk7XG52YXIgcGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcblxudmFyIHBrY3M4ID0gcmVxdWlyZSgnLi9wa2NzOCcpO1xudmFyIHJlYWRFQ0RTQUN1cnZlID0gcGtjczgucmVhZEVDRFNBQ3VydmU7XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdHJldHVybiAocGVtLnJlYWQoYnVmLCBvcHRpb25zLCAncGtjczEnKSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGtleSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKHBlbS53cml0ZShrZXksIG9wdGlvbnMsICdwa2NzMScpKTtcbn1cblxuLyogSGVscGVyIHRvIHJlYWQgaW4gYSBzaW5nbGUgbXBpbnQgKi9cbmZ1bmN0aW9uIHJlYWRNUEludChkZXIsIG5tKSB7XG5cdGFzc2VydC5zdHJpY3RFcXVhbChkZXIucGVlaygpLCBhc24xLkJlci5JbnRlZ2VyLFxuXHQgICAgbm0gKyAnIGlzIG5vdCBhbiBJbnRlZ2VyJyk7XG5cdHJldHVybiAodXRpbHMubXBOb3JtYWxpemUoZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuSW50ZWdlciwgdHJ1ZSkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxKGFsZywgdHlwZSwgZGVyKSB7XG5cdHN3aXRjaCAoYWxnKSB7XG5cdGNhc2UgJ1JTQSc6XG5cdFx0aWYgKHR5cGUgPT09ICdwdWJsaWMnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFSU0FQdWJsaWMoZGVyKSk7XG5cdFx0ZWxzZSBpZiAodHlwZSA9PT0gJ3ByaXZhdGUnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFSU0FQcml2YXRlKGRlcikpO1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ1Vua25vd24ga2V5IHR5cGU6ICcgKyB0eXBlKSk7XG5cdGNhc2UgJ0RTQSc6XG5cdFx0aWYgKHR5cGUgPT09ICdwdWJsaWMnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFEU0FQdWJsaWMoZGVyKSk7XG5cdFx0ZWxzZSBpZiAodHlwZSA9PT0gJ3ByaXZhdGUnKVxuXHRcdFx0cmV0dXJuIChyZWFkUGtjczFEU0FQcml2YXRlKGRlcikpO1xuXHRcdHRocm93IChuZXcgRXJyb3IoJ1Vua25vd24ga2V5IHR5cGU6ICcgKyB0eXBlKSk7XG5cdGNhc2UgJ0VDJzpcblx0Y2FzZSAnRUNEU0EnOlxuXHRcdGlmICh0eXBlID09PSAncHJpdmF0ZScpXG5cdFx0XHRyZXR1cm4gKHJlYWRQa2NzMUVDRFNBUHJpdmF0ZShkZXIpKTtcblx0XHRlbHNlIGlmICh0eXBlID09PSAncHVibGljJylcblx0XHRcdHJldHVybiAocmVhZFBrY3MxRUNEU0FQdWJsaWMoZGVyKSk7XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgdHlwZTogJyArIHR5cGUpKTtcblx0Y2FzZSAnRUREU0EnOlxuXHRjYXNlICdFZERTQSc6XG5cdFx0aWYgKHR5cGUgPT09ICdwcml2YXRlJylcblx0XHRcdHJldHVybiAocmVhZFBrY3MxRWREU0FQcml2YXRlKGRlcikpO1xuXHRcdHRocm93IChuZXcgRXJyb3IodHlwZSArICcga2V5cyBub3Qgc3VwcG9ydGVkIHdpdGggRWREU0EnKSk7XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgYWxnbzogJyArIGFsZykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzMVJTQVB1YmxpYyhkZXIpIHtcblx0Ly8gbW9kdWx1cyBhbmQgZXhwb25lbnRcblx0dmFyIG4gPSByZWFkTVBJbnQoZGVyLCAnbW9kdWx1cycpO1xuXHR2YXIgZSA9IHJlYWRNUEludChkZXIsICdleHBvbmVudCcpO1xuXG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ3JzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2UnLCBkYXRhOiBlIH0sXG5cdFx0XHR7IG5hbWU6ICduJywgZGF0YTogbiB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IEtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxUlNBUHJpdmF0ZShkZXIpIHtcblx0dmFyIHZlcnNpb24gPSByZWFkTVBJbnQoZGVyLCAndmVyc2lvbicpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwodmVyc2lvblswXSwgMCk7XG5cblx0Ly8gbW9kdWx1cyB0aGVuIHB1YmxpYyBleHBvbmVudFxuXHR2YXIgbiA9IHJlYWRNUEludChkZXIsICdtb2R1bHVzJyk7XG5cdHZhciBlID0gcmVhZE1QSW50KGRlciwgJ3B1YmxpYyBleHBvbmVudCcpO1xuXHR2YXIgZCA9IHJlYWRNUEludChkZXIsICdwcml2YXRlIGV4cG9uZW50Jyk7XG5cdHZhciBwID0gcmVhZE1QSW50KGRlciwgJ3ByaW1lMScpO1xuXHR2YXIgcSA9IHJlYWRNUEludChkZXIsICdwcmltZTInKTtcblx0dmFyIGRtb2RwID0gcmVhZE1QSW50KGRlciwgJ2V4cG9uZW50MScpO1xuXHR2YXIgZG1vZHEgPSByZWFkTVBJbnQoZGVyLCAnZXhwb25lbnQyJyk7XG5cdHZhciBpcW1wID0gcmVhZE1QSW50KGRlciwgJ2lxbXAnKTtcblxuXHQvLyBub3csIG1ha2UgdGhlIGtleVxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdyc2EnLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICduJywgZGF0YTogbiB9LFxuXHRcdFx0eyBuYW1lOiAnZScsIGRhdGE6IGUgfSxcblx0XHRcdHsgbmFtZTogJ2QnLCBkYXRhOiBkIH0sXG5cdFx0XHR7IG5hbWU6ICdpcW1wJywgZGF0YTogaXFtcCB9LFxuXHRcdFx0eyBuYW1lOiAncCcsIGRhdGE6IHAgfSxcblx0XHRcdHsgbmFtZTogJ3EnLCBkYXRhOiBxIH0sXG5cdFx0XHR7IG5hbWU6ICdkbW9kcCcsIGRhdGE6IGRtb2RwIH0sXG5cdFx0XHR7IG5hbWU6ICdkbW9kcScsIGRhdGE6IGRtb2RxIH1cblx0XHRdXG5cdH07XG5cblx0cmV0dXJuIChuZXcgUHJpdmF0ZUtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxRFNBUHJpdmF0ZShkZXIpIHtcblx0dmFyIHZlcnNpb24gPSByZWFkTVBJbnQoZGVyLCAndmVyc2lvbicpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwodmVyc2lvbi5yZWFkVUludDgoMCksIDApO1xuXG5cdHZhciBwID0gcmVhZE1QSW50KGRlciwgJ3AnKTtcblx0dmFyIHEgPSByZWFkTVBJbnQoZGVyLCAncScpO1xuXHR2YXIgZyA9IHJlYWRNUEludChkZXIsICdnJyk7XG5cdHZhciB5ID0gcmVhZE1QSW50KGRlciwgJ3knKTtcblx0dmFyIHggPSByZWFkTVBJbnQoZGVyLCAneCcpO1xuXG5cdC8vIG5vdywgbWFrZSB0aGUga2V5XG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ3AnLCBkYXRhOiBwIH0sXG5cdFx0XHR7IG5hbWU6ICdxJywgZGF0YTogcSB9LFxuXHRcdFx0eyBuYW1lOiAnZycsIGRhdGE6IGcgfSxcblx0XHRcdHsgbmFtZTogJ3knLCBkYXRhOiB5IH0sXG5cdFx0XHR7IG5hbWU6ICd4JywgZGF0YTogeCB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IFByaXZhdGVLZXkoa2V5KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQa2NzMUVkRFNBUHJpdmF0ZShkZXIpIHtcblx0dmFyIHZlcnNpb24gPSByZWFkTVBJbnQoZGVyLCAndmVyc2lvbicpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwodmVyc2lvbi5yZWFkVUludDgoMCksIDEpO1xuXG5cdC8vIHByaXZhdGUga2V5XG5cdHZhciBrID0gZGVyLnJlYWRTdHJpbmcoYXNuMS5CZXIuT2N0ZXRTdHJpbmcsIHRydWUpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoMHhhMCk7XG5cdHZhciBvaWQgPSBkZXIucmVhZE9JRCgpO1xuXHRhc3NlcnQuc3RyaWN0RXF1YWwob2lkLCAnMS4zLjEwMS4xMTInLCAndGhlIGVkMjU1MTkgY3VydmUgaWRlbnRpZmllcicpO1xuXG5cdGRlci5yZWFkU2VxdWVuY2UoMHhhMSk7XG5cdHZhciBBID0gdXRpbHMucmVhZEJpdFN0cmluZyhkZXIpO1xuXG5cdHZhciBrZXkgPSB7XG5cdFx0dHlwZTogJ2VkMjU1MTknLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICdBJywgZGF0YTogdXRpbHMuemVyb1BhZFRvTGVuZ3RoKEEsIDMyKSB9LFxuXHRcdFx0eyBuYW1lOiAnaycsIGRhdGE6IGsgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiByZWFkUGtjczFEU0FQdWJsaWMoZGVyKSB7XG5cdHZhciB5ID0gcmVhZE1QSW50KGRlciwgJ3knKTtcblx0dmFyIHAgPSByZWFkTVBJbnQoZGVyLCAncCcpO1xuXHR2YXIgcSA9IHJlYWRNUEludChkZXIsICdxJyk7XG5cdHZhciBnID0gcmVhZE1QSW50KGRlciwgJ2cnKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdkc2EnLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IG5hbWU6ICd5JywgZGF0YTogeSB9LFxuXHRcdFx0eyBuYW1lOiAncCcsIGRhdGE6IHAgfSxcblx0XHRcdHsgbmFtZTogJ3EnLCBkYXRhOiBxIH0sXG5cdFx0XHR7IG5hbWU6ICdnJywgZGF0YTogZyB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IEtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxRUNEU0FQdWJsaWMoZGVyKSB7XG5cdGRlci5yZWFkU2VxdWVuY2UoKTtcblxuXHR2YXIgb2lkID0gZGVyLnJlYWRPSUQoKTtcblx0YXNzZXJ0LnN0cmljdEVxdWFsKG9pZCwgJzEuMi44NDAuMTAwNDUuMi4xJywgJ211c3QgYmUgZWNQdWJsaWNLZXknKTtcblxuXHR2YXIgY3VydmVPaWQgPSBkZXIucmVhZE9JRCgpO1xuXG5cdHZhciBjdXJ2ZTtcblx0dmFyIGN1cnZlcyA9IE9iamVjdC5rZXlzKGFsZ3MuY3VydmVzKTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBjdXJ2ZXMubGVuZ3RoOyArK2opIHtcblx0XHR2YXIgYyA9IGN1cnZlc1tqXTtcblx0XHR2YXIgY2QgPSBhbGdzLmN1cnZlc1tjXTtcblx0XHRpZiAoY2QucGtjczhvaWQgPT09IGN1cnZlT2lkKSB7XG5cdFx0XHRjdXJ2ZSA9IGM7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblx0YXNzZXJ0LnN0cmluZyhjdXJ2ZSwgJ2Ega25vd24gRUNEU0EgbmFtZWQgY3VydmUnKTtcblxuXHR2YXIgUSA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkJpdFN0cmluZywgdHJ1ZSk7XG5cdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmUpIH0sXG5cdFx0XHR7IG5hbWU6ICdRJywgZGF0YTogUSB9XG5cdFx0XVxuXHR9O1xuXG5cdHJldHVybiAobmV3IEtleShrZXkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZFBrY3MxRUNEU0FQcml2YXRlKGRlcikge1xuXHR2YXIgdmVyc2lvbiA9IHJlYWRNUEludChkZXIsICd2ZXJzaW9uJyk7XG5cdGFzc2VydC5zdHJpY3RFcXVhbCh2ZXJzaW9uLnJlYWRVSW50OCgwKSwgMSk7XG5cblx0Ly8gcHJpdmF0ZSBrZXlcblx0dmFyIGQgPSBkZXIucmVhZFN0cmluZyhhc24xLkJlci5PY3RldFN0cmluZywgdHJ1ZSk7XG5cblx0ZGVyLnJlYWRTZXF1ZW5jZSgweGEwKTtcblx0dmFyIGN1cnZlID0gcmVhZEVDRFNBQ3VydmUoZGVyKTtcblx0YXNzZXJ0LnN0cmluZyhjdXJ2ZSwgJ2Ega25vd24gZWxsaXB0aWMgY3VydmUnKTtcblxuXHRkZXIucmVhZFNlcXVlbmNlKDB4YTEpO1xuXHR2YXIgUSA9IGRlci5yZWFkU3RyaW5nKGFzbjEuQmVyLkJpdFN0cmluZywgdHJ1ZSk7XG5cdFEgPSB1dGlscy5lY05vcm1hbGl6ZShRKTtcblxuXHR2YXIga2V5ID0ge1xuXHRcdHR5cGU6ICdlY2RzYScsXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgbmFtZTogJ2N1cnZlJywgZGF0YTogQnVmZmVyLmZyb20oY3VydmUpIH0sXG5cdFx0XHR7IG5hbWU6ICdRJywgZGF0YTogUSB9LFxuXHRcdFx0eyBuYW1lOiAnZCcsIGRhdGE6IGQgfVxuXHRcdF1cblx0fTtcblxuXHRyZXR1cm4gKG5ldyBQcml2YXRlS2V5KGtleSkpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxKGRlciwga2V5KSB7XG5cdGRlci5zdGFydFNlcXVlbmNlKCk7XG5cblx0c3dpdGNoIChrZXkudHlwZSkge1xuXHRjYXNlICdyc2EnOlxuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzMVJTQVByaXZhdGUoZGVyLCBrZXkpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczFSU0FQdWJsaWMoZGVyLCBrZXkpO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdkc2EnOlxuXHRcdGlmIChQcml2YXRlS2V5LmlzUHJpdmF0ZUtleShrZXkpKVxuXHRcdFx0d3JpdGVQa2NzMURTQVByaXZhdGUoZGVyLCBrZXkpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczFEU0FQdWJsaWMoZGVyLCBrZXkpO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdlY2RzYSc6XG5cdFx0aWYgKFByaXZhdGVLZXkuaXNQcml2YXRlS2V5KGtleSkpXG5cdFx0XHR3cml0ZVBrY3MxRUNEU0FQcml2YXRlKGRlciwga2V5KTtcblx0XHRlbHNlXG5cdFx0XHR3cml0ZVBrY3MxRUNEU0FQdWJsaWMoZGVyLCBrZXkpO1xuXHRcdGJyZWFrO1xuXHRjYXNlICdlZDI1NTE5Jzpcblx0XHRpZiAoUHJpdmF0ZUtleS5pc1ByaXZhdGVLZXkoa2V5KSlcblx0XHRcdHdyaXRlUGtjczFFZERTQVByaXZhdGUoZGVyLCBrZXkpO1xuXHRcdGVsc2Vcblx0XHRcdHdyaXRlUGtjczFFZERTQVB1YmxpYyhkZXIsIGtleSk7XG5cdFx0YnJlYWs7XG5cdGRlZmF1bHQ6XG5cdFx0dGhyb3cgKG5ldyBFcnJvcignVW5rbm93biBrZXkgYWxnbzogJyArIGtleS50eXBlKSk7XG5cdH1cblxuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzMVJTQVB1YmxpYyhkZXIsIGtleSkge1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQubi5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmUuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFSU0FQcml2YXRlKGRlciwga2V5KSB7XG5cdHZhciB2ZXIgPSBCdWZmZXIuZnJvbShbMF0pO1xuXHRkZXIud3JpdGVCdWZmZXIodmVyLCBhc24xLkJlci5JbnRlZ2VyKTtcblxuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQubi5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmUuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5kLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGlmICgha2V5LnBhcnQuZG1vZHAgfHwgIWtleS5wYXJ0LmRtb2RxKVxuXHRcdHV0aWxzLmFkZFJTQU1pc3Npbmcoa2V5KTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmRtb2RwLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZG1vZHEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5pcW1wLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxRFNBUHJpdmF0ZShkZXIsIGtleSkge1xuXHR2YXIgdmVyID0gQnVmZmVyLmZyb20oWzBdKTtcblx0ZGVyLndyaXRlQnVmZmVyKHZlciwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnAuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5xLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQuZy5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnkuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC54LmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxRFNBUHVibGljKGRlciwga2V5KSB7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC55LmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xuXHRkZXIud3JpdGVCdWZmZXIoa2V5LnBhcnQucC5kYXRhLCBhc24xLkJlci5JbnRlZ2VyKTtcblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LnEuZGF0YSwgYXNuMS5CZXIuSW50ZWdlcik7XG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5nLmRhdGEsIGFzbjEuQmVyLkludGVnZXIpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxRUNEU0FQdWJsaWMoZGVyLCBrZXkpIHtcblx0ZGVyLnN0YXJ0U2VxdWVuY2UoKTtcblxuXHRkZXIud3JpdGVPSUQoJzEuMi44NDAuMTAwNDUuMi4xJyk7IC8qIGVjUHVibGljS2V5ICovXG5cdHZhciBjdXJ2ZSA9IGtleS5wYXJ0LmN1cnZlLmRhdGEudG9TdHJpbmcoKTtcblx0dmFyIGN1cnZlT2lkID0gYWxncy5jdXJ2ZXNbY3VydmVdLnBrY3M4b2lkO1xuXHRhc3NlcnQuc3RyaW5nKGN1cnZlT2lkLCAnYSBrbm93biBFQ0RTQSBuYW1lZCBjdXJ2ZScpO1xuXHRkZXIud3JpdGVPSUQoY3VydmVPaWQpO1xuXG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdHZhciBRID0gdXRpbHMuZWNOb3JtYWxpemUoa2V5LnBhcnQuUS5kYXRhLCB0cnVlKTtcblx0ZGVyLndyaXRlQnVmZmVyKFEsIGFzbjEuQmVyLkJpdFN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlUGtjczFFQ0RTQVByaXZhdGUoZGVyLCBrZXkpIHtcblx0dmFyIHZlciA9IEJ1ZmZlci5mcm9tKFsxXSk7XG5cdGRlci53cml0ZUJ1ZmZlcih2ZXIsIGFzbjEuQmVyLkludGVnZXIpO1xuXG5cdGRlci53cml0ZUJ1ZmZlcihrZXkucGFydC5kLmRhdGEsIGFzbjEuQmVyLk9jdGV0U3RyaW5nKTtcblxuXHRkZXIuc3RhcnRTZXF1ZW5jZSgweGEwKTtcblx0dmFyIGN1cnZlID0ga2V5LnBhcnQuY3VydmUuZGF0YS50b1N0cmluZygpO1xuXHR2YXIgY3VydmVPaWQgPSBhbGdzLmN1cnZlc1tjdXJ2ZV0ucGtjczhvaWQ7XG5cdGFzc2VydC5zdHJpbmcoY3VydmVPaWQsICdhIGtub3duIEVDRFNBIG5hbWVkIGN1cnZlJyk7XG5cdGRlci53cml0ZU9JRChjdXJ2ZU9pZCk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKDB4YTEpO1xuXHR2YXIgUSA9IHV0aWxzLmVjTm9ybWFsaXplKGtleS5wYXJ0LlEuZGF0YSwgdHJ1ZSk7XG5cdGRlci53cml0ZUJ1ZmZlcihRLCBhc24xLkJlci5CaXRTdHJpbmcpO1xuXHRkZXIuZW5kU2VxdWVuY2UoKTtcbn1cblxuZnVuY3Rpb24gd3JpdGVQa2NzMUVkRFNBUHJpdmF0ZShkZXIsIGtleSkge1xuXHR2YXIgdmVyID0gQnVmZmVyLmZyb20oWzFdKTtcblx0ZGVyLndyaXRlQnVmZmVyKHZlciwgYXNuMS5CZXIuSW50ZWdlcik7XG5cblx0ZGVyLndyaXRlQnVmZmVyKGtleS5wYXJ0LmsuZGF0YSwgYXNuMS5CZXIuT2N0ZXRTdHJpbmcpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKDB4YTApO1xuXHRkZXIud3JpdGVPSUQoJzEuMy4xMDEuMTEyJyk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xuXG5cdGRlci5zdGFydFNlcXVlbmNlKDB4YTEpO1xuXHR1dGlscy53cml0ZUJpdFN0cmluZyhkZXIsIGtleS5wYXJ0LkEuZGF0YSk7XG5cdGRlci5lbmRTZXF1ZW5jZSgpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVBrY3MxRWREU0FQdWJsaWMoZGVyLCBrZXkpIHtcblx0dGhyb3cgKG5ldyBFcnJvcignUHVibGljIGtleXMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIEVkRFNBIFBLQ1MjMScpKTtcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVhZCIsInJlYWRQa2NzMSIsIndyaXRlIiwid3JpdGVQa2NzMSIsImFzc2VydCIsInJlcXVpcmUiLCJhc24xIiwiQnVmZmVyIiwiYWxncyIsInV0aWxzIiwiS2V5IiwiUHJpdmF0ZUtleSIsInBlbSIsInBrY3M4IiwicmVhZEVDRFNBQ3VydmUiLCJidWYiLCJvcHRpb25zIiwia2V5IiwicmVhZE1QSW50IiwiZGVyIiwibm0iLCJzdHJpY3RFcXVhbCIsInBlZWsiLCJCZXIiLCJJbnRlZ2VyIiwibXBOb3JtYWxpemUiLCJyZWFkU3RyaW5nIiwiYWxnIiwidHlwZSIsInJlYWRQa2NzMVJTQVB1YmxpYyIsInJlYWRQa2NzMVJTQVByaXZhdGUiLCJFcnJvciIsInJlYWRQa2NzMURTQVB1YmxpYyIsInJlYWRQa2NzMURTQVByaXZhdGUiLCJyZWFkUGtjczFFQ0RTQVByaXZhdGUiLCJyZWFkUGtjczFFQ0RTQVB1YmxpYyIsInJlYWRQa2NzMUVkRFNBUHJpdmF0ZSIsIm4iLCJlIiwicGFydHMiLCJuYW1lIiwiZGF0YSIsInZlcnNpb24iLCJkIiwicCIsInEiLCJkbW9kcCIsImRtb2RxIiwiaXFtcCIsInJlYWRVSW50OCIsImciLCJ5IiwieCIsImsiLCJPY3RldFN0cmluZyIsInJlYWRTZXF1ZW5jZSIsIm9pZCIsInJlYWRPSUQiLCJBIiwicmVhZEJpdFN0cmluZyIsInplcm9QYWRUb0xlbmd0aCIsImN1cnZlT2lkIiwiY3VydmUiLCJjdXJ2ZXMiLCJPYmplY3QiLCJrZXlzIiwiaiIsImxlbmd0aCIsImMiLCJjZCIsInBrY3M4b2lkIiwic3RyaW5nIiwiUSIsIkJpdFN0cmluZyIsImVjTm9ybWFsaXplIiwiZnJvbSIsInN0YXJ0U2VxdWVuY2UiLCJpc1ByaXZhdGVLZXkiLCJ3cml0ZVBrY3MxUlNBUHJpdmF0ZSIsIndyaXRlUGtjczFSU0FQdWJsaWMiLCJ3cml0ZVBrY3MxRFNBUHJpdmF0ZSIsIndyaXRlUGtjczFEU0FQdWJsaWMiLCJ3cml0ZVBrY3MxRUNEU0FQcml2YXRlIiwid3JpdGVQa2NzMUVDRFNBUHVibGljIiwid3JpdGVQa2NzMUVkRFNBUHJpdmF0ZSIsIndyaXRlUGtjczFFZERTQVB1YmxpYyIsImVuZFNlcXVlbmNlIiwid3JpdGVCdWZmZXIiLCJwYXJ0IiwidmVyIiwiYWRkUlNBTWlzc2luZyIsIndyaXRlT0lEIiwidG9TdHJpbmciLCJ3cml0ZUJpdFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/pkcs8.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readPkcs8: readPkcs8,\n    write: write,\n    writePkcs8: writePkcs8,\n    pkcs8ToBuffer: pkcs8ToBuffer,\n    readECDSACurve: readECDSACurve,\n    writeECDSACurve: writeECDSACurve\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nfunction read(buf, options) {\n    return pem.read(buf, options, \"pkcs8\");\n}\nfunction write(key, options) {\n    return pem.write(key, options, \"pkcs8\");\n}\n/* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction readPkcs8(alg, type, der) {\n    /* Private keys in pkcs#8 format have a weird extra int */ if (der.peek() === asn1.Ber.Integer) {\n        assert.strictEqual(type, \"private\", \"unexpected Integer at start of public key\");\n        der.readString(asn1.Ber.Integer, true);\n    }\n    der.readSequence();\n    var next = der.offset + der.length;\n    var oid = der.readOID();\n    switch(oid){\n        case \"1.2.840.113549.1.1.1\":\n            der._offset = next;\n            if (type === \"public\") return readPkcs8RSAPublic(der);\n            else return readPkcs8RSAPrivate(der);\n        case \"1.2.840.10040.4.1\":\n            if (type === \"public\") return readPkcs8DSAPublic(der);\n            else return readPkcs8DSAPrivate(der);\n        case \"1.2.840.10045.2.1\":\n            if (type === \"public\") return readPkcs8ECDSAPublic(der);\n            else return readPkcs8ECDSAPrivate(der);\n        case \"1.3.101.112\":\n            if (type === \"public\") {\n                return readPkcs8EdDSAPublic(der);\n            } else {\n                return readPkcs8EdDSAPrivate(der);\n            }\n        case \"1.3.101.110\":\n            if (type === \"public\") {\n                return readPkcs8X25519Public(der);\n            } else {\n                return readPkcs8X25519Private(der);\n            }\n        default:\n            throw new Error(\"Unknown key type OID \" + oid);\n    }\n}\nfunction readPkcs8RSAPublic(der) {\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    der.readSequence();\n    // modulus\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"exponent\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        source: der.originalInput,\n        parts: [\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"n\",\n                data: n\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8RSAPrivate(der) {\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var ver = readMPInt(der, \"version\");\n    assert.equal(ver[0], 0x0, \"unknown RSA private key version\");\n    // modulus then public exponent\n    var n = readMPInt(der, \"modulus\");\n    var e = readMPInt(der, \"public exponent\");\n    var d = readMPInt(der, \"private exponent\");\n    var p = readMPInt(der, \"prime1\");\n    var q = readMPInt(der, \"prime2\");\n    var dmodp = readMPInt(der, \"exponent1\");\n    var dmodq = readMPInt(der, \"exponent2\");\n    var iqmp = readMPInt(der, \"iqmp\");\n    // now, make the key\n    var key = {\n        type: \"rsa\",\n        parts: [\n            {\n                name: \"n\",\n                data: n\n            },\n            {\n                name: \"e\",\n                data: e\n            },\n            {\n                name: \"d\",\n                data: d\n            },\n            {\n                name: \"iqmp\",\n                data: iqmp\n            },\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"dmodp\",\n                data: dmodp\n            },\n            {\n                name: \"dmodq\",\n                data: dmodq\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8DSAPublic(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    // bit string sequence\n    der.readSequence(asn1.Ber.BitString);\n    der.readByte();\n    var y = readMPInt(der, \"y\");\n    // now, make the key\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8DSAPrivate(der) {\n    der.readSequence();\n    var p = readMPInt(der, \"p\");\n    var q = readMPInt(der, \"q\");\n    var g = readMPInt(der, \"g\");\n    der.readSequence(asn1.Ber.OctetString);\n    var x = readMPInt(der, \"x\");\n    /* The pkcs#8 format does not include the public key */ var y = utils.calculateDSAPublic(g, p, x);\n    var key = {\n        type: \"dsa\",\n        parts: [\n            {\n                name: \"p\",\n                data: p\n            },\n            {\n                name: \"q\",\n                data: q\n            },\n            {\n                name: \"g\",\n                data: g\n            },\n            {\n                name: \"y\",\n                data: y\n            },\n            {\n                name: \"x\",\n                data: x\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readECDSACurve(der) {\n    var curveName, curveNames;\n    var j, c, cd;\n    if (der.peek() === asn1.Ber.OID) {\n        var oid = der.readOID();\n        curveNames = Object.keys(algs.curves);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            if (cd.pkcs8oid === oid) {\n                curveName = c;\n                break;\n            }\n        }\n    } else {\n        // ECParameters sequence\n        der.readSequence();\n        var version = der.readString(asn1.Ber.Integer, true);\n        assert.strictEqual(version[0], 1, \"ECDSA key not version 1\");\n        var curve = {};\n        // FieldID sequence\n        der.readSequence();\n        var fieldTypeOid = der.readOID();\n        assert.strictEqual(fieldTypeOid, \"1.2.840.10045.1.1\", \"ECDSA key is not from a prime-field\");\n        var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        /*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */ curve.size = p.length * 8 - utils.countZeros(p);\n        // Curve sequence\n        der.readSequence();\n        curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n        if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);\n        // Combined Gx and Gy\n        curve.G = der.readString(asn1.Ber.OctetString, true);\n        assert.strictEqual(curve.G[0], 0x4, \"uncompressed G is required\");\n        curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n        assert.strictEqual(curve.h[0], 0x1, \"a cofactor=1 curve is \" + \"required\");\n        curveNames = Object.keys(algs.curves);\n        var ks = Object.keys(curve);\n        for(j = 0; j < curveNames.length; ++j){\n            c = curveNames[j];\n            cd = algs.curves[c];\n            var equal = true;\n            for(var i = 0; i < ks.length; ++i){\n                var k = ks[i];\n                if (cd[k] === undefined) continue;\n                if (typeof cd[k] === \"object\" && cd[k].equals !== undefined) {\n                    if (!cd[k].equals(curve[k])) {\n                        equal = false;\n                        break;\n                    }\n                } else if (Buffer.isBuffer(cd[k])) {\n                    if (cd[k].toString(\"binary\") !== curve[k].toString(\"binary\")) {\n                        equal = false;\n                        break;\n                    }\n                } else {\n                    if (cd[k] !== curve[k]) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                curveName = c;\n                break;\n            }\n        }\n    }\n    return curveName;\n}\nfunction readPkcs8ECDSAPrivate(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    der.readSequence(asn1.Ber.OctetString);\n    der.readSequence();\n    var version = readMPInt(der, \"version\");\n    assert.equal(version[0], 1, \"unknown version of ECDSA key\");\n    var d = der.readString(asn1.Ber.OctetString, true);\n    var Q;\n    if (der.peek() == 0xa0) {\n        der.readSequence(0xa0);\n        der._offset += der.length;\n    }\n    if (der.peek() == 0xa1) {\n        der.readSequence(0xa1);\n        Q = der.readString(asn1.Ber.BitString, true);\n        Q = utils.ecNormalize(Q);\n    }\n    if (Q === undefined) {\n        var pub = utils.publicFromPrivateECDSA(curveName, d);\n        Q = pub.part.Q.data;\n    }\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            },\n            {\n                name: \"d\",\n                data: d\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8ECDSAPublic(der) {\n    var curveName = readECDSACurve(der);\n    assert.string(curveName, \"a known elliptic curve\");\n    var Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n    var key = {\n        type: \"ecdsa\",\n        parts: [\n            {\n                name: \"curve\",\n                data: Buffer.from(curveName)\n            },\n            {\n                name: \"Q\",\n                data: Q\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPublic(der) {\n    if (der.peek() === 0x00) der.readByte();\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8X25519Public(der) {\n    var A = utils.readBitString(der);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            }\n        ]\n    };\n    return new Key(key);\n}\nfunction readPkcs8EdDSAPrivate(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A, tag;\n    while((tag = der.peek()) !== null){\n        if (tag === (asn1.Ber.Context | 1)) {\n            A = utils.readBitString(der, tag);\n        } else {\n            der.readSequence(tag);\n            der._offset += der.length;\n        }\n    }\n    if (A === undefined) A = utils.calculateED25519Public(k);\n    var key = {\n        type: \"ed25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction readPkcs8X25519Private(der) {\n    if (der.peek() === 0x00) der.readByte();\n    der.readSequence(asn1.Ber.OctetString);\n    var k = der.readString(asn1.Ber.OctetString, true);\n    k = utils.zeroPadToLength(k, 32);\n    var A = utils.calculateX25519Public(k);\n    var key = {\n        type: \"curve25519\",\n        parts: [\n            {\n                name: \"A\",\n                data: utils.zeroPadToLength(A, 32)\n            },\n            {\n                name: \"k\",\n                data: utils.zeroPadToLength(k, 32)\n            }\n        ]\n    };\n    return new PrivateKey(key);\n}\nfunction pkcs8ToBuffer(key) {\n    var der = new asn1.BerWriter();\n    writePkcs8(der, key);\n    return der.buffer;\n}\nfunction writePkcs8(der, key) {\n    der.startSequence();\n    if (PrivateKey.isPrivateKey(key)) {\n        var version = 0;\n        if (key.type === \"ed25519\") version = 1;\n        var vbuf = Buffer.from([\n            version\n        ]);\n        der.writeBuffer(vbuf, asn1.Ber.Integer);\n    }\n    der.startSequence();\n    switch(key.type){\n        case \"rsa\":\n            der.writeOID(\"1.2.840.113549.1.1.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);\n            else writePkcs8RSAPublic(key, der);\n            break;\n        case \"dsa\":\n            der.writeOID(\"1.2.840.10040.4.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);\n            else writePkcs8DSAPublic(key, der);\n            break;\n        case \"ecdsa\":\n            der.writeOID(\"1.2.840.10045.2.1\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);\n            else writePkcs8ECDSAPublic(key, der);\n            break;\n        case \"ed25519\":\n            der.writeOID(\"1.3.101.112\");\n            if (PrivateKey.isPrivateKey(key)) writePkcs8EdDSAPrivate(key, der);\n            else writePkcs8EdDSAPublic(key, der);\n            break;\n        default:\n            throw new Error(\"Unsupported key type: \" + key.type);\n    }\n    der.endSequence();\n}\nfunction writePkcs8RSAPrivate(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        0\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8RSAPublic(key, der) {\n    der.writeNull();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.startSequence();\n    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8DSAPrivate(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writePkcs8DSAPublic(key, der) {\n    der.startSequence();\n    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n    der.endSequence();\n    der.endSequence();\n    der.startSequence(asn1.Ber.BitString);\n    der.writeByte(0x00);\n    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n    der.endSequence();\n}\nfunction writeECDSACurve(key, der) {\n    var curve = algs.curves[key.curve];\n    if (curve.pkcs8oid) {\n        /* This one has a name in pkcs#8, so just write the oid */ der.writeOID(curve.pkcs8oid);\n    } else {\n        // ECParameters sequence\n        der.startSequence();\n        var version = Buffer.from([\n            1\n        ]);\n        der.writeBuffer(version, asn1.Ber.Integer);\n        // FieldID sequence\n        der.startSequence();\n        der.writeOID(\"1.2.840.10045.1.1\"); // prime-field\n        der.writeBuffer(curve.p, asn1.Ber.Integer);\n        der.endSequence();\n        // Curve sequence\n        der.startSequence();\n        var a = curve.p;\n        if (a[0] === 0x0) a = a.slice(1);\n        der.writeBuffer(a, asn1.Ber.OctetString);\n        der.writeBuffer(curve.b, asn1.Ber.OctetString);\n        der.writeBuffer(curve.s, asn1.Ber.BitString);\n        der.endSequence();\n        der.writeBuffer(curve.G, asn1.Ber.OctetString);\n        der.writeBuffer(curve.n, asn1.Ber.Integer);\n        var h = curve.h;\n        if (!h) {\n            h = Buffer.from([\n                1\n            ]);\n        }\n        der.writeBuffer(h, asn1.Ber.Integer);\n        // ECParameters\n        der.endSequence();\n    }\n}\nfunction writePkcs8ECDSAPublic(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n}\nfunction writePkcs8ECDSAPrivate(key, der) {\n    writeECDSACurve(key, der);\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    der.startSequence();\n    var version = Buffer.from([\n        1\n    ]);\n    der.writeBuffer(version, asn1.Ber.Integer);\n    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n    der.startSequence(0xa1);\n    var Q = utils.ecNormalize(key.part.Q.data, true);\n    der.writeBuffer(Q, asn1.Ber.BitString);\n    der.endSequence();\n    der.endSequence();\n    der.endSequence();\n}\nfunction writePkcs8EdDSAPublic(key, der) {\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data);\n}\nfunction writePkcs8EdDSAPrivate(key, der) {\n    der.endSequence();\n    der.startSequence(asn1.Ber.OctetString);\n    var k = utils.mpNormalize(key.part.k.data);\n    /* RFCs call for storing exactly 32 bytes, so strip any leading zeros */ while(k.length > 32 && k[0] === 0x00)k = k.slice(1);\n    der.writeBuffer(k, asn1.Ber.OctetString);\n    der.endSequence();\n    utils.writeBitString(der, key.part.A.data, asn1.Ber.Context | 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/putty.js":
/*!*************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/putty.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n    var lines = buf.toString(\"ascii\").split(/[\\r\\n]+/);\n    var found = false;\n    var parts;\n    var si = 0;\n    var formatVersion;\n    while(si < lines.length){\n        parts = splitHeader(lines[si++]);\n        if (parts) {\n            formatVersion = ({\n                \"putty-user-key-file-2\": 2,\n                \"putty-user-key-file-3\": 3\n            })[parts[0].toLowerCase()];\n            if (formatVersion) {\n                found = true;\n                break;\n            }\n        }\n    }\n    if (!found) {\n        throw new Error(\"No PuTTY format first line found\");\n    }\n    var alg = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"encryption\");\n    var encryption = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"comment\");\n    var comment = parts[1];\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), \"public-lines\");\n    var publicLines = parseInt(parts[1], 10);\n    if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n        throw new Error(\"Invalid public-lines count\");\n    }\n    var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(\"\"), \"base64\");\n    var keyType = rfc4253.algToKeyType(alg);\n    var key = rfc4253.read(publicBuf);\n    if (key.type !== keyType) {\n        throw new Error(\"Outer key algorithm mismatch\");\n    }\n    si += publicLines;\n    if (lines[si]) {\n        parts = splitHeader(lines[si++]);\n        assert.equal(parts[0].toLowerCase(), \"private-lines\");\n        var privateLines = parseInt(parts[1], 10);\n        if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n            throw new Error(\"Invalid private-lines count\");\n        }\n        var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(\"\"), \"base64\");\n        if (encryption !== \"none\" && formatVersion === 3) {\n            throw new Error(\"Encrypted keys arenot supported for\" + \" PuTTY format version 3\");\n        }\n        if (encryption === \"aes256-cbc\") {\n            if (!options.passphrase) {\n                throw new errors.KeyEncryptedError(options.filename, \"PEM\");\n            }\n            var iv = Buffer.alloc(16, 0);\n            var decipher = crypto.createDecipheriv(\"aes-256-cbc\", derivePPK2EncryptionKey(options.passphrase), iv);\n            decipher.setAutoPadding(false);\n            privateBuf = Buffer.concat([\n                decipher.update(privateBuf),\n                decipher.final()\n            ]);\n        }\n        key = new PrivateKey(key);\n        if (key.type !== keyType) {\n            throw new Error(\"Outer key algorithm mismatch\");\n        }\n        var sshbuf = new SSHBuffer({\n            buffer: privateBuf\n        });\n        var privateKeyParts;\n        if (alg === \"ssh-dss\") {\n            privateKeyParts = [\n                {\n                    name: \"x\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-rsa\") {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"p\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"q\",\n                    data: sshbuf.readBuffer()\n                },\n                {\n                    name: \"iqmp\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n            privateKeyParts = [\n                {\n                    name: \"d\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else if (alg === \"ssh-ed25519\") {\n            privateKeyParts = [\n                {\n                    name: \"k\",\n                    data: sshbuf.readBuffer()\n                }\n            ];\n        } else {\n            throw new Error(\"Unsupported PPK key type: \" + alg);\n        }\n        key = new PrivateKey({\n            type: key.type,\n            parts: key.parts.concat(privateKeyParts)\n        });\n    }\n    key.comment = comment;\n    return key;\n}\nfunction derivePPK2EncryptionKey(passphrase) {\n    var hash1 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            0\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    var hash2 = crypto.createHash(\"sha1\").update(Buffer.concat([\n        Buffer.from([\n            0,\n            0,\n            0,\n            1\n        ]),\n        Buffer.from(passphrase)\n    ])).digest();\n    return Buffer.concat([\n        hash1,\n        hash2\n    ]).slice(0, 32);\n}\nfunction splitHeader(line) {\n    var idx = line.indexOf(\":\");\n    if (idx === -1) return null;\n    var header = line.slice(0, idx);\n    ++idx;\n    while(line[idx] === \" \")++idx;\n    var rest = line.slice(idx);\n    return [\n        header,\n        rest\n    ];\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var alg = rfc4253.keyTypeToAlg(key);\n    var buf = rfc4253.write(key);\n    var comment = key.comment || \"\";\n    var b64 = buf.toString(\"base64\");\n    var lines = wrap(b64, 64);\n    lines.unshift(\"Public-Lines: \" + lines.length);\n    lines.unshift(\"Comment: \" + comment);\n    lines.unshift(\"Encryption: none\");\n    lines.unshift(\"PuTTY-User-Key-File-2: \" + alg);\n    return Buffer.from(lines.join(\"\\n\") + \"\\n\");\n}\nfunction wrap(txt, len) {\n    var lines = [];\n    var pos = 0;\n    while(pos < txt.length){\n        lines.push(txt.slice(pos, pos + 64));\n        pos += 64;\n    }\n    return lines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/putty.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js":
/*!***************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/rfc4253.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read.bind(undefined, false, undefined),\n    readType: read.bind(undefined, false),\n    write: write,\n    /* semi-private api, used by sshpk-agent */ readPartial: read.bind(undefined, true),\n    /* shared with ssh format */ readInternal: read,\n    keyTypeToAlg: keyTypeToAlg,\n    algToKeyType: algToKeyType\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nfunction algToKeyType(alg) {\n    assert.string(alg);\n    if (alg === \"ssh-dss\") return \"dsa\";\n    else if (alg === \"ssh-rsa\") return \"rsa\";\n    else if (alg === \"ssh-ed25519\") return \"ed25519\";\n    else if (alg === \"ssh-curve25519\") return \"curve25519\";\n    else if (alg.match(/^ecdsa-sha2-/)) return \"ecdsa\";\n    else throw new Error(\"Unknown algorithm \" + alg);\n}\nfunction keyTypeToAlg(key) {\n    assert.object(key);\n    if (key.type === \"dsa\") return \"ssh-dss\";\n    else if (key.type === \"rsa\") return \"ssh-rsa\";\n    else if (key.type === \"ed25519\") return \"ssh-ed25519\";\n    else if (key.type === \"curve25519\") return \"ssh-curve25519\";\n    else if (key.type === \"ecdsa\") return \"ecdsa-sha2-\" + key.part.curve.data.toString();\n    else throw new Error(\"Unknown key type \" + key.type);\n}\nfunction read(partial, type, buf, options) {\n    if (typeof buf === \"string\") buf = Buffer.from(buf);\n    assert.buffer(buf, \"buf\");\n    var key = {};\n    var parts = key.parts = [];\n    var sshbuf = new SSHBuffer({\n        buffer: buf\n    });\n    var alg = sshbuf.readString();\n    assert.ok(!sshbuf.atEnd(), \"key must have at least one part\");\n    key.type = algToKeyType(alg);\n    var partCount = algs.info[key.type].parts.length;\n    if (type && type === \"private\") partCount = algs.privInfo[key.type].parts.length;\n    while(!sshbuf.atEnd() && parts.length < partCount)parts.push(sshbuf.readPart());\n    while(!partial && !sshbuf.atEnd())parts.push(sshbuf.readPart());\n    assert.ok(parts.length >= 1, \"key must have at least one part\");\n    assert.ok(partial || sshbuf.atEnd(), \"leftover bytes at end of key\");\n    var Constructor = Key;\n    var algInfo = algs.info[key.type];\n    if (type === \"private\" || algInfo.parts.length !== parts.length) {\n        algInfo = algs.privInfo[key.type];\n        Constructor = PrivateKey;\n    }\n    assert.strictEqual(algInfo.parts.length, parts.length);\n    if (key.type === \"ecdsa\") {\n        var res = /^ecdsa-sha2-(.+)$/.exec(alg);\n        assert.ok(res !== null);\n        assert.strictEqual(res[1], parts[0].data.toString());\n    }\n    var normalized = true;\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = parts[i];\n        p.name = algInfo.parts[i];\n        /*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */ if (key.type === \"ed25519\" && p.name === \"k\") p.data = p.data.slice(0, 32);\n        if (p.name !== \"curve\" && algInfo.normalize !== false) {\n            var nd;\n            if (key.type === \"ed25519\") {\n                nd = utils.zeroPadToLength(p.data, 32);\n            } else {\n                nd = utils.mpNormalize(p.data);\n            }\n            if (nd.toString(\"binary\") !== p.data.toString(\"binary\")) {\n                p.data = nd;\n                normalized = false;\n            }\n        }\n    }\n    if (normalized) key._rfc4253Cache = sshbuf.toBuffer();\n    if (partial && typeof partial === \"object\") {\n        partial.remainder = sshbuf.remainder();\n        partial.consumed = sshbuf._offset;\n    }\n    return new Constructor(key);\n}\nfunction write(key, options) {\n    assert.object(key);\n    var alg = keyTypeToAlg(key);\n    var i;\n    var algInfo = algs.info[key.type];\n    if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];\n    var parts = algInfo.parts;\n    var buf = new SSHBuffer({});\n    buf.writeString(alg);\n    for(i = 0; i < parts.length; ++i){\n        var data = key.part[parts[i]].data;\n        if (algInfo.normalize !== false) {\n            if (key.type === \"ed25519\") data = utils.zeroPadToLength(data, 32);\n            else data = utils.mpNormalize(data);\n        }\n        if (key.type === \"ed25519\" && parts[i] === \"k\") data = Buffer.concat([\n            data,\n            key.part.A.data\n        ]);\n        buf.writeBuffer(data);\n    }\n    return buf.toBuffer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js":
/*!*******************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh-private.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    readSSHPrivate: readSSHPrivate,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar SSHBuffer = __webpack_require__(/*! ../ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar bcrypt;\nfunction read(buf, options) {\n    return pem.read(buf, options);\n}\nvar MAGIC = \"openssh-key-v1\";\nfunction readSSHPrivate(type, buf, options) {\n    buf = new SSHBuffer({\n        buffer: buf\n    });\n    var magic = buf.readCString();\n    assert.strictEqual(magic, MAGIC, \"bad magic string\");\n    var cipher = buf.readString();\n    var kdf = buf.readString();\n    var kdfOpts = buf.readBuffer();\n    var nkeys = buf.readInt();\n    if (nkeys !== 1) {\n        throw new Error(\"OpenSSH-format key file contains \" + \"multiple keys: this is unsupported.\");\n    }\n    var pubKey = buf.readBuffer();\n    if (type === \"public\") {\n        assert.ok(buf.atEnd(), \"excess bytes left after key\");\n        return rfc4253.read(pubKey);\n    }\n    var privKeyBlob = buf.readBuffer();\n    assert.ok(buf.atEnd(), \"excess bytes left after key\");\n    var kdfOptsBuf = new SSHBuffer({\n        buffer: kdfOpts\n    });\n    switch(kdf){\n        case \"none\":\n            if (cipher !== \"none\") {\n                throw new Error('OpenSSH-format key uses KDF \"none\" ' + 'but specifies a cipher other than \"none\"');\n            }\n            break;\n        case \"bcrypt\":\n            var salt = kdfOptsBuf.readBuffer();\n            var rounds = kdfOptsBuf.readInt();\n            var cinf = utils.opensshCipherInfo(cipher);\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            if (typeof options.passphrase === \"string\") {\n                options.passphrase = Buffer.from(options.passphrase, \"utf-8\");\n            }\n            if (!Buffer.isBuffer(options.passphrase)) {\n                throw new errors.KeyEncryptedError(options.filename, \"OpenSSH\");\n            }\n            var pass = new Uint8Array(options.passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                if (e.toString().indexOf(\"bad decrypt\") !== -1) {\n                    throw new Error(\"Incorrect passphrase \" + \"supplied, could not decrypt key\");\n                }\n                throw e;\n            });\n            cipherStream.write(privKeyBlob);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privKeyBlob = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error('OpenSSH-format key uses unknown KDF \"' + kdf + '\"');\n    }\n    buf = new SSHBuffer({\n        buffer: privKeyBlob\n    });\n    var checkInt1 = buf.readInt();\n    var checkInt2 = buf.readInt();\n    if (checkInt1 !== checkInt2) {\n        throw new Error(\"Incorrect passphrase supplied, could not \" + \"decrypt key\");\n    }\n    var ret = {};\n    var key = rfc4253.readInternal(ret, \"private\", buf.remainder());\n    buf.skip(ret.consumed);\n    var comment = buf.readString();\n    key.comment = comment;\n    return key;\n}\nfunction write(key, options) {\n    var pubKey;\n    if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();\n    else pubKey = key;\n    var cipher = \"none\";\n    var kdf = \"none\";\n    var kdfopts = Buffer.alloc(0);\n    var cinf = {\n        blockSize: 8\n    };\n    var passphrase;\n    if (options !== undefined) {\n        passphrase = options.passphrase;\n        if (typeof passphrase === \"string\") passphrase = Buffer.from(passphrase, \"utf-8\");\n        if (passphrase !== undefined) {\n            assert.buffer(passphrase, \"options.passphrase\");\n            assert.optionalString(options.cipher, \"options.cipher\");\n            cipher = options.cipher;\n            if (cipher === undefined) cipher = \"aes128-ctr\";\n            cinf = utils.opensshCipherInfo(cipher);\n            kdf = \"bcrypt\";\n        }\n    }\n    var privBuf;\n    if (PrivateKey.isPrivateKey(key)) {\n        privBuf = new SSHBuffer({});\n        var checkInt = crypto.randomBytes(4).readUInt32BE(0);\n        privBuf.writeInt(checkInt);\n        privBuf.writeInt(checkInt);\n        privBuf.write(key.toBuffer(\"rfc4253\"));\n        privBuf.writeString(key.comment || \"\");\n        var n = 1;\n        while(privBuf._offset % cinf.blockSize !== 0)privBuf.writeChar(n++);\n        privBuf = privBuf.toBuffer();\n    }\n    switch(kdf){\n        case \"none\":\n            break;\n        case \"bcrypt\":\n            var salt = crypto.randomBytes(16);\n            var rounds = 16;\n            var kdfssh = new SSHBuffer({});\n            kdfssh.writeBuffer(salt);\n            kdfssh.writeInt(rounds);\n            kdfopts = kdfssh.toBuffer();\n            if (bcrypt === undefined) {\n                bcrypt = __webpack_require__(/*! bcrypt-pbkdf */ \"(rsc)/./node_modules/bcrypt-pbkdf/index.js\");\n            }\n            var pass = new Uint8Array(passphrase);\n            var salti = new Uint8Array(salt);\n            /* Use the pbkdf to derive both the key and the IV. */ var out = new Uint8Array(cinf.keySize + cinf.blockSize);\n            var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);\n            if (res !== 0) {\n                throw new Error(\"bcrypt_pbkdf function returned \" + \"failure, parameters invalid\");\n            }\n            out = Buffer.from(out);\n            var ckey = out.slice(0, cinf.keySize);\n            var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n            var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);\n            cipherStream.setAutoPadding(false);\n            var chunk, chunks = [];\n            cipherStream.once(\"error\", function(e) {\n                throw e;\n            });\n            cipherStream.write(privBuf);\n            cipherStream.end();\n            while((chunk = cipherStream.read()) !== null)chunks.push(chunk);\n            privBuf = Buffer.concat(chunks);\n            break;\n        default:\n            throw new Error(\"Unsupported kdf \" + kdf);\n    }\n    var buf = new SSHBuffer({});\n    buf.writeCString(MAGIC);\n    buf.writeString(cipher); /* cipher */ \n    buf.writeString(kdf); /* kdf */ \n    buf.writeBuffer(kdfopts); /* kdfoptions */ \n    buf.writeInt(1); /* nkeys */ \n    buf.writeBuffer(pubKey.toBuffer(\"rfc4253\"));\n    if (privBuf) buf.writeBuffer(privBuf);\n    buf = buf.toBuffer();\n    var header;\n    if (PrivateKey.isPrivateKey(key)) header = \"OPENSSH PRIVATE KEY\";\n    else header = \"OPENSSH PUBLIC KEY\";\n    var tmp = buf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;\n    buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 70;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/ssh.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/formats/ssh.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar rfc4253 = __webpack_require__(/*! ./rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar sshpriv = __webpack_require__(/*! ./ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\n/*JSSTYLED*/ var SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/ var SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var trimmed = buf.trim().replace(/[\\\\\\r]/g, \"\");\n    var m = trimmed.match(SSHKEY_RE);\n    if (!m) m = trimmed.match(SSHKEY_RE2);\n    assert.ok(m, \"key must match regex\");\n    var type = rfc4253.algToKeyType(m[1]);\n    var kbuf = Buffer.from(m[2], \"base64\");\n    /*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */ var key;\n    var ret = {};\n    if (m[4]) {\n        try {\n            key = rfc4253.read(kbuf);\n        } catch (e) {\n            m = trimmed.match(SSHKEY_RE2);\n            assert.ok(m, \"key must match regex\");\n            kbuf = Buffer.from(m[2], \"base64\");\n            key = rfc4253.readInternal(ret, \"public\", kbuf);\n        }\n    } else {\n        key = rfc4253.readInternal(ret, \"public\", kbuf);\n    }\n    assert.strictEqual(type, key.type);\n    if (m[4] && m[4].length > 0) {\n        key.comment = m[4];\n    } else if (ret.consumed) {\n        /*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */ var data = m[2] + (m[3] ? m[3] : \"\");\n        var realOffset = Math.ceil(ret.consumed / 3) * 4;\n        data = data.slice(0, realOffset - 2)./*JSSTYLED*/ replace(/[^a-zA-Z0-9+\\/=]/g, \"\") + data.slice(realOffset - 2);\n        var padding = ret.consumed % 3;\n        if (padding > 0 && data.slice(realOffset - 1, realOffset) !== \"=\") realOffset--;\n        while(data.slice(realOffset, realOffset + 1) === \"=\")realOffset++;\n        /* Finally, grab what we think is the comment & clean it up. */ var trailer = data.slice(realOffset);\n        trailer = trailer.replace(/[\\r\\n]/g, \" \").replace(/^\\s+/, \"\");\n        if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n    }\n    return key;\n}\nfunction write(key, options) {\n    assert.object(key);\n    if (!Key.isKey(key)) throw new Error(\"Must be a public key\");\n    var parts = [];\n    var alg = rfc4253.keyTypeToAlg(key);\n    parts.push(alg);\n    var buf = rfc4253.write(key);\n    parts.push(buf.toString(\"base64\"));\n    if (key.comment) parts.push(key.comment);\n    return Buffer.from(parts.join(\" \"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMvc3NoLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUJBLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsTUFBTUE7SUFDTkMsT0FBT0E7QUFDUjtBQUVBLElBQUlDLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFNBQVNELDhGQUE4QjtBQUMzQyxJQUFJRSxVQUFVRixtQkFBT0EsQ0FBQztBQUN0QixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJSSxNQUFNSixtQkFBT0EsQ0FBQztBQUNsQixJQUFJSyxhQUFhTCxtQkFBT0EsQ0FBQztBQUV6QixJQUFJTSxVQUFVTixtQkFBT0EsQ0FBQztBQUV0QixVQUFVLEdBQ1YsSUFBSU8sWUFBWTtBQUNoQixVQUFVLEdBQ1YsSUFBSUMsYUFBYTtBQUVqQixTQUFTWCxLQUFLWSxHQUFHLEVBQUVDLE9BQU87SUFDekIsSUFBSSxPQUFRRCxRQUFTLFVBQVU7UUFDOUJWLE9BQU9ZLE1BQU0sQ0FBQ0YsS0FBSztRQUNuQkEsTUFBTUEsSUFBSUcsUUFBUSxDQUFDO0lBQ3BCO0lBRUEsSUFBSUMsVUFBVUosSUFBSUssSUFBSSxHQUFHQyxPQUFPLENBQUMsV0FBVztJQUM1QyxJQUFJQyxJQUFJSCxRQUFRSSxLQUFLLENBQUNWO0lBQ3RCLElBQUksQ0FBQ1MsR0FDSkEsSUFBSUgsUUFBUUksS0FBSyxDQUFDVDtJQUNuQlQsT0FBT21CLEVBQUUsQ0FBQ0YsR0FBRztJQUViLElBQUlHLE9BQU9qQixRQUFRa0IsWUFBWSxDQUFDSixDQUFDLENBQUMsRUFBRTtJQUNwQyxJQUFJSyxPQUFPcEIsT0FBT3FCLElBQUksQ0FBQ04sQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUU3Qjs7Ozs7OztFQU9DLEdBQ0QsSUFBSU87SUFDSixJQUFJQyxNQUFNLENBQUM7SUFDWCxJQUFJUixDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ1QsSUFBSTtZQUNITyxNQUFNckIsUUFBUUwsSUFBSSxDQUFDd0I7UUFFcEIsRUFBRSxPQUFPSSxHQUFHO1lBQ1hULElBQUlILFFBQVFJLEtBQUssQ0FBQ1Q7WUFDbEJULE9BQU9tQixFQUFFLENBQUNGLEdBQUc7WUFDYkssT0FBT3BCLE9BQU9xQixJQUFJLENBQUNOLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDekJPLE1BQU1yQixRQUFRd0IsWUFBWSxDQUFDRixLQUFLLFVBQVVIO1FBQzNDO0lBQ0QsT0FBTztRQUNORSxNQUFNckIsUUFBUXdCLFlBQVksQ0FBQ0YsS0FBSyxVQUFVSDtJQUMzQztJQUVBdEIsT0FBTzRCLFdBQVcsQ0FBQ1IsTUFBTUksSUFBSUosSUFBSTtJQUVqQyxJQUFJSCxDQUFDLENBQUMsRUFBRSxJQUFJQSxDQUFDLENBQUMsRUFBRSxDQUFDWSxNQUFNLEdBQUcsR0FBRztRQUM1QkwsSUFBSU0sT0FBTyxHQUFHYixDQUFDLENBQUMsRUFBRTtJQUVuQixPQUFPLElBQUlRLElBQUlNLFFBQVEsRUFBRTtRQUN4Qjs7Ozs7OztHQU9DLEdBQ0QsSUFBSUMsT0FBT2YsQ0FBQyxDQUFDLEVBQUUsR0FBSUEsQ0FBQUEsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFDO1FBQ2xDLElBQUlnQixhQUFhQyxLQUFLQyxJQUFJLENBQUNWLElBQUlNLFFBQVEsR0FBRyxLQUFLO1FBQy9DQyxPQUFPQSxLQUFLSSxLQUFLLENBQUMsR0FBR0gsYUFBYSxHQUFJLFVBQVUsR0FDNUNqQixPQUFPLENBQUMscUJBQXFCLE1BQzdCZ0IsS0FBS0ksS0FBSyxDQUFDSCxhQUFhO1FBRTVCLElBQUlJLFVBQVVaLElBQUlNLFFBQVEsR0FBRztRQUM3QixJQUFJTSxVQUFVLEtBQ1ZMLEtBQUtJLEtBQUssQ0FBQ0gsYUFBYSxHQUFHQSxnQkFBZ0IsS0FDOUNBO1FBQ0QsTUFBT0QsS0FBS0ksS0FBSyxDQUFDSCxZQUFZQSxhQUFhLE9BQU8sSUFDakRBO1FBRUQsNkRBQTZELEdBQzdELElBQUlLLFVBQVVOLEtBQUtJLEtBQUssQ0FBQ0g7UUFDekJLLFVBQVVBLFFBQVF0QixPQUFPLENBQUMsV0FBVyxLQUNqQ0EsT0FBTyxDQUFDLFFBQVE7UUFDcEIsSUFBSXNCLFFBQVFwQixLQUFLLENBQUMsaUJBQ2pCTSxJQUFJTSxPQUFPLEdBQUdRO0lBQ2hCO0lBRUEsT0FBUWQ7QUFDVDtBQUVBLFNBQVN6QixNQUFNeUIsR0FBRyxFQUFFYixPQUFPO0lBQzFCWCxPQUFPdUMsTUFBTSxDQUFDZjtJQUNkLElBQUksQ0FBQ25CLElBQUltQyxLQUFLLENBQUNoQixNQUNkLE1BQU8sSUFBSWlCLE1BQU07SUFFbEIsSUFBSUMsUUFBUSxFQUFFO0lBQ2QsSUFBSUMsTUFBTXhDLFFBQVF5QyxZQUFZLENBQUNwQjtJQUMvQmtCLE1BQU1HLElBQUksQ0FBQ0Y7SUFFWCxJQUFJakMsTUFBTVAsUUFBUUosS0FBSyxDQUFDeUI7SUFDeEJrQixNQUFNRyxJQUFJLENBQUNuQyxJQUFJRyxRQUFRLENBQUM7SUFFeEIsSUFBSVcsSUFBSU0sT0FBTyxFQUNkWSxNQUFNRyxJQUFJLENBQUNyQixJQUFJTSxPQUFPO0lBRXZCLE9BQVE1QixPQUFPcUIsSUFBSSxDQUFDbUIsTUFBTUksSUFBSSxDQUFDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWF0b29scy1uZXh0Ly4vbm9kZV9tb2R1bGVzL3NzaHBrL2xpYi9mb3JtYXRzL3NzaC5qcz85NmI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0d3JpdGU6IHdyaXRlXG59O1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG52YXIgcmZjNDI1MyA9IHJlcXVpcmUoJy4vcmZjNDI1MycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBLZXkgPSByZXF1aXJlKCcuLi9rZXknKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi4vcHJpdmF0ZS1rZXknKTtcblxudmFyIHNzaHByaXYgPSByZXF1aXJlKCcuL3NzaC1wcml2YXRlJyk7XG5cbi8qSlNTVFlMRUQqL1xudmFyIFNTSEtFWV9SRSA9IC9eKFthLXowLTktXSspWyBcXHRdKyhbYS16QS1aMC05K1xcL10rWz1dKikoWyBcXHRdKyhbXiBcXHRdW15cXG5dKltcXG5dKik/KT8kLztcbi8qSlNTVFlMRUQqL1xudmFyIFNTSEtFWV9SRTIgPSAvXihbYS16MC05LV0rKVsgXFx0XFxuXSsoW2EtekEtWjAtOStcXC9dW2EtekEtWjAtOStcXC8gXFx0XFxuPV0qKShbXmEtekEtWjAtOStcXC8gXFx0XFxuPV0uKik/JC87XG5cbmZ1bmN0aW9uIHJlYWQoYnVmLCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgKGJ1ZikgIT09ICdzdHJpbmcnKSB7XG5cdFx0YXNzZXJ0LmJ1ZmZlcihidWYsICdidWYnKTtcblx0XHRidWYgPSBidWYudG9TdHJpbmcoJ2FzY2lpJyk7XG5cdH1cblxuXHR2YXIgdHJpbW1lZCA9IGJ1Zi50cmltKCkucmVwbGFjZSgvW1xcXFxcXHJdL2csICcnKTtcblx0dmFyIG0gPSB0cmltbWVkLm1hdGNoKFNTSEtFWV9SRSk7XG5cdGlmICghbSlcblx0XHRtID0gdHJpbW1lZC5tYXRjaChTU0hLRVlfUkUyKTtcblx0YXNzZXJ0Lm9rKG0sICdrZXkgbXVzdCBtYXRjaCByZWdleCcpO1xuXG5cdHZhciB0eXBlID0gcmZjNDI1My5hbGdUb0tleVR5cGUobVsxXSk7XG5cdHZhciBrYnVmID0gQnVmZmVyLmZyb20obVsyXSwgJ2Jhc2U2NCcpO1xuXG5cdC8qXG5cdCAqIFRoaXMgaXMgYSBiaXQgdHJpY2t5LiBJZiB3ZSBtYW5hZ2VkIHRvIHBhcnNlIHRoZSBrZXkgYW5kIGxvY2F0ZSB0aGVcblx0ICoga2V5IGNvbW1lbnQgd2l0aCB0aGUgcmVnZXgsIHRoZW4gZG8gYSBub24tcGFydGlhbCByZWFkIGFuZCBhc3NlcnRcblx0ICogdGhhdCB3ZSBoYXZlIGNvbnN1bWVkIGFsbCBieXRlcy4gSWYgd2UgY291bGRuJ3QgbG9jYXRlIHRoZSBrZXlcblx0ICogY29tbWVudCwgdGhvdWdoLCB0aGVyZSBtYXkgYmUgd2hpdGVzcGFjZSBzaGVuYW5pZ2FucyBnb2luZyBvbiB0aGF0XG5cdCAqIGhhdmUgY29uam9pbmVkIHRoZSBjb21tZW50IHRvIHRoZSByZXN0IG9mIHRoZSBrZXkuIFdlIGRvIGEgcGFydGlhbFxuXHQgKiByZWFkIGluIHRoaXMgY2FzZSB0byB0cnkgdG8gbWFrZSB0aGUgYmVzdCBvdXQgb2YgYSBzb3JyeSBzaXR1YXRpb24uXG5cdCAqL1xuXHR2YXIga2V5O1xuXHR2YXIgcmV0ID0ge307XG5cdGlmIChtWzRdKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGtleSA9IHJmYzQyNTMucmVhZChrYnVmKTtcblxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG0gPSB0cmltbWVkLm1hdGNoKFNTSEtFWV9SRTIpO1xuXHRcdFx0YXNzZXJ0Lm9rKG0sICdrZXkgbXVzdCBtYXRjaCByZWdleCcpO1xuXHRcdFx0a2J1ZiA9IEJ1ZmZlci5mcm9tKG1bMl0sICdiYXNlNjQnKTtcblx0XHRcdGtleSA9IHJmYzQyNTMucmVhZEludGVybmFsKHJldCwgJ3B1YmxpYycsIGtidWYpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRrZXkgPSByZmM0MjUzLnJlYWRJbnRlcm5hbChyZXQsICdwdWJsaWMnLCBrYnVmKTtcblx0fVxuXG5cdGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlLCBrZXkudHlwZSk7XG5cblx0aWYgKG1bNF0gJiYgbVs0XS5sZW5ndGggPiAwKSB7XG5cdFx0a2V5LmNvbW1lbnQgPSBtWzRdO1xuXG5cdH0gZWxzZSBpZiAocmV0LmNvbnN1bWVkKSB7XG5cdFx0Lypcblx0XHQgKiBOb3cgdGhlIG1hZ2ljOiB0cnlpbmcgdG8gcmVjb3ZlciB0aGUga2V5IGNvbW1lbnQgd2hlbiBpdCdzXG5cdFx0ICogZ290dGVuIGNvbmpvaW5lZCB0byB0aGUga2V5IG9yIG90aGVyd2lzZSBzaGVuYW5pZ2FuJ2QuXG5cdFx0ICpcblx0XHQgKiBXb3JrIG91dCBob3cgbXVjaCBiYXNlNjQgd2UgdXNlZCwgdGhlbiBkcm9wIGFsbCBub24tYmFzZTY0XG5cdFx0ICogY2hhcnMgZnJvbSB0aGUgYmVnaW5uaW5nIHVwIHRvIHRoaXMgcG9pbnQgaW4gdGhlIHRoZSBzdHJpbmcuXG5cdFx0ICogVGhlbiBvZmZzZXQgaW4gdGhpcyBhbmQgdHJ5IHRvIG1ha2UgdXAgZm9yIG1pc3NpbmcgPSBjaGFycy5cblx0XHQgKi9cblx0XHR2YXIgZGF0YSA9IG1bMl0gKyAobVszXSA/IG1bM10gOiAnJyk7XG5cdFx0dmFyIHJlYWxPZmZzZXQgPSBNYXRoLmNlaWwocmV0LmNvbnN1bWVkIC8gMykgKiA0O1xuXHRcdGRhdGEgPSBkYXRhLnNsaWNlKDAsIHJlYWxPZmZzZXQgLSAyKS4gLypKU1NUWUxFRCovXG5cdFx0ICAgIHJlcGxhY2UoL1teYS16QS1aMC05K1xcLz1dL2csICcnKSArXG5cdFx0ICAgIGRhdGEuc2xpY2UocmVhbE9mZnNldCAtIDIpO1xuXG5cdFx0dmFyIHBhZGRpbmcgPSByZXQuY29uc3VtZWQgJSAzO1xuXHRcdGlmIChwYWRkaW5nID4gMCAmJlxuXHRcdCAgICBkYXRhLnNsaWNlKHJlYWxPZmZzZXQgLSAxLCByZWFsT2Zmc2V0KSAhPT0gJz0nKVxuXHRcdFx0cmVhbE9mZnNldC0tO1xuXHRcdHdoaWxlIChkYXRhLnNsaWNlKHJlYWxPZmZzZXQsIHJlYWxPZmZzZXQgKyAxKSA9PT0gJz0nKVxuXHRcdFx0cmVhbE9mZnNldCsrO1xuXG5cdFx0LyogRmluYWxseSwgZ3JhYiB3aGF0IHdlIHRoaW5rIGlzIHRoZSBjb21tZW50ICYgY2xlYW4gaXQgdXAuICovXG5cdFx0dmFyIHRyYWlsZXIgPSBkYXRhLnNsaWNlKHJlYWxPZmZzZXQpO1xuXHRcdHRyYWlsZXIgPSB0cmFpbGVyLnJlcGxhY2UoL1tcXHJcXG5dL2csICcgJykuXG5cdFx0ICAgIHJlcGxhY2UoL15cXHMrLywgJycpO1xuXHRcdGlmICh0cmFpbGVyLm1hdGNoKC9eW2EtekEtWjAtOV0vKSlcblx0XHRcdGtleS5jb21tZW50ID0gdHJhaWxlcjtcblx0fVxuXG5cdHJldHVybiAoa2V5KTtcbn1cblxuZnVuY3Rpb24gd3JpdGUoa2V5LCBvcHRpb25zKSB7XG5cdGFzc2VydC5vYmplY3Qoa2V5KTtcblx0aWYgKCFLZXkuaXNLZXkoa2V5KSlcblx0XHR0aHJvdyAobmV3IEVycm9yKCdNdXN0IGJlIGEgcHVibGljIGtleScpKTtcblxuXHR2YXIgcGFydHMgPSBbXTtcblx0dmFyIGFsZyA9IHJmYzQyNTMua2V5VHlwZVRvQWxnKGtleSk7XG5cdHBhcnRzLnB1c2goYWxnKTtcblxuXHR2YXIgYnVmID0gcmZjNDI1My53cml0ZShrZXkpO1xuXHRwYXJ0cy5wdXNoKGJ1Zi50b1N0cmluZygnYmFzZTY0JykpO1xuXG5cdGlmIChrZXkuY29tbWVudClcblx0XHRwYXJ0cy5wdXNoKGtleS5jb21tZW50KTtcblxuXHRyZXR1cm4gKEJ1ZmZlci5mcm9tKHBhcnRzLmpvaW4oJyAnKSkpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkIiwid3JpdGUiLCJhc3NlcnQiLCJyZXF1aXJlIiwiQnVmZmVyIiwicmZjNDI1MyIsInV0aWxzIiwiS2V5IiwiUHJpdmF0ZUtleSIsInNzaHByaXYiLCJTU0hLRVlfUkUiLCJTU0hLRVlfUkUyIiwiYnVmIiwib3B0aW9ucyIsImJ1ZmZlciIsInRvU3RyaW5nIiwidHJpbW1lZCIsInRyaW0iLCJyZXBsYWNlIiwibSIsIm1hdGNoIiwib2siLCJ0eXBlIiwiYWxnVG9LZXlUeXBlIiwia2J1ZiIsImZyb20iLCJrZXkiLCJyZXQiLCJlIiwicmVhZEludGVybmFsIiwic3RyaWN0RXF1YWwiLCJsZW5ndGgiLCJjb21tZW50IiwiY29uc3VtZWQiLCJkYXRhIiwicmVhbE9mZnNldCIsIk1hdGgiLCJjZWlsIiwic2xpY2UiLCJwYWRkaW5nIiwidHJhaWxlciIsIm9iamVjdCIsImlzS2V5IiwiRXJyb3IiLCJwYXJ0cyIsImFsZyIsImtleVR5cGVUb0FsZyIsInB1c2giLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/ssh.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js":
/*!****************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509-pem.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2016 Joyent, Inc.\n\nvar x509 = __webpack_require__(/*! ./x509 */ \"(rsc)/./node_modules/sshpk/lib/formats/x509.js\");\nmodule.exports = {\n    read: read,\n    verify: x509.verify,\n    sign: x509.sign,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nfunction read(buf, options) {\n    if (typeof buf !== \"string\") {\n        assert.buffer(buf, \"buf\");\n        buf = buf.toString(\"ascii\");\n    }\n    var lines = buf.trim().split(/[\\r\\n]+/g);\n    var m;\n    var si = -1;\n    while(!m && si < lines.length){\n        m = lines[++si].match(/*JSSTYLED*/ /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m, \"invalid PEM header\");\n    var m2;\n    var ei = lines.length;\n    while(!m2 && ei > 0){\n        m2 = lines[--ei].match(/*JSSTYLED*/ /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n    }\n    assert.ok(m2, \"invalid PEM footer\");\n    lines = lines.slice(si, ei + 1);\n    var headers = {};\n    while(true){\n        lines = lines.slice(1);\n        m = lines[0].match(/*JSSTYLED*/ /^([A-Za-z0-9-]+): (.+)$/);\n        if (!m) break;\n        headers[m[1].toLowerCase()] = m[2];\n    }\n    /* Chop off the first and last lines */ lines = lines.slice(0, -1).join(\"\");\n    buf = Buffer.from(lines, \"base64\");\n    return x509.read(buf, options);\n}\nfunction write(cert, options) {\n    var dbuf = x509.write(cert, options);\n    var header = \"CERTIFICATE\";\n    var tmp = dbuf.toString(\"base64\");\n    var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;\n    var buf = Buffer.alloc(len);\n    var o = 0;\n    o += buf.write(\"-----BEGIN \" + header + \"-----\\n\", o);\n    for(var i = 0; i < tmp.length;){\n        var limit = i + 64;\n        if (limit > tmp.length) limit = tmp.length;\n        o += buf.write(tmp.slice(i, limit), o);\n        buf[o++] = 10;\n        i = limit;\n    }\n    o += buf.write(\"-----END \" + header + \"-----\\n\", o);\n    return buf.slice(0, o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2Zvcm1hdHMveDUwOS1wZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxNQUFNQTtJQUNOQyxRQUFRTCxLQUFLSyxNQUFNO0lBQ25CQyxNQUFNTixLQUFLTSxJQUFJO0lBQ2ZDLE9BQU9BO0FBQ1I7QUFFQSxJQUFJQyxTQUFTUCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNuQixJQUFJUyxTQUFTVCw4RkFBOEI7QUFDM0MsSUFBSVUsT0FBT1YsbUJBQU9BLENBQUM7QUFDbkIsSUFBSVcsUUFBUVgsbUJBQU9BLENBQUM7QUFDcEIsSUFBSVksTUFBTVosbUJBQU9BLENBQUM7QUFDbEIsSUFBSWEsYUFBYWIsbUJBQU9BLENBQUM7QUFDekIsSUFBSWMsTUFBTWQsbUJBQU9BLENBQUM7QUFDbEIsSUFBSWUsV0FBV2YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSWdCLFlBQVloQixtQkFBT0EsQ0FBQztBQUN4QixJQUFJaUIsY0FBY2pCLG1CQUFPQSxDQUFDO0FBRTFCLFNBQVNHLEtBQUtlLEdBQUcsRUFBRUMsT0FBTztJQUN6QixJQUFJLE9BQVFELFFBQVMsVUFBVTtRQUM5QlgsT0FBT2EsTUFBTSxDQUFDRixLQUFLO1FBQ25CQSxNQUFNQSxJQUFJRyxRQUFRLENBQUM7SUFDcEI7SUFFQSxJQUFJQyxRQUFRSixJQUFJSyxJQUFJLEdBQUdDLEtBQUssQ0FBQztJQUU3QixJQUFJQztJQUNKLElBQUlDLEtBQUssQ0FBQztJQUNWLE1BQU8sQ0FBQ0QsS0FBS0MsS0FBS0osTUFBTUssTUFBTSxDQUFFO1FBQy9CRixJQUFJSCxLQUFLLENBQUMsRUFBRUksR0FBRyxDQUFDRSxLQUFLLENBQUMsVUFBVSxHQUM1QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDSixHQUFHO0lBRWIsSUFBSUs7SUFDSixJQUFJQyxLQUFLVCxNQUFNSyxNQUFNO0lBQ3JCLE1BQU8sQ0FBQ0csTUFBTUMsS0FBSyxFQUFHO1FBQ3JCRCxLQUFLUixLQUFLLENBQUMsRUFBRVMsR0FBRyxDQUFDSCxLQUFLLENBQUMsVUFBVSxHQUM3QjtJQUNMO0lBQ0FyQixPQUFPc0IsRUFBRSxDQUFDQyxJQUFJO0lBRWRSLFFBQVFBLE1BQU1VLEtBQUssQ0FBQ04sSUFBSUssS0FBSztJQUU3QixJQUFJRSxVQUFVLENBQUM7SUFDZixNQUFPLEtBQU07UUFDWlgsUUFBUUEsTUFBTVUsS0FBSyxDQUFDO1FBQ3BCUCxJQUFJSCxLQUFLLENBQUMsRUFBRSxDQUFDTSxLQUFLLENBQUMsVUFBVSxHQUN6QjtRQUNKLElBQUksQ0FBQ0gsR0FDSjtRQUNEUSxPQUFPLENBQUNSLENBQUMsQ0FBQyxFQUFFLENBQUNTLFdBQVcsR0FBRyxHQUFHVCxDQUFDLENBQUMsRUFBRTtJQUNuQztJQUVBLHFDQUFxQyxHQUNyQ0gsUUFBUUEsTUFBTVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHRyxJQUFJLENBQUM7SUFDaENqQixNQUFNVCxPQUFPMkIsSUFBSSxDQUFDZCxPQUFPO0lBRXpCLE9BQVF2QixLQUFLSSxJQUFJLENBQUNlLEtBQUtDO0FBQ3hCO0FBRUEsU0FBU2IsTUFBTStCLElBQUksRUFBRWxCLE9BQU87SUFDM0IsSUFBSW1CLE9BQU92QyxLQUFLTyxLQUFLLENBQUMrQixNQUFNbEI7SUFFNUIsSUFBSW9CLFNBQVM7SUFDYixJQUFJQyxNQUFNRixLQUFLakIsUUFBUSxDQUFDO0lBQ3hCLElBQUlvQixNQUFNRCxJQUFJYixNQUFNLEdBQUlhLElBQUliLE1BQU0sR0FBRyxLQUNqQyxLQUFLLEtBQUtZLE9BQU9aLE1BQU0sR0FBQyxJQUFJO0lBQ2hDLElBQUlULE1BQU1ULE9BQU9pQyxLQUFLLENBQUNEO0lBQ3ZCLElBQUlFLElBQUk7SUFDUkEsS0FBS3pCLElBQUlaLEtBQUssQ0FBQyxnQkFBZ0JpQyxTQUFTLFdBQVdJO0lBQ25ELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixJQUFJYixNQUFNLEVBQUk7UUFDakMsSUFBSWtCLFFBQVFELElBQUk7UUFDaEIsSUFBSUMsUUFBUUwsSUFBSWIsTUFBTSxFQUNyQmtCLFFBQVFMLElBQUliLE1BQU07UUFDbkJnQixLQUFLekIsSUFBSVosS0FBSyxDQUFDa0MsSUFBSVIsS0FBSyxDQUFDWSxHQUFHQyxRQUFRRjtRQUNwQ3pCLEdBQUcsQ0FBQ3lCLElBQUksR0FBRztRQUNYQyxJQUFJQztJQUNMO0lBQ0FGLEtBQUt6QixJQUFJWixLQUFLLENBQUMsY0FBY2lDLFNBQVMsV0FBV0k7SUFFakQsT0FBUXpCLElBQUljLEtBQUssQ0FBQyxHQUFHVztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2lhdG9vbHMtbmV4dC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvZm9ybWF0cy94NTA5LXBlbS5qcz8wYTUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2IEpveWVudCwgSW5jLlxuXG52YXIgeDUwOSA9IHJlcXVpcmUoJy4veDUwOScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVhZDogcmVhZCxcblx0dmVyaWZ5OiB4NTA5LnZlcmlmeSxcblx0c2lnbjogeDUwOS5zaWduLFxuXHR3cml0ZTogd3JpdGVcbn07XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xudmFyIGFsZ3MgPSByZXF1aXJlKCcuLi9hbGdzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEtleSA9IHJlcXVpcmUoJy4uL2tleScpO1xudmFyIFByaXZhdGVLZXkgPSByZXF1aXJlKCcuLi9wcml2YXRlLWtleScpO1xudmFyIHBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG52YXIgSWRlbnRpdHkgPSByZXF1aXJlKCcuLi9pZGVudGl0eScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4uL3NpZ25hdHVyZScpO1xudmFyIENlcnRpZmljYXRlID0gcmVxdWlyZSgnLi4vY2VydGlmaWNhdGUnKTtcblxuZnVuY3Rpb24gcmVhZChidWYsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiAoYnVmKSAhPT0gJ3N0cmluZycpIHtcblx0XHRhc3NlcnQuYnVmZmVyKGJ1ZiwgJ2J1ZicpO1xuXHRcdGJ1ZiA9IGJ1Zi50b1N0cmluZygnYXNjaWknKTtcblx0fVxuXG5cdHZhciBsaW5lcyA9IGJ1Zi50cmltKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuXHR2YXIgbTtcblx0dmFyIHNpID0gLTE7XG5cdHdoaWxlICghbSAmJiBzaSA8IGxpbmVzLmxlbmd0aCkge1xuXHRcdG0gPSBsaW5lc1srK3NpXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL1stXStbIF0qQkVHSU4gQ0VSVElGSUNBVEVbIF0qWy1dKy8pO1xuXHR9XG5cdGFzc2VydC5vayhtLCAnaW52YWxpZCBQRU0gaGVhZGVyJyk7XG5cblx0dmFyIG0yO1xuXHR2YXIgZWkgPSBsaW5lcy5sZW5ndGg7XG5cdHdoaWxlICghbTIgJiYgZWkgPiAwKSB7XG5cdFx0bTIgPSBsaW5lc1stLWVpXS5tYXRjaCgvKkpTU1RZTEVEKi9cblx0XHQgICAgL1stXStbIF0qRU5EIENFUlRJRklDQVRFWyBdKlstXSsvKTtcblx0fVxuXHRhc3NlcnQub2sobTIsICdpbnZhbGlkIFBFTSBmb290ZXInKTtcblxuXHRsaW5lcyA9IGxpbmVzLnNsaWNlKHNpLCBlaSArIDEpO1xuXG5cdHZhciBoZWFkZXJzID0ge307XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0bGluZXMgPSBsaW5lcy5zbGljZSgxKTtcblx0XHRtID0gbGluZXNbMF0ubWF0Y2goLypKU1NUWUxFRCovXG5cdFx0ICAgIC9eKFtBLVphLXowLTktXSspOiAoLispJC8pO1xuXHRcdGlmICghbSlcblx0XHRcdGJyZWFrO1xuXHRcdGhlYWRlcnNbbVsxXS50b0xvd2VyQ2FzZSgpXSA9IG1bMl07XG5cdH1cblxuXHQvKiBDaG9wIG9mZiB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZXMgKi9cblx0bGluZXMgPSBsaW5lcy5zbGljZSgwLCAtMSkuam9pbignJyk7XG5cdGJ1ZiA9IEJ1ZmZlci5mcm9tKGxpbmVzLCAnYmFzZTY0Jyk7XG5cblx0cmV0dXJuICh4NTA5LnJlYWQoYnVmLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlKGNlcnQsIG9wdGlvbnMpIHtcblx0dmFyIGRidWYgPSB4NTA5LndyaXRlKGNlcnQsIG9wdGlvbnMpO1xuXG5cdHZhciBoZWFkZXIgPSAnQ0VSVElGSUNBVEUnO1xuXHR2YXIgdG1wID0gZGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG5cdHZhciBsZW4gPSB0bXAubGVuZ3RoICsgKHRtcC5sZW5ndGggLyA2NCkgK1xuXHQgICAgMTggKyAxNiArIGhlYWRlci5sZW5ndGgqMiArIDEwO1xuXHR2YXIgYnVmID0gQnVmZmVyLmFsbG9jKGxlbik7XG5cdHZhciBvID0gMDtcblx0byArPSBidWYud3JpdGUoJy0tLS0tQkVHSU4gJyArIGhlYWRlciArICctLS0tLVxcbicsIG8pO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHRtcC5sZW5ndGg7ICkge1xuXHRcdHZhciBsaW1pdCA9IGkgKyA2NDtcblx0XHRpZiAobGltaXQgPiB0bXAubGVuZ3RoKVxuXHRcdFx0bGltaXQgPSB0bXAubGVuZ3RoO1xuXHRcdG8gKz0gYnVmLndyaXRlKHRtcC5zbGljZShpLCBsaW1pdCksIG8pO1xuXHRcdGJ1ZltvKytdID0gMTA7XG5cdFx0aSA9IGxpbWl0O1xuXHR9XG5cdG8gKz0gYnVmLndyaXRlKCctLS0tLUVORCAnICsgaGVhZGVyICsgJy0tLS0tXFxuJywgbyk7XG5cblx0cmV0dXJuIChidWYuc2xpY2UoMCwgbykpO1xufVxuIl0sIm5hbWVzIjpbIng1MDkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlYWQiLCJ2ZXJpZnkiLCJzaWduIiwid3JpdGUiLCJhc3NlcnQiLCJhc24xIiwiQnVmZmVyIiwiYWxncyIsInV0aWxzIiwiS2V5IiwiUHJpdmF0ZUtleSIsInBlbSIsIklkZW50aXR5IiwiU2lnbmF0dXJlIiwiQ2VydGlmaWNhdGUiLCJidWYiLCJvcHRpb25zIiwiYnVmZmVyIiwidG9TdHJpbmciLCJsaW5lcyIsInRyaW0iLCJzcGxpdCIsIm0iLCJzaSIsImxlbmd0aCIsIm1hdGNoIiwib2siLCJtMiIsImVpIiwic2xpY2UiLCJoZWFkZXJzIiwidG9Mb3dlckNhc2UiLCJqb2luIiwiZnJvbSIsImNlcnQiLCJkYnVmIiwiaGVhZGVyIiwidG1wIiwibGVuIiwiYWxsb2MiLCJvIiwiaSIsImxpbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509-pem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/formats/x509.js":
/*!************************************************!*\
  !*** ./node_modules/sshpk/lib/formats/x509.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n    read: read,\n    verify: verify,\n    sign: sign,\n    signAsync: signAsync,\n    write: write\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ../algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar Key = __webpack_require__(/*! ../key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar PrivateKey = __webpack_require__(/*! ../private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar pem = __webpack_require__(/*! ./pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nvar Identity = __webpack_require__(/*! ../identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar Signature = __webpack_require__(/*! ../signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar Certificate = __webpack_require__(/*! ../certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar pkcs8 = __webpack_require__(/*! ./pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\n/*\n * This file is based on RFC5280 (X.509).\n */ /* Helper to read in a single mpint */ function readMPInt(der, nm) {\n    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + \" is not an Integer\");\n    return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\nfunction verify(cert, key) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var algParts = sig.algo.split(\"-\");\n    if (algParts[0] !== key.type) return false;\n    var blob = sig.cache;\n    if (blob === undefined) {\n        var der = new asn1.BerWriter();\n        writeTBSCert(cert, der);\n        blob = der.buffer;\n    }\n    var verifier = key.createVerify(algParts[1]);\n    verifier.write(blob);\n    return verifier.verify(sig.signature);\n}\nfunction Local(i) {\n    return asn1.Ber.Context | asn1.Ber.Constructor | i;\n}\nfunction Context(i) {\n    return asn1.Ber.Context | i;\n}\nvar SIGN_ALGS = {\n    \"rsa-md5\": \"1.2.840.113549.1.1.4\",\n    \"rsa-sha1\": \"1.2.840.113549.1.1.5\",\n    \"rsa-sha256\": \"1.2.840.113549.1.1.11\",\n    \"rsa-sha384\": \"1.2.840.113549.1.1.12\",\n    \"rsa-sha512\": \"1.2.840.113549.1.1.13\",\n    \"dsa-sha1\": \"1.2.840.10040.4.3\",\n    \"dsa-sha256\": \"2.16.840.1.101.3.4.3.2\",\n    \"ecdsa-sha1\": \"1.2.840.10045.4.1\",\n    \"ecdsa-sha256\": \"1.2.840.10045.4.3.2\",\n    \"ecdsa-sha384\": \"1.2.840.10045.4.3.3\",\n    \"ecdsa-sha512\": \"1.2.840.10045.4.3.4\",\n    \"ed25519-sha512\": \"1.3.101.112\"\n};\nObject.keys(SIGN_ALGS).forEach(function(k) {\n    SIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS[\"1.3.14.3.2.3\"] = \"rsa-md5\";\nSIGN_ALGS[\"1.3.14.3.2.29\"] = \"rsa-sha1\";\nvar EXTS = {\n    \"issuerKeyId\": \"2.5.29.35\",\n    \"altName\": \"2.5.29.17\",\n    \"basicConstraints\": \"2.5.29.19\",\n    \"keyUsage\": \"2.5.29.15\",\n    \"extKeyUsage\": \"2.5.29.37\"\n};\nfunction read(buf, options) {\n    if (typeof buf === \"string\") {\n        buf = Buffer.from(buf, \"binary\");\n    }\n    assert.buffer(buf, \"buf\");\n    var der = new asn1.BerReader(buf);\n    der.readSequence();\n    if (Math.abs(der.length - der.remain) > 1) {\n        throw new Error(\"DER sequence does not contain whole byte \" + \"stream\");\n    }\n    var tbsStart = der.offset;\n    der.readSequence();\n    var sigOffset = der.offset + der.length;\n    var tbsEnd = sigOffset;\n    if (der.peek() === Local(0)) {\n        der.readSequence(Local(0));\n        var version = der.readInt();\n        assert.ok(version <= 3, \"only x.509 versions up to v3 supported\");\n    }\n    var cert = {};\n    cert.signatures = {};\n    var sig = cert.signatures.x509 = {};\n    sig.extras = {};\n    cert.serial = readMPInt(der, \"serial\");\n    der.readSequence();\n    var after = der.offset + der.length;\n    var certAlgOid = der.readOID();\n    var certAlg = SIGN_ALGS[certAlgOid];\n    if (certAlg === undefined) throw new Error(\"unknown signature algorithm \" + certAlgOid);\n    der._offset = after;\n    cert.issuer = Identity.parseAsn1(der);\n    der.readSequence();\n    cert.validFrom = readDate(der);\n    cert.validUntil = readDate(der);\n    cert.subjects = [\n        Identity.parseAsn1(der)\n    ];\n    der.readSequence();\n    after = der.offset + der.length;\n    cert.subjectKey = pkcs8.readPkcs8(undefined, \"public\", der);\n    der._offset = after;\n    /* issuerUniqueID */ if (der.peek() === Local(1)) {\n        der.readSequence(Local(1));\n        sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* subjectUniqueID */ if (der.peek() === Local(2)) {\n        der.readSequence(Local(2));\n        sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);\n        der._offset += der.length;\n    }\n    /* extensions */ if (der.peek() === Local(3)) {\n        der.readSequence(Local(3));\n        var extEnd = der.offset + der.length;\n        der.readSequence();\n        while(der.offset < extEnd)readExtension(cert, buf, der);\n        assert.strictEqual(der.offset, extEnd);\n    }\n    assert.strictEqual(der.offset, sigOffset);\n    der.readSequence();\n    after = der.offset + der.length;\n    var sigAlgOid = der.readOID();\n    var sigAlg = SIGN_ALGS[sigAlgOid];\n    if (sigAlg === undefined) throw new Error(\"unknown signature algorithm \" + sigAlgOid);\n    der._offset = after;\n    var sigData = der.readString(asn1.Ber.BitString, true);\n    if (sigData[0] === 0) sigData = sigData.slice(1);\n    var algParts = sigAlg.split(\"-\");\n    sig.signature = Signature.parse(sigData, algParts[0], \"asn1\");\n    sig.signature.hashAlgorithm = algParts[1];\n    sig.algo = sigAlg;\n    sig.cache = buf.slice(tbsStart, tbsEnd);\n    return new Certificate(cert);\n}\nfunction readDate(der) {\n    if (der.peek() === asn1.Ber.UTCTime) {\n        return utcTimeToDate(der.readString(asn1.Ber.UTCTime));\n    } else if (der.peek() === asn1.Ber.GeneralizedTime) {\n        return gTimeToDate(der.readString(asn1.Ber.GeneralizedTime));\n    } else {\n        throw new Error(\"Unsupported date format\");\n    }\n}\nfunction writeDate(der, date) {\n    if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n        der.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n    } else {\n        der.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n    }\n}\n/* RFC5280, section 4.2.1.6 (GeneralName type) */ var ALTNAME = {\n    OtherName: Local(0),\n    RFC822Name: Context(1),\n    DNSName: Context(2),\n    X400Address: Local(3),\n    DirectoryName: Local(4),\n    EDIPartyName: Local(5),\n    URI: Context(6),\n    IPAddress: Context(7),\n    OID: Context(8)\n};\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */ var EXTPURPOSE = {\n    \"serverAuth\": \"1.3.6.1.5.5.7.3.1\",\n    \"clientAuth\": \"1.3.6.1.5.5.7.3.2\",\n    \"codeSigning\": \"1.3.6.1.5.5.7.3.3\",\n    /* See https://github.com/joyent/oid-docs/blob/master/root.md */ \"joyentDocker\": \"1.3.6.1.4.1.38678.1.4.1\",\n    \"joyentCmon\": \"1.3.6.1.4.1.38678.1.4.2\"\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function(k) {\n    EXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\nvar KEYUSEBITS = [\n    \"signature\",\n    \"identity\",\n    \"keyEncryption\",\n    \"encryption\",\n    \"keyAgreement\",\n    \"ca\",\n    \"crl\"\n];\nfunction readExtension(cert, buf, der) {\n    der.readSequence();\n    var after = der.offset + der.length;\n    var extId = der.readOID();\n    var id;\n    var sig = cert.signatures.x509;\n    if (!sig.extras.exts) sig.extras.exts = [];\n    var critical;\n    if (der.peek() === asn1.Ber.Boolean) critical = der.readBoolean();\n    switch(extId){\n        case EXTS.basicConstraints:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var bcEnd = der.offset + der.length;\n            var ca = false;\n            if (der.peek() === asn1.Ber.Boolean) ca = der.readBoolean();\n            if (cert.purposes === undefined) cert.purposes = [];\n            if (ca === true) cert.purposes.push(\"ca\");\n            var bc = {\n                oid: extId,\n                critical: critical\n            };\n            if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer) bc.pathLen = der.readInt();\n            sig.extras.exts.push(bc);\n            break;\n        case EXTS.extKeyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            if (cert.purposes === undefined) cert.purposes = [];\n            var ekEnd = der.offset + der.length;\n            while(der.offset < ekEnd){\n                var oid = der.readOID();\n                cert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n            }\n            /*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */ if (cert.purposes.indexOf(\"serverAuth\") !== -1 && cert.purposes.indexOf(\"clientAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"host\") {\n                        ide.type = \"host\";\n                        ide.hostname = ide.uid || ide.email || ide.components[0].value;\n                    }\n                });\n            } else if (cert.purposes.indexOf(\"clientAuth\") !== -1 && cert.purposes.indexOf(\"serverAuth\") === -1) {\n                cert.subjects.forEach(function(ide) {\n                    if (ide.type !== \"user\") {\n                        ide.type = \"user\";\n                        ide.uid = ide.hostname || ide.email || ide.components[0].value;\n                    }\n                });\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        case EXTS.keyUsage:\n            der.readSequence(asn1.Ber.OctetString);\n            var bits = der.readString(asn1.Ber.BitString, true);\n            var setBits = readBitField(bits, KEYUSEBITS);\n            setBits.forEach(function(bit) {\n                if (cert.purposes === undefined) cert.purposes = [];\n                if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);\n            });\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                bits: bits\n            });\n            break;\n        case EXTS.altName:\n            der.readSequence(asn1.Ber.OctetString);\n            der.readSequence();\n            var aeEnd = der.offset + der.length;\n            while(der.offset < aeEnd){\n                switch(der.peek()){\n                    case ALTNAME.OtherName:\n                    case ALTNAME.EDIPartyName:\n                        der.readSequence();\n                        der._offset += der.length;\n                        break;\n                    case ALTNAME.OID:\n                        der.readOID(ALTNAME.OID);\n                        break;\n                    case ALTNAME.RFC822Name:\n                        /* RFC822 specifies email addresses */ var email = der.readString(ALTNAME.RFC822Name);\n                        id = Identity.forEmail(email);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DirectoryName:\n                        der.readSequence(ALTNAME.DirectoryName);\n                        id = Identity.parseAsn1(der);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    case ALTNAME.DNSName:\n                        var host = der.readString(ALTNAME.DNSName);\n                        id = Identity.forHost(host);\n                        if (!cert.subjects[0].equals(id)) cert.subjects.push(id);\n                        break;\n                    default:\n                        der.readString(der.peek());\n                        break;\n                }\n            }\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical\n            });\n            break;\n        default:\n            sig.extras.exts.push({\n                oid: extId,\n                critical: critical,\n                data: der.readString(asn1.Ber.OctetString, true)\n            });\n            break;\n    }\n    der._offset = after;\n}\nvar UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n    var m = t.match(UTCTIME_RE);\n    assert.ok(m, \"timestamps must be in UTC\");\n    var d = new Date();\n    var thisYear = d.getUTCFullYear();\n    var century = Math.floor(thisYear / 100) * 100;\n    var year = parseInt(m[1], 10);\n    if (thisYear % 100 < 50 && year >= 60) year += century - 1;\n    else year += century;\n    d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nvar GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n    var m = t.match(GTIME_RE);\n    assert.ok(m);\n    var d = new Date();\n    d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n    d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n    if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));\n    return d;\n}\nfunction zeroPad(n, m) {\n    if (m === undefined) m = 2;\n    var s = \"\" + n;\n    while(s.length < m)s = \"0\" + s;\n    return s;\n}\nfunction dateToUTCTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear() % 100);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction dateToGTime(d) {\n    var s = \"\";\n    s += zeroPad(d.getUTCFullYear(), 4);\n    s += zeroPad(d.getUTCMonth() + 1);\n    s += zeroPad(d.getUTCDate());\n    s += zeroPad(d.getUTCHours());\n    s += zeroPad(d.getUTCMinutes());\n    s += zeroPad(d.getUTCSeconds());\n    s += \"Z\";\n    return s;\n}\nfunction sign(cert, key) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    sig.algo = key.type + \"-\" + key.defaultHashAlgorithm();\n    if (SIGN_ALGS[sig.algo] === undefined) return false;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    var signer = key.createSign();\n    signer.write(blob);\n    cert.signatures.x509.signature = signer.sign();\n    return true;\n}\nfunction signAsync(cert, signer, done) {\n    if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};\n    var sig = cert.signatures.x509;\n    var der = new asn1.BerWriter();\n    writeTBSCert(cert, der);\n    var blob = der.buffer;\n    sig.cache = blob;\n    signer(blob, function(err, signature) {\n        if (err) {\n            done(err);\n            return;\n        }\n        sig.algo = signature.type + \"-\" + signature.hashAlgorithm;\n        if (SIGN_ALGS[sig.algo] === undefined) {\n            done(new Error('Invalid signing algorithm \"' + sig.algo + '\"'));\n            return;\n        }\n        sig.signature = signature;\n        done();\n    });\n}\nfunction write(cert, options) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    var der = new asn1.BerWriter();\n    der.startSequence();\n    if (sig.cache) {\n        der._ensure(sig.cache.length);\n        sig.cache.copy(der._buf, der._offset);\n        der._offset += sig.cache.length;\n    } else {\n        writeTBSCert(cert, der);\n    }\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    var sigData = sig.signature.toBuffer(\"asn1\");\n    var data = Buffer.alloc(sigData.length + 1);\n    data[0] = 0;\n    sigData.copy(data, 1);\n    der.writeBuffer(data, asn1.Ber.BitString);\n    der.endSequence();\n    return der.buffer;\n}\nfunction writeTBSCert(cert, der) {\n    var sig = cert.signatures.x509;\n    assert.object(sig, \"x509 signature\");\n    der.startSequence();\n    der.startSequence(Local(0));\n    der.writeInt(2);\n    der.endSequence();\n    der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n    der.startSequence();\n    der.writeOID(SIGN_ALGS[sig.algo]);\n    if (sig.algo.match(/^rsa-/)) der.writeNull();\n    der.endSequence();\n    cert.issuer.toAsn1(der);\n    der.startSequence();\n    writeDate(der, cert.validFrom);\n    writeDate(der, cert.validUntil);\n    der.endSequence();\n    var subject = cert.subjects[0];\n    var altNames = cert.subjects.slice(1);\n    subject.toAsn1(der);\n    pkcs8.writePkcs8(der, cert.subjectKey);\n    if (sig.extras && sig.extras.issuerUniqueID) {\n        der.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n    }\n    if (sig.extras && sig.extras.subjectUniqueID) {\n        der.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n    }\n    if (altNames.length > 0 || subject.type === \"host\" || cert.purposes !== undefined && cert.purposes.length > 0 || sig.extras && sig.extras.exts) {\n        der.startSequence(Local(3));\n        der.startSequence();\n        var exts = [];\n        if (cert.purposes !== undefined && cert.purposes.length > 0) {\n            exts.push({\n                oid: EXTS.basicConstraints,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.keyUsage,\n                critical: true\n            });\n            exts.push({\n                oid: EXTS.extKeyUsage,\n                critical: true\n            });\n        }\n        exts.push({\n            oid: EXTS.altName\n        });\n        if (sig.extras && sig.extras.exts) exts = sig.extras.exts;\n        for(var i = 0; i < exts.length; ++i){\n            der.startSequence();\n            der.writeOID(exts[i].oid);\n            if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);\n            if (exts[i].oid === EXTS.altName) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                if (subject.type === \"host\") {\n                    der.writeString(subject.hostname, Context(2));\n                }\n                for(var j = 0; j < altNames.length; ++j){\n                    if (altNames[j].type === \"host\") {\n                        der.writeString(altNames[j].hostname, ALTNAME.DNSName);\n                    } else if (altNames[j].type === \"email\") {\n                        der.writeString(altNames[j].email, ALTNAME.RFC822Name);\n                    } else {\n                        /*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */ der.startSequence(ALTNAME.DirectoryName);\n                        altNames[j].toAsn1(der);\n                        der.endSequence();\n                    }\n                }\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.basicConstraints) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                var ca = cert.purposes.indexOf(\"ca\") !== -1;\n                var pathLen = exts[i].pathLen;\n                der.writeBoolean(ca);\n                if (pathLen !== undefined) der.writeInt(pathLen);\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.extKeyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                der.startSequence();\n                cert.purposes.forEach(function(purpose) {\n                    if (purpose === \"ca\") return;\n                    if (KEYUSEBITS.indexOf(purpose) !== -1) return;\n                    var oid = purpose;\n                    if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];\n                    der.writeOID(oid);\n                });\n                der.endSequence();\n                der.endSequence();\n            } else if (exts[i].oid === EXTS.keyUsage) {\n                der.startSequence(asn1.Ber.OctetString);\n                /*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */ if (exts[i].bits !== undefined) {\n                    der.writeBuffer(exts[i].bits, asn1.Ber.BitString);\n                } else {\n                    var bits = writeBitField(cert.purposes, KEYUSEBITS);\n                    der.writeBuffer(bits, asn1.Ber.BitString);\n                }\n                der.endSequence();\n            } else {\n                der.writeBuffer(exts[i].data, asn1.Ber.OctetString);\n            }\n            der.endSequence();\n        }\n        der.endSequence();\n        der.endSequence();\n    }\n    der.endSequence();\n}\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */ function readBitField(bits, bitIndex) {\n    var bitLen = 8 * (bits.length - 1) - bits[0];\n    var setBits = {};\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var bitVal = (bits[byteN] & mask) !== 0;\n        var name = bitIndex[i];\n        if (bitVal && typeof name === \"string\") {\n            setBits[name] = true;\n        }\n    }\n    return Object.keys(setBits);\n}\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */ function writeBitField(setBits, bitIndex) {\n    var bitLen = bitIndex.length;\n    var blen = Math.ceil(bitLen / 8);\n    var unused = blen * 8 - bitLen;\n    var bits = Buffer.alloc(1 + blen); // zero-filled\n    bits[0] = unused;\n    for(var i = 0; i < bitLen; ++i){\n        var byteN = 1 + Math.floor(i / 8);\n        var bit = 7 - i % 8;\n        var mask = 1 << bit;\n        var name = bitIndex[i];\n        if (name === undefined) continue;\n        var bitVal = setBits.indexOf(name) !== -1;\n        if (bitVal) {\n            bits[byteN] |= mask;\n        }\n    }\n    return bits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/formats/x509.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/identity.js":
/*!********************************************!*\
  !*** ./node_modules/sshpk/lib/identity.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = Identity;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\n/*JSSTYLED*/ var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\\-]{0,62})(?:\\.([*]|[a-z0-9][a-z0-9\\-]{0,62}))*$/i;\nvar oids = {};\noids.cn = \"2.5.4.3\";\noids.o = \"2.5.4.10\";\noids.ou = \"2.5.4.11\";\noids.l = \"2.5.4.7\";\noids.s = \"2.5.4.8\";\noids.c = \"2.5.4.6\";\noids.sn = \"2.5.4.4\";\noids.postalCode = \"2.5.4.17\";\noids.serialNumber = \"2.5.4.5\";\noids.street = \"2.5.4.9\";\noids.x500UniqueIdentifier = \"2.5.4.45\";\noids.role = \"2.5.4.72\";\noids.telephoneNumber = \"2.5.4.20\";\noids.description = \"2.5.4.13\";\noids.dc = \"0.9.2342.19200300.100.1.25\";\noids.uid = \"0.9.2342.19200300.100.1.1\";\noids.mail = \"0.9.2342.19200300.100.1.3\";\noids.title = \"2.5.4.12\";\noids.gn = \"2.5.4.42\";\noids.initials = \"2.5.4.43\";\noids.pseudonym = \"2.5.4.65\";\noids.emailAddress = \"1.2.840.113549.1.9.1\";\nvar unoids = {};\nObject.keys(oids).forEach(function(k) {\n    unoids[oids[k]] = k;\n});\nfunction Identity(opts) {\n    var self = this;\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.components, \"options.components\");\n    this.components = opts.components;\n    this.componentLookup = {};\n    this.components.forEach(function(c) {\n        if (c.name && !c.oid) c.oid = oids[c.name];\n        if (c.oid && !c.name) c.name = unoids[c.oid];\n        if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];\n        self.componentLookup[c.name].push(c);\n    });\n    if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {\n        this.cn = this.componentLookup.cn[0].value;\n    }\n    assert.optionalString(opts.type, \"options.type\");\n    if (opts.type === undefined) {\n        if (this.components.length === 1 && this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.dc.map(function(c) {\n                return c.value;\n            }).join(\".\");\n        } else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {\n            this.type = \"host\";\n            this.hostname = this.componentLookup.cn[0].value;\n        } else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.uid[0].value;\n        } else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {\n            this.type = \"email\";\n            this.email = this.componentLookup.mail[0].value;\n        } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {\n            this.type = \"user\";\n            this.uid = this.componentLookup.cn[0].value;\n        } else {\n            this.type = \"unknown\";\n        }\n    } else {\n        this.type = opts.type;\n        if (this.type === \"host\") this.hostname = opts.hostname;\n        else if (this.type === \"user\") this.uid = opts.uid;\n        else if (this.type === \"email\") this.email = opts.email;\n        else throw new Error(\"Unknown type \" + this.type);\n    }\n}\nIdentity.prototype.toString = function() {\n    return this.components.map(function(c) {\n        var n = c.name.toUpperCase();\n        /*JSSTYLED*/ n = n.replace(/=/g, \"\\\\=\");\n        var v = c.value;\n        /*JSSTYLED*/ v = v.replace(/,/g, \"\\\\,\");\n        return n + \"=\" + v;\n    }).join(\", \");\n};\nIdentity.prototype.get = function(name, asArray) {\n    assert.string(name, \"name\");\n    var arr = this.componentLookup[name];\n    if (arr === undefined || arr.length === 0) return undefined;\n    if (!asArray && arr.length > 1) throw new Error(\"Multiple values for attribute \" + name);\n    if (!asArray) return arr[0].value;\n    return arr.map(function(c) {\n        return c.value;\n    });\n};\nIdentity.prototype.toArray = function(idx) {\n    return this.components.map(function(c) {\n        return {\n            name: c.name,\n            value: c.value\n        };\n    });\n};\n/*\n * These are from X.680 -- PrintableString allowed chars are in section 37.4\n * table 8. Spec for IA5Strings is \"1,6 + SPACE + DEL\" where 1 refers to\n * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006\n * (the basic ASCII character set).\n */ /* JSSTYLED */ var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\\/:=?-]/;\n/* JSSTYLED */ var NOT_IA5 = /[^\\x00-\\x7f]/;\nIdentity.prototype.toAsn1 = function(der, tag) {\n    der.startSequence(tag);\n    this.components.forEach(function(c) {\n        der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        der.startSequence();\n        der.writeOID(c.oid);\n        /*\n\t\t * If we fit in a PrintableString, use that. Otherwise use an\n\t\t * IA5String or UTF8String.\n\t\t *\n\t\t * If this identity was parsed from a DN, use the ASN.1 types\n\t\t * from the original representation (otherwise this might not\n\t\t * be a full match for the original in some validators).\n\t\t */ if (c.asn1type === asn1.Ber.Utf8String || c.value.match(NOT_IA5)) {\n            var v = Buffer.from(c.value, \"utf8\");\n            der.writeBuffer(v, asn1.Ber.Utf8String);\n        } else if (c.asn1type === asn1.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {\n            der.writeString(c.value, asn1.Ber.IA5String);\n        } else {\n            var type = asn1.Ber.PrintableString;\n            if (c.asn1type !== undefined) type = c.asn1type;\n            der.writeString(c.value, type);\n        }\n        der.endSequence();\n        der.endSequence();\n    });\n    der.endSequence();\n};\nfunction globMatch(a, b) {\n    if (a === \"**\" || b === \"**\") return true;\n    var aParts = a.split(\".\");\n    var bParts = b.split(\".\");\n    if (aParts.length !== bParts.length) return false;\n    for(var i = 0; i < aParts.length; ++i){\n        if (aParts[i] === \"*\" || bParts[i] === \"*\") continue;\n        if (aParts[i] !== bParts[i]) return false;\n    }\n    return true;\n}\nIdentity.prototype.equals = function(other) {\n    if (!Identity.isIdentity(other, [\n        1,\n        0\n    ])) return false;\n    if (other.components.length !== this.components.length) return false;\n    for(var i = 0; i < this.components.length; ++i){\n        if (this.components[i].oid !== other.components[i].oid) return false;\n        if (!globMatch(this.components[i].value, other.components[i].value)) {\n            return false;\n        }\n    }\n    return true;\n};\nIdentity.forHost = function(hostname) {\n    assert.string(hostname, \"hostname\");\n    return new Identity({\n        type: \"host\",\n        hostname: hostname,\n        components: [\n            {\n                name: \"cn\",\n                value: hostname\n            }\n        ]\n    });\n};\nIdentity.forUser = function(uid) {\n    assert.string(uid, \"uid\");\n    return new Identity({\n        type: \"user\",\n        uid: uid,\n        components: [\n            {\n                name: \"uid\",\n                value: uid\n            }\n        ]\n    });\n};\nIdentity.forEmail = function(email) {\n    assert.string(email, \"email\");\n    return new Identity({\n        type: \"email\",\n        email: email,\n        components: [\n            {\n                name: \"mail\",\n                value: email\n            }\n        ]\n    });\n};\nIdentity.parseDN = function(dn) {\n    assert.string(dn, \"dn\");\n    var parts = [\n        \"\"\n    ];\n    var idx = 0;\n    var rem = dn;\n    while(rem.length > 0){\n        var m;\n        /*JSSTYLED*/ if ((m = /^,/.exec(rem)) !== null) {\n            parts[++idx] = \"\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\,/.exec(rem)) !== null) {\n            parts[idx] += \",\";\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^\\\\./.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        /*JSSTYLED*/ } else if ((m = /^[^\\\\,]+/.exec(rem)) !== null) {\n            parts[idx] += m[0];\n            rem = rem.slice(m[0].length);\n        } else {\n            throw new Error(\"Failed to parse DN\");\n        }\n    }\n    var cmps = parts.map(function(c) {\n        c = c.trim();\n        var eqPos = c.indexOf(\"=\");\n        while(eqPos > 0 && c.charAt(eqPos - 1) === \"\\\\\")eqPos = c.indexOf(\"=\", eqPos + 1);\n        if (eqPos === -1) {\n            throw new Error(\"Failed to parse DN\");\n        }\n        /*JSSTYLED*/ var name = c.slice(0, eqPos).toLowerCase().replace(/\\\\=/g, \"=\");\n        var value = c.slice(eqPos + 1);\n        return {\n            name: name,\n            value: value\n        };\n    });\n    return new Identity({\n        components: cmps\n    });\n};\nIdentity.fromArray = function(components) {\n    assert.arrayOfObject(components, \"components\");\n    components.forEach(function(cmp) {\n        assert.object(cmp, \"component\");\n        assert.string(cmp.name, \"component.name\");\n        if (!Buffer.isBuffer(cmp.value) && !(typeof cmp.value === \"string\")) {\n            throw new Error(\"Invalid component value\");\n        }\n    });\n    return new Identity({\n        components: components\n    });\n};\nIdentity.parseAsn1 = function(der, top) {\n    var components = [];\n    der.readSequence(top);\n    var end = der.offset + der.length;\n    while(der.offset < end){\n        der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);\n        var after = der.offset + der.length;\n        der.readSequence();\n        var oid = der.readOID();\n        var type = der.peek();\n        var value;\n        switch(type){\n            case asn1.Ber.PrintableString:\n            case asn1.Ber.IA5String:\n            case asn1.Ber.OctetString:\n            case asn1.Ber.T61String:\n                value = der.readString(type);\n                break;\n            case asn1.Ber.Utf8String:\n                value = der.readString(type, true);\n                value = value.toString(\"utf8\");\n                break;\n            case asn1.Ber.CharacterString:\n            case asn1.Ber.BMPString:\n                value = der.readString(type, true);\n                value = value.toString(\"utf16le\");\n                break;\n            default:\n                throw new Error(\"Unknown asn1 type \" + type);\n        }\n        components.push({\n            oid: oid,\n            asn1type: type,\n            value: value\n        });\n        der._offset = after;\n    }\n    der._offset = end;\n    return new Identity({\n        components: components\n    });\n};\nIdentity.isIdentity = function(obj, ver) {\n    return utils.isCompatible(obj, Identity, ver);\n};\n/*\n * API versions for Identity:\n * [1,0] -- initial ver\n */ Identity.prototype._sshpkApiVersion = [\n    1,\n    0\n];\nIdentity._oldVersionDetect = function(obj) {\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/identity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Certificate = __webpack_require__(/*! ./certificate */ \"(rsc)/./node_modules/sshpk/lib/certificate.js\");\nvar Identity = __webpack_require__(/*! ./identity */ \"(rsc)/./node_modules/sshpk/lib/identity.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nmodule.exports = {\n    /* top-level classes */ Key: Key,\n    parseKey: Key.parse,\n    Fingerprint: Fingerprint,\n    parseFingerprint: Fingerprint.parse,\n    Signature: Signature,\n    parseSignature: Signature.parse,\n    PrivateKey: PrivateKey,\n    parsePrivateKey: PrivateKey.parse,\n    generatePrivateKey: PrivateKey.generate,\n    Certificate: Certificate,\n    parseCertificate: Certificate.parse,\n    createSelfSignedCertificate: Certificate.createSelfSigned,\n    createCertificate: Certificate.create,\n    Identity: Identity,\n    identityFromDN: Identity.parseDN,\n    identityForHost: Identity.forHost,\n    identityForUser: Identity.forUser,\n    identityForEmail: Identity.forEmail,\n    identityFromArray: Identity.fromArray,\n    /* errors */ FingerprintFormatError: errs.FingerprintFormatError,\n    InvalidAlgorithmError: errs.InvalidAlgorithmError,\n    KeyParseError: errs.KeyParseError,\n    SignatureParseError: errs.SignatureParseError,\n    KeyEncryptedError: errs.KeyEncryptedError,\n    CertificateParseError: errs.CertificateParseError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3NocGsvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUIsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDbEIsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDMUIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUcsYUFBYUgsbUJBQU9BLENBQUM7QUFDekIsSUFBSUksY0FBY0osbUJBQU9BLENBQUM7QUFDMUIsSUFBSUssV0FBV0wsbUJBQU9BLENBQUM7QUFDdkIsSUFBSU0sT0FBT04sbUJBQU9BLENBQUM7QUFFbkJPLE9BQU9DLE9BQU8sR0FBRztJQUNoQixxQkFBcUIsR0FDckJULEtBQUtBO0lBQ0xVLFVBQVVWLElBQUlXLEtBQUs7SUFDbkJULGFBQWFBO0lBQ2JVLGtCQUFrQlYsWUFBWVMsS0FBSztJQUNuQ1IsV0FBV0E7SUFDWFUsZ0JBQWdCVixVQUFVUSxLQUFLO0lBQy9CUCxZQUFZQTtJQUNaVSxpQkFBaUJWLFdBQVdPLEtBQUs7SUFDakNJLG9CQUFvQlgsV0FBV1ksUUFBUTtJQUN2Q1gsYUFBYUE7SUFDYlksa0JBQWtCWixZQUFZTSxLQUFLO0lBQ25DTyw2QkFBNkJiLFlBQVljLGdCQUFnQjtJQUN6REMsbUJBQW1CZixZQUFZZ0IsTUFBTTtJQUNyQ2YsVUFBVUE7SUFDVmdCLGdCQUFnQmhCLFNBQVNpQixPQUFPO0lBQ2hDQyxpQkFBaUJsQixTQUFTbUIsT0FBTztJQUNqQ0MsaUJBQWlCcEIsU0FBU3FCLE9BQU87SUFDakNDLGtCQUFrQnRCLFNBQVN1QixRQUFRO0lBQ25DQyxtQkFBbUJ4QixTQUFTeUIsU0FBUztJQUVyQyxVQUFVLEdBQ1ZDLHdCQUF3QnpCLEtBQUt5QixzQkFBc0I7SUFDbkRDLHVCQUF1QjFCLEtBQUswQixxQkFBcUI7SUFDakRDLGVBQWUzQixLQUFLMkIsYUFBYTtJQUNqQ0MscUJBQXFCNUIsS0FBSzRCLG1CQUFtQjtJQUM3Q0MsbUJBQW1CN0IsS0FBSzZCLGlCQUFpQjtJQUN6Q0MsdUJBQXVCOUIsS0FBSzhCLHFCQUFxQjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2lhdG9vbHMtbmV4dC8uL25vZGVfbW9kdWxlcy9zc2hway9saWIvaW5kZXguanM/YjhmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIEtleSA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgRmluZ2VycHJpbnQgPSByZXF1aXJlKCcuL2ZpbmdlcnByaW50Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcbnZhciBQcml2YXRlS2V5ID0gcmVxdWlyZSgnLi9wcml2YXRlLWtleScpO1xudmFyIENlcnRpZmljYXRlID0gcmVxdWlyZSgnLi9jZXJ0aWZpY2F0ZScpO1xudmFyIElkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xudmFyIGVycnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyogdG9wLWxldmVsIGNsYXNzZXMgKi9cblx0S2V5OiBLZXksXG5cdHBhcnNlS2V5OiBLZXkucGFyc2UsXG5cdEZpbmdlcnByaW50OiBGaW5nZXJwcmludCxcblx0cGFyc2VGaW5nZXJwcmludDogRmluZ2VycHJpbnQucGFyc2UsXG5cdFNpZ25hdHVyZTogU2lnbmF0dXJlLFxuXHRwYXJzZVNpZ25hdHVyZTogU2lnbmF0dXJlLnBhcnNlLFxuXHRQcml2YXRlS2V5OiBQcml2YXRlS2V5LFxuXHRwYXJzZVByaXZhdGVLZXk6IFByaXZhdGVLZXkucGFyc2UsXG5cdGdlbmVyYXRlUHJpdmF0ZUtleTogUHJpdmF0ZUtleS5nZW5lcmF0ZSxcblx0Q2VydGlmaWNhdGU6IENlcnRpZmljYXRlLFxuXHRwYXJzZUNlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5wYXJzZSxcblx0Y3JlYXRlU2VsZlNpZ25lZENlcnRpZmljYXRlOiBDZXJ0aWZpY2F0ZS5jcmVhdGVTZWxmU2lnbmVkLFxuXHRjcmVhdGVDZXJ0aWZpY2F0ZTogQ2VydGlmaWNhdGUuY3JlYXRlLFxuXHRJZGVudGl0eTogSWRlbnRpdHksXG5cdGlkZW50aXR5RnJvbUROOiBJZGVudGl0eS5wYXJzZUROLFxuXHRpZGVudGl0eUZvckhvc3Q6IElkZW50aXR5LmZvckhvc3QsXG5cdGlkZW50aXR5Rm9yVXNlcjogSWRlbnRpdHkuZm9yVXNlcixcblx0aWRlbnRpdHlGb3JFbWFpbDogSWRlbnRpdHkuZm9yRW1haWwsXG5cdGlkZW50aXR5RnJvbUFycmF5OiBJZGVudGl0eS5mcm9tQXJyYXksXG5cblx0LyogZXJyb3JzICovXG5cdEZpbmdlcnByaW50Rm9ybWF0RXJyb3I6IGVycnMuRmluZ2VycHJpbnRGb3JtYXRFcnJvcixcblx0SW52YWxpZEFsZ29yaXRobUVycm9yOiBlcnJzLkludmFsaWRBbGdvcml0aG1FcnJvcixcblx0S2V5UGFyc2VFcnJvcjogZXJycy5LZXlQYXJzZUVycm9yLFxuXHRTaWduYXR1cmVQYXJzZUVycm9yOiBlcnJzLlNpZ25hdHVyZVBhcnNlRXJyb3IsXG5cdEtleUVuY3J5cHRlZEVycm9yOiBlcnJzLktleUVuY3J5cHRlZEVycm9yLFxuXHRDZXJ0aWZpY2F0ZVBhcnNlRXJyb3I6IGVycnMuQ2VydGlmaWNhdGVQYXJzZUVycm9yXG59O1xuIl0sIm5hbWVzIjpbIktleSIsInJlcXVpcmUiLCJGaW5nZXJwcmludCIsIlNpZ25hdHVyZSIsIlByaXZhdGVLZXkiLCJDZXJ0aWZpY2F0ZSIsIklkZW50aXR5IiwiZXJycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZUtleSIsInBhcnNlIiwicGFyc2VGaW5nZXJwcmludCIsInBhcnNlU2lnbmF0dXJlIiwicGFyc2VQcml2YXRlS2V5IiwiZ2VuZXJhdGVQcml2YXRlS2V5IiwiZ2VuZXJhdGUiLCJwYXJzZUNlcnRpZmljYXRlIiwiY3JlYXRlU2VsZlNpZ25lZENlcnRpZmljYXRlIiwiY3JlYXRlU2VsZlNpZ25lZCIsImNyZWF0ZUNlcnRpZmljYXRlIiwiY3JlYXRlIiwiaWRlbnRpdHlGcm9tRE4iLCJwYXJzZUROIiwiaWRlbnRpdHlGb3JIb3N0IiwiZm9ySG9zdCIsImlkZW50aXR5Rm9yVXNlciIsImZvclVzZXIiLCJpZGVudGl0eUZvckVtYWlsIiwiZm9yRW1haWwiLCJpZGVudGl0eUZyb21BcnJheSIsImZyb21BcnJheSIsIkZpbmdlcnByaW50Rm9ybWF0RXJyb3IiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJLZXlQYXJzZUVycm9yIiwiU2lnbmF0dXJlUGFyc2VFcnJvciIsIktleUVuY3J5cHRlZEVycm9yIiwiQ2VydGlmaWNhdGVQYXJzZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/key.js":
/*!***************************************!*\
  !*** ./node_modules/sshpk/lib/key.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2018 Joyent, Inc.\n\nmodule.exports = Key;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar DiffieHellman = (__webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\").DiffieHellman);\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar edCompat;\ntry {\n    edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\n} catch (e) {\n/* Just continue through, and bail out if we try to use it. */ }\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh\"] = __webpack_require__(/*! ./formats/ssh */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nformats[\"ppk\"] = formats[\"putty\"];\nfunction Key(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    assert.optionalString(opts.comment, \"options.comment\");\n    var algInfo = algs.info[opts.type];\n    if (typeof algInfo !== \"object\") throw new InvalidAlgorithmError(opts.type);\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.parts = opts.parts;\n    this.part = partLookup;\n    this.comment = undefined;\n    this.source = opts.source;\n    /* for speeding up hashing/fingerprint operations */ this._rfc4253Cache = opts._rfc4253Cache;\n    this._hashCache = {};\n    var sz;\n    this.curve = undefined;\n    if (this.type === \"ecdsa\") {\n        var curve = this.part.curve.data.toString();\n        this.curve = curve;\n        sz = algs.curves[curve].size;\n    } else if (this.type === \"ed25519\" || this.type === \"curve25519\") {\n        sz = 256;\n        this.curve = \"curve25519\";\n    } else {\n        var szPart = this.part[algInfo.sizePart];\n        sz = szPart.data.length;\n        sz = sz * 8 - utils.countZeros(szPart.data);\n    }\n    this.size = sz;\n}\nKey.formats = formats;\nKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"ssh\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    if (format === \"rfc4253\") {\n        if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats[\"rfc4253\"].write(this);\n        return this._rfc4253Cache;\n    }\n    return formats[format].write(this, options);\n};\nKey.prototype.toString = function(format, options) {\n    return this.toBuffer(format, options).toString();\n};\nKey.prototype.hash = function(algo, type) {\n    assert.string(algo, \"algorithm\");\n    assert.optionalString(type, \"type\");\n    if (type === undefined) type = \"ssh\";\n    algo = algo.toLowerCase();\n    if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);\n    var cacheKey = algo + \"||\" + type;\n    if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];\n    var buf;\n    if (type === \"ssh\") {\n        buf = this.toBuffer(\"rfc4253\");\n    } else if (type === \"spki\") {\n        buf = formats.pkcs8.pkcs8ToBuffer(this);\n    } else {\n        throw new Error(\"Hash type \" + type + \" not supported\");\n    }\n    var hash = crypto.createHash(algo).update(buf).digest();\n    this._hashCache[cacheKey] = hash;\n    return hash;\n};\nKey.prototype.fingerprint = function(algo, type) {\n    if (algo === undefined) algo = \"sha256\";\n    if (type === undefined) type = \"ssh\";\n    assert.string(algo, \"algorithm\");\n    assert.string(type, \"type\");\n    var opts = {\n        type: \"key\",\n        hash: this.hash(algo, type),\n        algorithm: algo,\n        hashType: type\n    };\n    return new Fingerprint(opts);\n};\nKey.prototype.defaultHashAlgorithm = function() {\n    var hashAlgo = \"sha1\";\n    if (this.type === \"rsa\") hashAlgo = \"sha256\";\n    if (this.type === \"dsa\" && this.size > 1024) hashAlgo = \"sha256\";\n    if (this.type === \"ed25519\") hashAlgo = \"sha512\";\n    if (this.type === \"ecdsa\") {\n        if (this.size <= 256) hashAlgo = \"sha256\";\n        else if (this.size <= 384) hashAlgo = \"sha384\";\n        else hashAlgo = \"sha512\";\n    }\n    return hashAlgo;\n};\nKey.prototype.createVerify = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createVerify(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldVerify = v.verify.bind(v);\n    var key = this.toBuffer(\"pkcs8\");\n    var curve = this.curve;\n    var self = this;\n    v.verify = function(signature, fmt) {\n        if (Signature.isSignature(signature, [\n            2,\n            0\n        ])) {\n            if (signature.type !== self.type) return false;\n            if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;\n            if (signature.curve && self.type === \"ecdsa\" && signature.curve !== curve) return false;\n            return oldVerify(key, signature.toBuffer(\"asn1\"));\n        } else if (typeof signature === \"string\" || Buffer.isBuffer(signature)) {\n            return oldVerify(key, signature, fmt);\n        /*\n\t\t * Avoid doing this on valid arguments, walking the prototype\n\t\t * chain can be quite slow.\n\t\t */ } else if (Signature.isSignature(signature, [\n            1,\n            0\n        ])) {\n            throw new Error(\"signature was created by too old \" + \"a version of sshpk and cannot be verified\");\n        } else {\n            throw new TypeError(\"signature must be a string, \" + \"Buffer, or Signature object\");\n        }\n    };\n    return v;\n};\nKey.prototype.createDiffieHellman = function() {\n    if (this.type === \"rsa\") throw new Error(\"RSA keys do not support Diffie-Hellman\");\n    return new DiffieHellman(this);\n};\nKey.prototype.createDH = Key.prototype.createDiffieHellman;\nKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        if (k instanceof PrivateKey) k = k.toPublic();\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nKey.isKey = function(obj, ver) {\n    return utils.isCompatible(obj, Key, ver);\n};\n/*\n * API versions for Key:\n * [1,0] -- initial ver, may take Signature for createVerify or may not\n * [1,1] -- added pkcs1, pkcs8 formats\n * [1,2] -- added auto, ssh-private, openssh formats\n * [1,3] -- added defaultHashAlgorithm\n * [1,4] -- added ed support, createDH\n * [1,5] -- first explicitly tagged version\n * [1,6] -- changed ed25519 part names\n * [1,7] -- spki hash types\n */ Key.prototype._sshpkApiVersion = [\n    1,\n    7\n];\nKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    assert.func(obj.fingerprint);\n    if (obj.createDH) return [\n        1,\n        4\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        3\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"pkcs1\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/private-key.js":
/*!***********************************************!*\
  !*** ./node_modules/sshpk/lib/private-key.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Fingerprint = __webpack_require__(/*! ./fingerprint */ \"(rsc)/./node_modules/sshpk/lib/fingerprint.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/sshpk/lib/signature.js\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar dhe = __webpack_require__(/*! ./dhe */ \"(rsc)/./node_modules/sshpk/lib/dhe.js\");\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat = __webpack_require__(/*! ./ed-compat */ \"(rsc)/./node_modules/sshpk/lib/ed-compat.js\");\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats[\"auto\"] = __webpack_require__(/*! ./formats/auto */ \"(rsc)/./node_modules/sshpk/lib/formats/auto.js\");\nformats[\"pem\"] = __webpack_require__(/*! ./formats/pem */ \"(rsc)/./node_modules/sshpk/lib/formats/pem.js\");\nformats[\"pkcs1\"] = __webpack_require__(/*! ./formats/pkcs1 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs1.js\");\nformats[\"pkcs8\"] = __webpack_require__(/*! ./formats/pkcs8 */ \"(rsc)/./node_modules/sshpk/lib/formats/pkcs8.js\");\nformats[\"rfc4253\"] = __webpack_require__(/*! ./formats/rfc4253 */ \"(rsc)/./node_modules/sshpk/lib/formats/rfc4253.js\");\nformats[\"ssh-private\"] = __webpack_require__(/*! ./formats/ssh-private */ \"(rsc)/./node_modules/sshpk/lib/formats/ssh-private.js\");\nformats[\"openssh\"] = formats[\"ssh-private\"];\nformats[\"ssh\"] = formats[\"ssh-private\"];\nformats[\"dnssec\"] = __webpack_require__(/*! ./formats/dnssec */ \"(rsc)/./node_modules/sshpk/lib/formats/dnssec.js\");\nformats[\"putty\"] = __webpack_require__(/*! ./formats/putty */ \"(rsc)/./node_modules/sshpk/lib/formats/putty.js\");\nfunction PrivateKey(opts) {\n    assert.object(opts, \"options\");\n    Key.call(this, opts);\n    this._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\nPrivateKey.prototype.toBuffer = function(format, options) {\n    if (format === undefined) format = \"pkcs1\";\n    assert.string(format, \"format\");\n    assert.object(formats[format], \"formats[format]\");\n    assert.optionalObject(options, \"options\");\n    return formats[format].write(this, options);\n};\nPrivateKey.prototype.hash = function(algo, type) {\n    return this.toPublic().hash(algo, type);\n};\nPrivateKey.prototype.fingerprint = function(algo, type) {\n    return this.toPublic().fingerprint(algo, type);\n};\nPrivateKey.prototype.toPublic = function() {\n    if (this._pubCache) return this._pubCache;\n    var algInfo = algs.info[this.type];\n    var pubParts = [];\n    for(var i = 0; i < algInfo.parts.length; ++i){\n        var p = algInfo.parts[i];\n        pubParts.push(this.part[p]);\n    }\n    this._pubCache = new Key({\n        type: this.type,\n        source: this,\n        parts: pubParts\n    });\n    if (this.comment) this._pubCache.comment = this.comment;\n    return this._pubCache;\n};\nPrivateKey.prototype.derive = function(newType) {\n    assert.string(newType, \"type\");\n    var priv, pub, pair;\n    if (this.type === \"ed25519\" && newType === \"curve25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"curve25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    } else if (this.type === \"curve25519\" && newType === \"ed25519\") {\n        priv = this.part.k.data;\n        if (priv[0] === 0x00) priv = priv.slice(1);\n        pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n        pub = Buffer.from(pair.publicKey);\n        return new PrivateKey({\n            type: \"ed25519\",\n            parts: [\n                {\n                    name: \"A\",\n                    data: utils.mpNormalize(pub)\n                },\n                {\n                    name: \"k\",\n                    data: utils.mpNormalize(priv)\n                }\n            ]\n        });\n    }\n    throw new Error(\"Key derivation not supported from \" + this.type + \" to \" + newType);\n};\nPrivateKey.prototype.createVerify = function(hashAlgo) {\n    return this.toPublic().createVerify(hashAlgo);\n};\nPrivateKey.prototype.createSign = function(hashAlgo) {\n    if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n    assert.string(hashAlgo, \"hash algorithm\");\n    /* ED25519 is not supported by OpenSSL, use a javascript impl. */ if (this.type === \"ed25519\" && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n    if (this.type === \"curve25519\") throw new Error(\"Curve25519 keys are not suitable for \" + \"signing or verification\");\n    var v, nm, err;\n    try {\n        nm = hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    } catch (e) {\n        err = e;\n    }\n    if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n        nm = \"RSA-\";\n        nm += hashAlgo.toUpperCase();\n        v = crypto.createSign(nm);\n    }\n    assert.ok(v, \"failed to create verifier\");\n    var oldSign = v.sign.bind(v);\n    var key = this.toBuffer(\"pkcs1\");\n    var type = this.type;\n    var curve = this.curve;\n    v.sign = function() {\n        var sig = oldSign(key);\n        if (typeof sig === \"string\") sig = Buffer.from(sig, \"binary\");\n        sig = Signature.parse(sig, type, \"asn1\");\n        sig.hashAlgorithm = hashAlgo;\n        sig.curve = curve;\n        return sig;\n    };\n    return v;\n};\nPrivateKey.parse = function(data, format, options) {\n    if (typeof data !== \"string\") assert.buffer(data, \"data\");\n    if (format === undefined) format = \"auto\";\n    assert.string(format, \"format\");\n    if (typeof options === \"string\") options = {\n        filename: options\n    };\n    assert.optionalObject(options, \"options\");\n    if (options === undefined) options = {};\n    assert.optionalString(options.filename, \"options.filename\");\n    if (options.filename === undefined) options.filename = \"(unnamed)\";\n    assert.object(formats[format], \"formats[format]\");\n    try {\n        var k = formats[format].read(data, options);\n        assert.ok(k instanceof PrivateKey, \"key is not a private key\");\n        if (!k.comment) k.comment = options.filename;\n        return k;\n    } catch (e) {\n        if (e.name === \"KeyEncryptedError\") throw e;\n        throw new KeyParseError(options.filename, format, e);\n    }\n};\nPrivateKey.isPrivateKey = function(obj, ver) {\n    return utils.isCompatible(obj, PrivateKey, ver);\n};\nPrivateKey.generate = function(type, options) {\n    if (options === undefined) options = {};\n    assert.object(options, \"options\");\n    switch(type){\n        case \"ecdsa\":\n            if (options.curve === undefined) options.curve = \"nistp256\";\n            assert.string(options.curve, \"options.curve\");\n            return generateECDSA(options.curve);\n        case \"ed25519\":\n            return generateED25519();\n        default:\n            throw new Error(\"Key generation not supported with key \" + 'type \"' + type + '\"');\n    }\n};\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */ PrivateKey.prototype._sshpkApiVersion = [\n    1,\n    6\n];\nPrivateKey._oldVersionDetect = function(obj) {\n    assert.func(obj.toPublic);\n    assert.func(obj.createSign);\n    if (obj.derive) return [\n        1,\n        3\n    ];\n    if (obj.defaultHashAlgorithm) return [\n        1,\n        2\n    ];\n    if (obj.formats[\"auto\"]) return [\n        1,\n        1\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/private-key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/signature.js":
/*!*********************************************!*\
  !*** ./node_modules/sshpk/lib/signature.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar errs = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/sshpk/lib/errors.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/sshpk/lib/utils.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar SSHBuffer = __webpack_require__(/*! ./ssh-buffer */ \"(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\");\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\nfunction Signature(opts) {\n    assert.object(opts, \"options\");\n    assert.arrayOfObject(opts.parts, \"options.parts\");\n    assert.string(opts.type, \"options.type\");\n    var partLookup = {};\n    for(var i = 0; i < opts.parts.length; ++i){\n        var part = opts.parts[i];\n        partLookup[part.name] = part;\n    }\n    this.type = opts.type;\n    this.hashAlgorithm = opts.hashAlgo;\n    this.curve = opts.curve;\n    this.parts = opts.parts;\n    this.part = partLookup;\n}\nSignature.prototype.toBuffer = function(format) {\n    if (format === undefined) format = \"asn1\";\n    assert.string(format, \"format\");\n    var buf;\n    var stype = \"ssh-\" + this.type;\n    switch(this.type){\n        case \"rsa\":\n            switch(this.hashAlgorithm){\n                case \"sha256\":\n                    stype = \"rsa-sha2-256\";\n                    break;\n                case \"sha512\":\n                    stype = \"rsa-sha2-512\";\n                    break;\n                case \"sha1\":\n                case undefined:\n                    break;\n                default:\n                    throw new Error(\"SSH signature \" + \"format does not support hash \" + \"algorithm \" + this.hashAlgorithm);\n            }\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"ed25519\":\n            if (format === \"ssh\") {\n                buf = new SSHBuffer({});\n                buf.writeString(stype);\n                buf.writePart(this.part.sig);\n                return buf.toBuffer();\n            } else {\n                return this.part.sig.data;\n            }\n            break;\n        case \"dsa\":\n        case \"ecdsa\":\n            var r, s;\n            if (format === \"asn1\") {\n                var der = new asn1.BerWriter();\n                der.startSequence();\n                r = utils.mpNormalize(this.part.r.data);\n                s = utils.mpNormalize(this.part.s.data);\n                der.writeBuffer(r, asn1.Ber.Integer);\n                der.writeBuffer(s, asn1.Ber.Integer);\n                der.endSequence();\n                return der.buffer;\n            } else if (format === \"ssh\" && this.type === \"dsa\") {\n                buf = new SSHBuffer({});\n                buf.writeString(\"ssh-dss\");\n                r = this.part.r.data;\n                if (r.length > 20 && r[0] === 0x00) r = r.slice(1);\n                s = this.part.s.data;\n                if (s.length > 20 && s[0] === 0x00) s = s.slice(1);\n                if (this.hashAlgorithm && this.hashAlgorithm !== \"sha1\" || r.length + s.length !== 40) {\n                    throw new Error(\"OpenSSH only supports \" + \"DSA signatures with SHA1 hash\");\n                }\n                buf.writeBuffer(Buffer.concat([\n                    r,\n                    s\n                ]));\n                return buf.toBuffer();\n            } else if (format === \"ssh\" && this.type === \"ecdsa\") {\n                var inner = new SSHBuffer({});\n                r = this.part.r.data;\n                inner.writeBuffer(r);\n                inner.writePart(this.part.s);\n                buf = new SSHBuffer({});\n                /* XXX: find a more proper way to do this? */ var curve;\n                if (r[0] === 0x00) r = r.slice(1);\n                var sz = r.length * 8;\n                if (sz === 256) curve = \"nistp256\";\n                else if (sz === 384) curve = \"nistp384\";\n                else if (sz === 528) curve = \"nistp521\";\n                buf.writeString(\"ecdsa-sha2-\" + curve);\n                buf.writeBuffer(inner.toBuffer());\n                return buf.toBuffer();\n            }\n            throw new Error(\"Invalid signature format\");\n        default:\n            throw new Error(\"Invalid signature data\");\n    }\n};\nSignature.prototype.toString = function(format) {\n    assert.optionalString(format, \"format\");\n    return this.toBuffer(format).toString(\"base64\");\n};\nSignature.parse = function(data, type, format) {\n    if (typeof data === \"string\") data = Buffer.from(data, \"base64\");\n    assert.buffer(data, \"data\");\n    assert.string(format, \"format\");\n    assert.string(type, \"type\");\n    var opts = {};\n    opts.type = type.toLowerCase();\n    opts.parts = [];\n    try {\n        assert.ok(data.length > 0, \"signature must not be empty\");\n        switch(opts.type){\n            case \"rsa\":\n                return parseOneNum(data, type, format, opts);\n            case \"ed25519\":\n                return parseOneNum(data, type, format, opts);\n            case \"dsa\":\n            case \"ecdsa\":\n                if (format === \"asn1\") return parseDSAasn1(data, type, format, opts);\n                else if (opts.type === \"dsa\") return parseDSA(data, type, format, opts);\n                else return parseECDSA(data, type, format, opts);\n            default:\n                throw new InvalidAlgorithmError(type);\n        }\n    } catch (e) {\n        if (e instanceof InvalidAlgorithmError) throw e;\n        throw new SignatureParseError(type, format, e);\n    }\n};\nfunction parseOneNum(data, type, format, opts) {\n    if (format === \"ssh\") {\n        try {\n            var buf = new SSHBuffer({\n                buffer: data\n            });\n            var head = buf.readString();\n        } catch (e) {\n        /* fall through */ }\n        if (buf !== undefined) {\n            var msg = \"SSH signature does not match expected \" + \"type (expected \" + type + \", got \" + head + \")\";\n            switch(head){\n                case \"ssh-rsa\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha1\";\n                    break;\n                case \"rsa-sha2-256\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha256\";\n                    break;\n                case \"rsa-sha2-512\":\n                    assert.strictEqual(type, \"rsa\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                case \"ssh-ed25519\":\n                    assert.strictEqual(type, \"ed25519\", msg);\n                    opts.hashAlgo = \"sha512\";\n                    break;\n                default:\n                    throw new Error(\"Unknown SSH signature \" + \"type: \" + head);\n            }\n            var sig = buf.readPart();\n            assert.ok(buf.atEnd(), \"extra trailing bytes\");\n            sig.name = \"sig\";\n            opts.parts.push(sig);\n            return new Signature(opts);\n        }\n    }\n    opts.parts.push({\n        name: \"sig\",\n        data: data\n    });\n    return new Signature(opts);\n}\nfunction parseDSAasn1(data, type, format, opts) {\n    var der = new asn1.BerReader(data);\n    der.readSequence();\n    var r = der.readString(asn1.Ber.Integer, true);\n    var s = der.readString(asn1.Ber.Integer, true);\n    opts.parts.push({\n        name: \"r\",\n        data: utils.mpNormalize(r)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: utils.mpNormalize(s)\n    });\n    return new Signature(opts);\n}\nfunction parseDSA(data, type, format, opts) {\n    if (data.length != 40) {\n        var buf = new SSHBuffer({\n            buffer: data\n        });\n        var d = buf.readBuffer();\n        if (d.toString(\"ascii\") === \"ssh-dss\") d = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes\");\n        assert.strictEqual(d.length, 40, \"invalid inner length\");\n        data = d;\n    }\n    opts.parts.push({\n        name: \"r\",\n        data: data.slice(0, 20)\n    });\n    opts.parts.push({\n        name: \"s\",\n        data: data.slice(20, 40)\n    });\n    return new Signature(opts);\n}\nfunction parseECDSA(data, type, format, opts) {\n    var buf = new SSHBuffer({\n        buffer: data\n    });\n    var r, s;\n    var inner = buf.readBuffer();\n    var stype = inner.toString(\"ascii\");\n    if (stype.slice(0, 6) === \"ecdsa-\") {\n        var parts = stype.split(\"-\");\n        assert.strictEqual(parts[0], \"ecdsa\");\n        assert.strictEqual(parts[1], \"sha2\");\n        opts.curve = parts[2];\n        switch(opts.curve){\n            case \"nistp256\":\n                opts.hashAlgo = \"sha256\";\n                break;\n            case \"nistp384\":\n                opts.hashAlgo = \"sha384\";\n                break;\n            case \"nistp521\":\n                opts.hashAlgo = \"sha512\";\n                break;\n            default:\n                throw new Error(\"Unsupported ECDSA curve: \" + opts.curve);\n        }\n        inner = buf.readBuffer();\n        assert.ok(buf.atEnd(), \"extra trailing bytes on outer\");\n        buf = new SSHBuffer({\n            buffer: inner\n        });\n        r = buf.readPart();\n    } else {\n        r = {\n            data: inner\n        };\n    }\n    s = buf.readPart();\n    assert.ok(buf.atEnd(), \"extra trailing bytes\");\n    r.name = \"r\";\n    s.name = \"s\";\n    opts.parts.push(r);\n    opts.parts.push(s);\n    return new Signature(opts);\n}\nSignature.isSignature = function(obj, ver) {\n    return utils.isCompatible(obj, Signature, ver);\n};\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */ Signature.prototype._sshpkApiVersion = [\n    2,\n    1\n];\nSignature._oldVersionDetect = function(obj) {\n    assert.func(obj.toBuffer);\n    if (obj.hasOwnProperty(\"hashAlgorithm\")) return [\n        2,\n        0\n    ];\n    return [\n        1,\n        0\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/ssh-buffer.js":
/*!**********************************************!*\
  !*** ./node_modules/sshpk/lib/ssh-buffer.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = SSHBuffer;\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nfunction SSHBuffer(opts) {\n    assert.object(opts, \"options\");\n    if (opts.buffer !== undefined) assert.buffer(opts.buffer, \"options.buffer\");\n    this._size = opts.buffer ? opts.buffer.length : 1024;\n    this._buffer = opts.buffer || Buffer.alloc(this._size);\n    this._offset = 0;\n}\nSSHBuffer.prototype.toBuffer = function() {\n    return this._buffer.slice(0, this._offset);\n};\nSSHBuffer.prototype.atEnd = function() {\n    return this._offset >= this._buffer.length;\n};\nSSHBuffer.prototype.remainder = function() {\n    return this._buffer.slice(this._offset);\n};\nSSHBuffer.prototype.skip = function(n) {\n    this._offset += n;\n};\nSSHBuffer.prototype.expand = function() {\n    this._size *= 2;\n    var buf = Buffer.alloc(this._size);\n    this._buffer.copy(buf, 0);\n    this._buffer = buf;\n};\nSSHBuffer.prototype.readPart = function() {\n    return {\n        data: this.readBuffer()\n    };\n};\nSSHBuffer.prototype.readBuffer = function() {\n    var len = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    assert.ok(this._offset + len <= this._buffer.length, \"length out of bounds at +0x\" + this._offset.toString(16) + \" (data truncated?)\");\n    var buf = this._buffer.slice(this._offset, this._offset + len);\n    this._offset += len;\n    return buf;\n};\nSSHBuffer.prototype.readString = function() {\n    return this.readBuffer().toString();\n};\nSSHBuffer.prototype.readCString = function() {\n    var offset = this._offset;\n    while(offset < this._buffer.length && this._buffer[offset] !== 0x00)offset++;\n    assert.ok(offset < this._buffer.length, \"c string does not terminate\");\n    var str = this._buffer.slice(this._offset, offset).toString();\n    this._offset = offset + 1;\n    return str;\n};\nSSHBuffer.prototype.readInt = function() {\n    var v = this._buffer.readUInt32BE(this._offset);\n    this._offset += 4;\n    return v;\n};\nSSHBuffer.prototype.readInt64 = function() {\n    assert.ok(this._offset + 8 < this._buffer.length, \"buffer not long enough to read Int64\");\n    var v = this._buffer.slice(this._offset, this._offset + 8);\n    this._offset += 8;\n    return v;\n};\nSSHBuffer.prototype.readChar = function() {\n    var v = this._buffer[this._offset++];\n    return v;\n};\nSSHBuffer.prototype.writeBuffer = function(buf) {\n    while(this._offset + 4 + buf.length > this._size)this.expand();\n    this._buffer.writeUInt32BE(buf.length, this._offset);\n    this._offset += 4;\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\nSSHBuffer.prototype.writeString = function(str) {\n    this.writeBuffer(Buffer.from(str, \"utf8\"));\n};\nSSHBuffer.prototype.writeCString = function(str) {\n    while(this._offset + 1 + str.length > this._size)this.expand();\n    this._buffer.write(str, this._offset);\n    this._offset += str.length;\n    this._buffer[this._offset++] = 0;\n};\nSSHBuffer.prototype.writeInt = function(v) {\n    while(this._offset + 4 > this._size)this.expand();\n    this._buffer.writeUInt32BE(v, this._offset);\n    this._offset += 4;\n};\nSSHBuffer.prototype.writeInt64 = function(v) {\n    assert.buffer(v, \"value\");\n    if (v.length > 8) {\n        var lead = v.slice(0, v.length - 8);\n        for(var i = 0; i < lead.length; ++i){\n            assert.strictEqual(lead[i], 0, \"must fit in 64 bits of precision\");\n        }\n        v = v.slice(v.length - 8, v.length);\n    }\n    while(this._offset + 8 > this._size)this.expand();\n    v.copy(this._buffer, this._offset);\n    this._offset += 8;\n};\nSSHBuffer.prototype.writeChar = function(v) {\n    while(this._offset + 1 > this._size)this.expand();\n    this._buffer[this._offset++] = v;\n};\nSSHBuffer.prototype.writePart = function(p) {\n    this.writeBuffer(p.data);\n};\nSSHBuffer.prototype.write = function(buf) {\n    while(this._offset + buf.length > this._size)this.expand();\n    buf.copy(this._buffer, this._offset);\n    this._offset += buf.length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/ssh-buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/sshpk/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/sshpk/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n    bufferSplit: bufferSplit,\n    addRSAMissing: addRSAMissing,\n    calculateDSAPublic: calculateDSAPublic,\n    calculateED25519Public: calculateED25519Public,\n    calculateX25519Public: calculateX25519Public,\n    mpNormalize: mpNormalize,\n    mpDenormalize: mpDenormalize,\n    ecNormalize: ecNormalize,\n    countZeros: countZeros,\n    assertCompatible: assertCompatible,\n    isCompatible: isCompatible,\n    opensslKeyDeriv: opensslKeyDeriv,\n    opensshCipherInfo: opensshCipherInfo,\n    publicFromPrivateECDSA: publicFromPrivateECDSA,\n    zeroPadToLength: zeroPadToLength,\n    writeBitString: writeBitString,\n    readBitString: readBitString,\n    pbkdf2: pbkdf2\n};\nvar assert = __webpack_require__(/*! assert-plus */ \"(rsc)/./node_modules/assert-plus/assert.js\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar PrivateKey = __webpack_require__(/*! ./private-key */ \"(rsc)/./node_modules/sshpk/lib/private-key.js\");\nvar Key = __webpack_require__(/*! ./key */ \"(rsc)/./node_modules/sshpk/lib/key.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar algs = __webpack_require__(/*! ./algs */ \"(rsc)/./node_modules/sshpk/lib/algs.js\");\nvar asn1 = __webpack_require__(/*! asn1 */ \"(rsc)/./node_modules/asn1/lib/index.js\");\nvar ec = __webpack_require__(/*! ecc-jsbn/lib/ec */ \"(rsc)/./node_modules/ecc-jsbn/lib/ec.js\");\nvar jsbn = (__webpack_require__(/*! jsbn */ \"(rsc)/./node_modules/jsbn/index.js\").BigInteger);\nvar nacl = __webpack_require__(/*! tweetnacl */ \"(rsc)/./node_modules/tweetnacl/nacl-fast.js\");\nvar MAX_CLASS_DEPTH = 3;\nfunction isCompatible(obj, klass, needVer) {\n    if (obj === null || typeof obj !== \"object\") return false;\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        if (!proto || ++depth > MAX_CLASS_DEPTH) return false;\n    }\n    if (proto.constructor.name !== klass.name) return false;\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;\n    return true;\n}\nfunction assertCompatible(obj, klass, needVer, name) {\n    if (name === undefined) name = \"object\";\n    assert.ok(obj, name + \" must not be null\");\n    assert.object(obj, name + \" must be an object\");\n    if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;\n    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;\n    var proto = Object.getPrototypeOf(obj);\n    var depth = 0;\n    while(proto.constructor.name !== klass.name){\n        proto = Object.getPrototypeOf(proto);\n        assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + \" must be a \" + klass.name + \" instance\");\n    }\n    assert.strictEqual(proto.constructor.name, klass.name, name + \" must be a \" + klass.name + \" instance\");\n    var ver = proto._sshpkApiVersion;\n    if (ver === undefined) ver = klass._oldVersionDetect(obj);\n    assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + \" must be compatible with \" + klass.name + \" klass \" + \"version \" + needVer[0] + \".\" + needVer[1]);\n}\nvar CIPHER_LEN = {\n    \"des-ede3-cbc\": {\n        key: 24,\n        iv: 8\n    },\n    \"aes-128-cbc\": {\n        key: 16,\n        iv: 16\n    },\n    \"aes-256-cbc\": {\n        key: 32,\n        iv: 16\n    }\n};\nvar PKCS5_SALT_LEN = 8;\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n    assert.buffer(salt, \"salt\");\n    assert.buffer(passphrase, \"passphrase\");\n    assert.number(count, \"iteration count\");\n    var clen = CIPHER_LEN[cipher];\n    assert.object(clen, \"supported cipher\");\n    salt = salt.slice(0, PKCS5_SALT_LEN);\n    var D, D_prev, bufs;\n    var material = Buffer.alloc(0);\n    while(material.length < clen.key + clen.iv){\n        bufs = [];\n        if (D_prev) bufs.push(D_prev);\n        bufs.push(passphrase);\n        bufs.push(salt);\n        D = Buffer.concat(bufs);\n        for(var j = 0; j < count; ++j)D = crypto.createHash(\"md5\").update(D).digest();\n        material = Buffer.concat([\n            material,\n            D\n        ]);\n        D_prev = D;\n    }\n    return {\n        key: material.slice(0, clen.key),\n        iv: material.slice(clen.key, clen.key + clen.iv)\n    };\n}\n/* See: RFC2898 */ function pbkdf2(hashAlg, salt, iterations, size, passphrase) {\n    var hkey = Buffer.alloc(salt.length + 4);\n    salt.copy(hkey);\n    var gen = 0, ts = [];\n    var i = 1;\n    while(gen < size){\n        var t = T(i++);\n        gen += t.length;\n        ts.push(t);\n    }\n    return Buffer.concat(ts).slice(0, size);\n    function T(I) {\n        hkey.writeUInt32BE(I, hkey.length - 4);\n        var hmac = crypto.createHmac(hashAlg, passphrase);\n        hmac.update(hkey);\n        var Ti = hmac.digest();\n        var Uc = Ti;\n        var c = 1;\n        while(c++ < iterations){\n            hmac = crypto.createHmac(hashAlg, passphrase);\n            hmac.update(Uc);\n            Uc = hmac.digest();\n            for(var x = 0; x < Ti.length; ++x)Ti[x] ^= Uc[x];\n        }\n        return Ti;\n    }\n}\n/* Count leading zero bits on a buffer */ function countZeros(buf) {\n    var o = 0, obit = 8;\n    while(o < buf.length){\n        var mask = 1 << obit;\n        if ((buf[o] & mask) === mask) break;\n        obit--;\n        if (obit < 0) {\n            o++;\n            obit = 8;\n        }\n    }\n    return o * 8 + (8 - obit) - 1;\n}\nfunction bufferSplit(buf, chr) {\n    assert.buffer(buf);\n    assert.string(chr);\n    var parts = [];\n    var lastPart = 0;\n    var matches = 0;\n    for(var i = 0; i < buf.length; ++i){\n        if (buf[i] === chr.charCodeAt(matches)) ++matches;\n        else if (buf[i] === chr.charCodeAt(0)) matches = 1;\n        else matches = 0;\n        if (matches >= chr.length) {\n            var newPart = i + 1;\n            parts.push(buf.slice(lastPart, newPart - matches));\n            lastPart = newPart;\n            matches = 0;\n        }\n    }\n    if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));\n    return parts;\n}\nfunction ecNormalize(buf, addZero) {\n    assert.buffer(buf);\n    if (buf[0] === 0x00 && buf[1] === 0x04) {\n        if (addZero) return buf;\n        return buf.slice(1);\n    } else if (buf[0] === 0x04) {\n        if (!addZero) return buf;\n    } else {\n        while(buf[0] === 0x00)buf = buf.slice(1);\n        if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error(\"Compressed elliptic curve points \" + \"are not supported\");\n        if (buf[0] !== 0x04) throw new Error(\"Not a valid elliptic curve point\");\n        if (!addZero) return buf;\n    }\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x0;\n    buf.copy(b, 1);\n    return b;\n}\nfunction readBitString(der, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var buf = der.readString(tag, true);\n    assert.strictEqual(buf[0], 0x00, \"bit strings with unused bits are \" + \"not supported (0x\" + buf[0].toString(16) + \")\");\n    return buf.slice(1);\n}\nfunction writeBitString(der, buf, tag) {\n    if (tag === undefined) tag = asn1.Ber.BitString;\n    var b = Buffer.alloc(buf.length + 1);\n    b[0] = 0x00;\n    buf.copy(b, 1);\n    der.writeBuffer(b, tag);\n}\nfunction mpNormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)buf = buf.slice(1);\n    if ((buf[0] & 0x80) === 0x80) {\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction mpDenormalize(buf) {\n    assert.buffer(buf);\n    while(buf.length > 1 && buf[0] === 0x00)buf = buf.slice(1);\n    return buf;\n}\nfunction zeroPadToLength(buf, len) {\n    assert.buffer(buf);\n    assert.number(len);\n    while(buf.length > len){\n        assert.equal(buf[0], 0x00);\n        buf = buf.slice(1);\n    }\n    while(buf.length < len){\n        var b = Buffer.alloc(buf.length + 1);\n        b[0] = 0x00;\n        buf.copy(b, 1);\n        buf = b;\n    }\n    return buf;\n}\nfunction bigintToMpBuf(bigint) {\n    var buf = Buffer.from(bigint.toByteArray());\n    buf = mpNormalize(buf);\n    return buf;\n}\nfunction calculateDSAPublic(g, p, x) {\n    assert.buffer(g);\n    assert.buffer(p);\n    assert.buffer(x);\n    g = new jsbn(g);\n    p = new jsbn(p);\n    x = new jsbn(x);\n    var y = g.modPow(x, p);\n    var ybuf = bigintToMpBuf(y);\n    return ybuf;\n}\nfunction calculateED25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction calculateX25519Public(k) {\n    assert.buffer(k);\n    var kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n    return Buffer.from(kp.publicKey);\n}\nfunction addRSAMissing(key) {\n    assert.object(key);\n    assertCompatible(key, PrivateKey, [\n        1,\n        1\n    ]);\n    var d = new jsbn(key.part.d.data);\n    var buf;\n    if (!key.part.dmodp) {\n        var p = new jsbn(key.part.p.data);\n        var dmodp = d.mod(p.subtract(1));\n        buf = bigintToMpBuf(dmodp);\n        key.part.dmodp = {\n            name: \"dmodp\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodp);\n    }\n    if (!key.part.dmodq) {\n        var q = new jsbn(key.part.q.data);\n        var dmodq = d.mod(q.subtract(1));\n        buf = bigintToMpBuf(dmodq);\n        key.part.dmodq = {\n            name: \"dmodq\",\n            data: buf\n        };\n        key.parts.push(key.part.dmodq);\n    }\n}\nfunction publicFromPrivateECDSA(curveName, priv) {\n    assert.string(curveName, \"curveName\");\n    assert.buffer(priv);\n    var params = algs.curves[curveName];\n    var p = new jsbn(params.p);\n    var a = new jsbn(params.a);\n    var b = new jsbn(params.b);\n    var curve = new ec.ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(params.G.toString(\"hex\"));\n    var d = new jsbn(mpNormalize(priv));\n    var pub = G.multiply(d);\n    pub = Buffer.from(curve.encodePointHex(pub), \"hex\");\n    var parts = [];\n    parts.push({\n        name: \"curve\",\n        data: Buffer.from(curveName)\n    });\n    parts.push({\n        name: \"Q\",\n        data: pub\n    });\n    var key = new Key({\n        type: \"ecdsa\",\n        curve: curve,\n        parts: parts\n    });\n    return key;\n}\nfunction opensshCipherInfo(cipher) {\n    var inf = {};\n    switch(cipher){\n        case \"3des-cbc\":\n            inf.keySize = 24;\n            inf.blockSize = 8;\n            inf.opensslName = \"des-ede3-cbc\";\n            break;\n        case \"blowfish-cbc\":\n            inf.keySize = 16;\n            inf.blockSize = 8;\n            inf.opensslName = \"bf-cbc\";\n            break;\n        case \"aes128-cbc\":\n        case \"aes128-ctr\":\n        case \"aes128-gcm@openssh.com\":\n            inf.keySize = 16;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-128-\" + cipher.slice(7, 10);\n            break;\n        case \"aes192-cbc\":\n        case \"aes192-ctr\":\n        case \"aes192-gcm@openssh.com\":\n            inf.keySize = 24;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-192-\" + cipher.slice(7, 10);\n            break;\n        case \"aes256-cbc\":\n        case \"aes256-ctr\":\n        case \"aes256-gcm@openssh.com\":\n            inf.keySize = 32;\n            inf.blockSize = 16;\n            inf.opensslName = \"aes-256-\" + cipher.slice(7, 10);\n            break;\n        default:\n            throw new Error('Unsupported openssl cipher \"' + cipher + '\"');\n    }\n    return inf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sshpk/lib/utils.js\n");

/***/ })

};
;