"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1";
exports.ids = ["vendor-chunks/asn1"];
exports.modules = {

/***/ "(rsc)/./node_modules/asn1/lib/ber/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    newInvalidAsn1Error: function(msg) {\n        var e = new Error();\n        e.name = \"InvalidAsn1Error\";\n        e.message = msg || \"\";\n        return e;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7O0FBR3RFQSxPQUFPQyxPQUFPLEdBQUc7SUFFZkMscUJBQXFCLFNBQVVDLEdBQUc7UUFDaEMsSUFBSUMsSUFBSSxJQUFJQztRQUNaRCxFQUFFRSxJQUFJLEdBQUc7UUFDVEYsRUFBRUcsT0FBTyxHQUFHSixPQUFPO1FBQ25CLE9BQU9DO0lBQ1Q7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lhdG9vbHMtbmV4dC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvZXJyb3JzLmpzPzMzM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG5ld0ludmFsaWRBc24xRXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICB2YXIgZSA9IG5ldyBFcnJvcigpO1xuICAgIGUubmFtZSA9ICdJbnZhbGlkQXNuMUVycm9yJztcbiAgICBlLm1lc3NhZ2UgPSBtc2cgfHwgJyc7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibmV3SW52YWxpZEFzbjFFcnJvciIsIm1zZyIsImUiLCJFcnJvciIsIm5hbWUiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\nvar types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar Reader = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/asn1/lib/ber/reader.js\");\nvar Writer = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/asn1/lib/ber/writer.js\");\n// --- Exports\nmodule.exports = {\n    Reader: Reader,\n    Writer: Writer\n};\nfor(var t in types){\n    if (types.hasOwnProperty(t)) module.exports[t] = types[t];\n}\nfor(var e in errors){\n    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFFdEUsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDckIsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUM7QUFHckIsY0FBYztBQUVkSSxPQUFPQyxPQUFPLEdBQUc7SUFFZkgsUUFBUUE7SUFFUkMsUUFBUUE7QUFFVjtBQUVBLElBQUssSUFBSUcsS0FBS0wsTUFBTztJQUNuQixJQUFJQSxNQUFNTSxjQUFjLENBQUNELElBQ3ZCRixPQUFPQyxPQUFPLENBQUNDLEVBQUUsR0FBR0wsS0FBSyxDQUFDSyxFQUFFO0FBQ2hDO0FBQ0EsSUFBSyxJQUFJRSxLQUFLVCxPQUFRO0lBQ3BCLElBQUlBLE9BQU9RLGNBQWMsQ0FBQ0MsSUFDeEJKLE9BQU9DLE9BQU8sQ0FBQ0csRUFBRSxHQUFHVCxNQUFNLENBQUNTLEVBQUU7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYXRvb2xzLW5leHQvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzPzk3YzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcblxudmFyIFJlYWRlciA9IHJlcXVpcmUoJy4vcmVhZGVyJyk7XG52YXIgV3JpdGVyID0gcmVxdWlyZSgnLi93cml0ZXInKTtcblxuXG4vLyAtLS0gRXhwb3J0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBSZWFkZXI6IFJlYWRlcixcblxuICBXcml0ZXI6IFdyaXRlclxuXG59O1xuXG5mb3IgKHZhciB0IGluIHR5cGVzKSB7XG4gIGlmICh0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSlcbiAgICBtb2R1bGUuZXhwb3J0c1t0XSA9IHR5cGVzW3RdO1xufVxuZm9yICh2YXIgZSBpbiBlcnJvcnMpIHtcbiAgaWYgKGVycm9ycy5oYXNPd25Qcm9wZXJ0eShlKSlcbiAgICBtb2R1bGUuZXhwb3J0c1tlXSA9IGVycm9yc1tlXTtcbn1cbiJdLCJuYW1lcyI6WyJlcnJvcnMiLCJyZXF1aXJlIiwidHlwZXMiLCJSZWFkZXIiLCJXcml0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwidCIsImhhc093blByb3BlcnR5IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/reader.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/reader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n// --- API\nfunction Reader(data) {\n    if (!data || !Buffer.isBuffer(data)) throw new TypeError(\"data must be a node Buffer\");\n    this._buf = data;\n    this._size = data.length;\n    // These hold the \"current\" state\n    this._len = 0;\n    this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, \"length\", {\n    enumerable: true,\n    get: function() {\n        return this._len;\n    }\n});\nObject.defineProperty(Reader.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        return this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"remain\", {\n    get: function() {\n        return this._size - this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"buffer\", {\n    get: function() {\n        return this._buf.slice(this._offset);\n    }\n});\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */ Reader.prototype.readByte = function(peek) {\n    if (this._size - this._offset < 1) return null;\n    var b = this._buf[this._offset] & 0xff;\n    if (!peek) this._offset += 1;\n    return b;\n};\nReader.prototype.peek = function() {\n    return this.readByte(true);\n};\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */ Reader.prototype.readLength = function(offset) {\n    if (offset === undefined) offset = this._offset;\n    if (offset >= this._size) return null;\n    var lenB = this._buf[offset++] & 0xff;\n    if (lenB === null) return null;\n    if ((lenB & 0x80) === 0x80) {\n        lenB &= 0x7f;\n        if (lenB === 0) throw newInvalidAsn1Error(\"Indefinite length not supported\");\n        if (lenB > 4) throw newInvalidAsn1Error(\"encoding too long\");\n        if (this._size - offset < lenB) return null;\n        this._len = 0;\n        for(var i = 0; i < lenB; i++)this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n    } else {\n        // Wasn't a variable length\n        this._len = lenB;\n    }\n    return offset;\n};\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */ Reader.prototype.readSequence = function(tag) {\n    var seq = this.peek();\n    if (seq === null) return null;\n    if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + seq.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    this._offset = o;\n    return seq;\n};\nReader.prototype.readInt = function() {\n    return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function() {\n    return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function() {\n    return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function(tag, retbuf) {\n    if (!tag) tag = ASN1.OctetString;\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    if (this.length === 0) return retbuf ? Buffer.alloc(0) : \"\";\n    var str = this._buf.slice(this._offset, this._offset + this.length);\n    this._offset += this.length;\n    return retbuf ? str : str.toString(\"utf8\");\n};\nReader.prototype.readOID = function(tag) {\n    if (!tag) tag = ASN1.OID;\n    var b = this.readString(tag, true);\n    if (b === null) return null;\n    var values = [];\n    var value = 0;\n    for(var i = 0; i < b.length; i++){\n        var byte = b[i] & 0xff;\n        value <<= 7;\n        value += byte & 0x7f;\n        if ((byte & 0x80) === 0) {\n            values.push(value);\n            value = 0;\n        }\n    }\n    value = values.shift();\n    values.unshift(value % 40);\n    values.unshift(value / 40 >> 0);\n    return values.join(\".\");\n};\nReader.prototype._readTag = function(tag) {\n    assert.ok(tag !== undefined);\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > 4) throw newInvalidAsn1Error(\"Integer too long: \" + this.length);\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    var fb = this._buf[this._offset];\n    var value = 0;\n    for(var i = 0; i < this.length; i++){\n        value <<= 8;\n        value |= this._buf[this._offset++] & 0xff;\n    }\n    if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n    return value >> 0;\n};\n// --- Exported API\nmodule.exports = Reader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/types.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/types.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nmodule.exports = {\n    EOC: 0,\n    Boolean: 1,\n    Integer: 2,\n    BitString: 3,\n    OctetString: 4,\n    Null: 5,\n    OID: 6,\n    ObjectDescriptor: 7,\n    External: 8,\n    Real: 9,\n    Enumeration: 10,\n    PDV: 11,\n    Utf8String: 12,\n    RelativeOID: 13,\n    Sequence: 16,\n    Set: 17,\n    NumericString: 18,\n    PrintableString: 19,\n    T61String: 20,\n    VideotexString: 21,\n    IA5String: 22,\n    UTCTime: 23,\n    GeneralizedTime: 24,\n    GraphicString: 25,\n    VisibleString: 26,\n    GeneralString: 28,\n    UniversalString: 29,\n    CharacterString: 30,\n    BMPString: 31,\n    Constructor: 32,\n    Context: 128\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTs7QUFHdEVBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLO0lBQ0xDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLGtCQUFrQjtJQUNsQkMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsS0FBSztJQUNMQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxTQUFTO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYXRvb2xzLW5leHQvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzPzU5NTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFT0M6IDAsXG4gIEJvb2xlYW46IDEsXG4gIEludGVnZXI6IDIsXG4gIEJpdFN0cmluZzogMyxcbiAgT2N0ZXRTdHJpbmc6IDQsXG4gIE51bGw6IDUsXG4gIE9JRDogNixcbiAgT2JqZWN0RGVzY3JpcHRvcjogNyxcbiAgRXh0ZXJuYWw6IDgsXG4gIFJlYWw6IDksIC8vIGZsb2F0XG4gIEVudW1lcmF0aW9uOiAxMCxcbiAgUERWOiAxMSxcbiAgVXRmOFN0cmluZzogMTIsXG4gIFJlbGF0aXZlT0lEOiAxMyxcbiAgU2VxdWVuY2U6IDE2LFxuICBTZXQ6IDE3LFxuICBOdW1lcmljU3RyaW5nOiAxOCxcbiAgUHJpbnRhYmxlU3RyaW5nOiAxOSxcbiAgVDYxU3RyaW5nOiAyMCxcbiAgVmlkZW90ZXhTdHJpbmc6IDIxLFxuICBJQTVTdHJpbmc6IDIyLFxuICBVVENUaW1lOiAyMyxcbiAgR2VuZXJhbGl6ZWRUaW1lOiAyNCxcbiAgR3JhcGhpY1N0cmluZzogMjUsXG4gIFZpc2libGVTdHJpbmc6IDI2LFxuICBHZW5lcmFsU3RyaW5nOiAyOCxcbiAgVW5pdmVyc2FsU3RyaW5nOiAyOSxcbiAgQ2hhcmFjdGVyU3RyaW5nOiAzMCxcbiAgQk1QU3RyaW5nOiAzMSxcbiAgQ29uc3RydWN0b3I6IDMyLFxuICBDb250ZXh0OiAxMjhcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVPQyIsIkJvb2xlYW4iLCJJbnRlZ2VyIiwiQml0U3RyaW5nIiwiT2N0ZXRTdHJpbmciLCJOdWxsIiwiT0lEIiwiT2JqZWN0RGVzY3JpcHRvciIsIkV4dGVybmFsIiwiUmVhbCIsIkVudW1lcmF0aW9uIiwiUERWIiwiVXRmOFN0cmluZyIsIlJlbGF0aXZlT0lEIiwiU2VxdWVuY2UiLCJTZXQiLCJOdW1lcmljU3RyaW5nIiwiUHJpbnRhYmxlU3RyaW5nIiwiVDYxU3RyaW5nIiwiVmlkZW90ZXhTdHJpbmciLCJJQTVTdHJpbmciLCJVVENUaW1lIiwiR2VuZXJhbGl6ZWRUaW1lIiwiR3JhcGhpY1N0cmluZyIsIlZpc2libGVTdHJpbmciLCJHZW5lcmFsU3RyaW5nIiwiVW5pdmVyc2FsU3RyaW5nIiwiQ2hhcmFjdGVyU3RyaW5nIiwiQk1QU3RyaW5nIiwiQ29uc3RydWN0b3IiLCJDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/ber/writer.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/writer.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(rsc)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\nvar DEFAULT_OPTS = {\n    size: 1024,\n    growthFactor: 8\n};\n// --- Helpers\nfunction merge(from, to) {\n    assert.ok(from);\n    assert.equal(typeof from, \"object\");\n    assert.ok(to);\n    assert.equal(typeof to, \"object\");\n    var keys = Object.getOwnPropertyNames(from);\n    keys.forEach(function(key) {\n        if (to[key]) return;\n        var value = Object.getOwnPropertyDescriptor(from, key);\n        Object.defineProperty(to, key, value);\n    });\n    return to;\n}\n// --- API\nfunction Writer(options) {\n    options = merge(DEFAULT_OPTS, options || {});\n    this._buf = Buffer.alloc(options.size || 1024);\n    this._size = this._buf.length;\n    this._offset = 0;\n    this._options = options;\n    // A list of offsets in the buffer where we need to insert\n    // sequence tag/len pairs.\n    this._seq = [];\n}\nObject.defineProperty(Writer.prototype, \"buffer\", {\n    get: function() {\n        if (this._seq.length) throw newInvalidAsn1Error(this._seq.length + \" unended sequence(s)\");\n        return this._buf.slice(0, this._offset);\n    }\n});\nWriter.prototype.writeByte = function(b) {\n    if (typeof b !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(1);\n    this._buf[this._offset++] = b;\n};\nWriter.prototype.writeInt = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Integer;\n    var sz = 4;\n    while(((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1){\n        sz--;\n        i <<= 8;\n    }\n    if (sz > 4) throw newInvalidAsn1Error(\"BER ints cannot be > 0xffffffff\");\n    this._ensure(2 + sz);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = sz;\n    while(sz-- > 0){\n        this._buf[this._offset++] = (i & 0xff000000) >>> 24;\n        i <<= 8;\n    }\n};\nWriter.prototype.writeNull = function() {\n    this.writeByte(ASN1.Null);\n    this.writeByte(0x00);\n};\nWriter.prototype.writeEnumeration = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Enumeration;\n    return this.writeInt(i, tag);\n};\nWriter.prototype.writeBoolean = function(b, tag) {\n    if (typeof b !== \"boolean\") throw new TypeError(\"argument must be a Boolean\");\n    if (typeof tag !== \"number\") tag = ASN1.Boolean;\n    this._ensure(3);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = 0x01;\n    this._buf[this._offset++] = b ? 0xff : 0x00;\n};\nWriter.prototype.writeString = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string (was: \" + typeof s + \")\");\n    if (typeof tag !== \"number\") tag = ASN1.OctetString;\n    var len = Buffer.byteLength(s);\n    this.writeByte(tag);\n    this.writeLength(len);\n    if (len) {\n        this._ensure(len);\n        this._buf.write(s, this._offset);\n        this._offset += len;\n    }\n};\nWriter.prototype.writeBuffer = function(buf, tag) {\n    if (typeof tag !== \"number\") throw new TypeError(\"tag must be a number\");\n    if (!Buffer.isBuffer(buf)) throw new TypeError(\"argument must be a buffer\");\n    this.writeByte(tag);\n    this.writeLength(buf.length);\n    this._ensure(buf.length);\n    buf.copy(this._buf, this._offset, 0, buf.length);\n    this._offset += buf.length;\n};\nWriter.prototype.writeStringArray = function(strings) {\n    if (!strings instanceof Array) throw new TypeError(\"argument must be an Array[String]\");\n    var self = this;\n    strings.forEach(function(s) {\n        self.writeString(s);\n    });\n};\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string\");\n    if (typeof tag !== \"number\") tag = ASN1.OID;\n    if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s)) throw new Error(\"argument is not a valid OID string\");\n    function encodeOctet(bytes, octet) {\n        if (octet < 128) {\n            bytes.push(octet);\n        } else if (octet < 16384) {\n            bytes.push(octet >>> 7 | 0x80);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 2097152) {\n            bytes.push(octet >>> 14 | 0x80);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 268435456) {\n            bytes.push(octet >>> 21 | 0x80);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else {\n            bytes.push((octet >>> 28 | 0x80) & 0xFF);\n            bytes.push((octet >>> 21 | 0x80) & 0xFF);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        }\n    }\n    var tmp = s.split(\".\");\n    var bytes = [];\n    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n    tmp.slice(2).forEach(function(b) {\n        encodeOctet(bytes, parseInt(b, 10));\n    });\n    var self = this;\n    this._ensure(2 + bytes.length);\n    this.writeByte(tag);\n    this.writeLength(bytes.length);\n    bytes.forEach(function(b) {\n        self.writeByte(b);\n    });\n};\nWriter.prototype.writeLength = function(len) {\n    if (typeof len !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(4);\n    if (len <= 0x7f) {\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xff) {\n        this._buf[this._offset++] = 0x81;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffff) {\n        this._buf[this._offset++] = 0x82;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffffff) {\n        this._buf[this._offset++] = 0x83;\n        this._buf[this._offset++] = len >> 16;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Length too long (> 4 bytes)\");\n    }\n};\nWriter.prototype.startSequence = function(tag) {\n    if (typeof tag !== \"number\") tag = ASN1.Sequence | ASN1.Constructor;\n    this.writeByte(tag);\n    this._seq.push(this._offset);\n    this._ensure(3);\n    this._offset += 3;\n};\nWriter.prototype.endSequence = function() {\n    var seq = this._seq.pop();\n    var start = seq + 3;\n    var len = this._offset - start;\n    if (len <= 0x7f) {\n        this._shift(start, len, -2);\n        this._buf[seq] = len;\n    } else if (len <= 0xff) {\n        this._shift(start, len, -1);\n        this._buf[seq] = 0x81;\n        this._buf[seq + 1] = len;\n    } else if (len <= 0xffff) {\n        this._buf[seq] = 0x82;\n        this._buf[seq + 1] = len >> 8;\n        this._buf[seq + 2] = len;\n    } else if (len <= 0xffffff) {\n        this._shift(start, len, 1);\n        this._buf[seq] = 0x83;\n        this._buf[seq + 1] = len >> 16;\n        this._buf[seq + 2] = len >> 8;\n        this._buf[seq + 3] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Sequence too long\");\n    }\n};\nWriter.prototype._shift = function(start, len, shift) {\n    assert.ok(start !== undefined);\n    assert.ok(len !== undefined);\n    assert.ok(shift);\n    this._buf.copy(this._buf, start + shift, start, start + len);\n    this._offset += shift;\n};\nWriter.prototype._ensure = function(len) {\n    assert.ok(len);\n    if (this._size - this._offset < len) {\n        var sz = this._size * this._options.growthFactor;\n        if (sz - this._offset < len) sz += len;\n        var buf = Buffer.alloc(sz);\n        this._buf.copy(buf, 0, 0, this._offset);\n        this._buf = buf;\n        this._size = sz;\n    }\n};\n// --- Exported API\nmodule.exports = Writer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/ber/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/asn1/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/asn1/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\n\nvar Ber = __webpack_require__(/*! ./ber/index */ \"(rsc)/./node_modules/asn1/lib/ber/index.js\");\n// --- Exported API\nmodule.exports = {\n    Ber: Ber,\n    BerReader: Ber.Reader,\n    BerWriter: Ber.Writer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLHNEQUFzRDtBQUN0RCw4Q0FBOEM7O0FBRTlDLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDO0FBSWxCLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBRWZILEtBQUtBO0lBRUxJLFdBQVdKLElBQUlLLE1BQU07SUFFckJDLFdBQVdOLElBQUlPLE1BQU07QUFFdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYXRvb2xzLW5leHQvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanM/ZTEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbi8vIElmIHlvdSBoYXZlIG5vIGlkZWEgd2hhdCBBU04uMSBvciBCRVIgaXMsIHNlZSB0aGlzOlxuLy8gZnRwOi8vZnRwLnJzYS5jb20vcHViL3BrY3MvYXNjaWkvbGF5bWFuLmFzY1xuXG52YXIgQmVyID0gcmVxdWlyZSgnLi9iZXIvaW5kZXgnKTtcblxuXG5cbi8vIC0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgQmVyOiBCZXIsXG5cbiAgQmVyUmVhZGVyOiBCZXIuUmVhZGVyLFxuXG4gIEJlcldyaXRlcjogQmVyLldyaXRlclxuXG59O1xuIl0sIm5hbWVzIjpbIkJlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQmVyUmVhZGVyIiwiUmVhZGVyIiwiQmVyV3JpdGVyIiwiV3JpdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1/lib/index.js\n");

/***/ })

};
;