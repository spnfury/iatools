"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/forever-agent";
exports.ids = ["vendor-chunks/forever-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/forever-agent/index.js":
/*!*********************************************!*\
  !*** ./node_modules/forever-agent/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = ForeverAgent;\nForeverAgent.SSL = ForeverAgentSSL;\nvar util = __webpack_require__(/*! util */ \"util\"), Agent = (__webpack_require__(/*! http */ \"http\").Agent), net = __webpack_require__(/*! net */ \"net\"), tls = __webpack_require__(/*! tls */ \"tls\"), AgentSSL = (__webpack_require__(/*! https */ \"https\").Agent);\nfunction getConnectionName(host, port) {\n    var name = \"\";\n    if (typeof host === \"string\") {\n        name = host + \":\" + port;\n    } else {\n        // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n        name = host.host + \":\" + host.port + \":\" + (host.localAddress ? host.localAddress + \":\" : \":\");\n    }\n    return name;\n}\nfunction ForeverAgent(options) {\n    var self = this;\n    self.options = options || {};\n    self.requests = {};\n    self.sockets = {};\n    self.freeSockets = {};\n    self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;\n    self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;\n    self.on(\"free\", function(socket, host, port) {\n        var name = getConnectionName(host, port);\n        if (self.requests[name] && self.requests[name].length) {\n            self.requests[name].shift().onSocket(socket);\n        } else if (self.sockets[name].length < self.minSockets) {\n            if (!self.freeSockets[name]) self.freeSockets[name] = [];\n            self.freeSockets[name].push(socket);\n            // if an error happens while we don't use the socket anyway, meh, throw the socket away\n            var onIdleError = function() {\n                socket.destroy();\n            };\n            socket._onIdleError = onIdleError;\n            socket.on(\"error\", onIdleError);\n        } else {\n            // If there are no pending requests just destroy the\n            // socket and it will get removed from the pool. This\n            // gets us out of timeout issues and allows us to\n            // default to Connection:keep-alive.\n            socket.destroy();\n        }\n    });\n}\nutil.inherits(ForeverAgent, Agent);\nForeverAgent.defaultMinSockets = 5;\nForeverAgent.prototype.createConnection = net.createConnection;\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;\nForeverAgent.prototype.addRequest = function(req, host, port) {\n    var name = getConnectionName(host, port);\n    if (typeof host !== \"string\") {\n        var options = host;\n        port = options.port;\n        host = options.host;\n    }\n    if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n        var idleSocket = this.freeSockets[name].pop();\n        idleSocket.removeListener(\"error\", idleSocket._onIdleError);\n        delete idleSocket._onIdleError;\n        req._reusedSocket = true;\n        req.onSocket(idleSocket);\n    } else {\n        this.addRequestNoreuse(req, host, port);\n    }\n};\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n    if (this.sockets[name]) {\n        var index = this.sockets[name].indexOf(s);\n        if (index !== -1) {\n            this.sockets[name].splice(index, 1);\n        }\n    } else if (this.sockets[name] && this.sockets[name].length === 0) {\n        // don't leak\n        delete this.sockets[name];\n        delete this.requests[name];\n    }\n    if (this.freeSockets[name]) {\n        var index = this.freeSockets[name].indexOf(s);\n        if (index !== -1) {\n            this.freeSockets[name].splice(index, 1);\n            if (this.freeSockets[name].length === 0) {\n                delete this.freeSockets[name];\n            }\n        }\n    }\n    if (this.requests[name] && this.requests[name].length) {\n        // If we have pending requests and a socket gets closed a new one\n        // needs to be created to take over in the pool for the one that closed.\n        this.createSocket(name, host, port).emit(\"free\");\n    }\n};\nfunction ForeverAgentSSL(options) {\n    ForeverAgent.call(this, options);\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent);\nForeverAgentSSL.prototype.createConnection = createConnectionSSL;\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;\nfunction createConnectionSSL(port, host, options) {\n    if (typeof port === \"object\") {\n        options = port;\n    } else if (typeof host === \"object\") {\n        options = host;\n    } else if (typeof options === \"object\") {\n        options = options;\n    } else {\n        options = {};\n    }\n    if (typeof port === \"number\") {\n        options.port = port;\n    }\n    if (typeof host === \"string\") {\n        options.host = host;\n    }\n    return tls.connect(options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/forever-agent/index.js\n");

/***/ })

};
;